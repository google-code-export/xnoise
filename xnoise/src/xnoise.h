/* xnoise.h generated by valac, the Vala compiler, do not modify */


#ifndef ____XNOISE_H__
#define ____XNOISE_H__

#include <glib.h>
#include <gtk/gtk.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <unique/unique.h>
#include <gdk/gdk.h>
#include <float.h>
#include <math.h>
#include <gio/gio.h>
#include <gdk-pixbuf/gdk-pixdata.h>

G_BEGIN_DECLS


#define XNOISE_TYPE_ABOUT_DIALOG (xnoise_about_dialog_get_type ())
#define XNOISE_ABOUT_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_ABOUT_DIALOG, XnoiseAboutDialog))
#define XNOISE_ABOUT_DIALOG_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_ABOUT_DIALOG, XnoiseAboutDialogClass))
#define XNOISE_IS_ABOUT_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_ABOUT_DIALOG))
#define XNOISE_IS_ABOUT_DIALOG_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_ABOUT_DIALOG))
#define XNOISE_ABOUT_DIALOG_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_ABOUT_DIALOG, XnoiseAboutDialogClass))

typedef struct _XnoiseAboutDialog XnoiseAboutDialog;
typedef struct _XnoiseAboutDialogClass XnoiseAboutDialogClass;
typedef struct _XnoiseAboutDialogPrivate XnoiseAboutDialogPrivate;

#define XNOISE_TYPE_ADD_MEDIA_DIALOG (xnoise_add_media_dialog_get_type ())
#define XNOISE_ADD_MEDIA_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_ADD_MEDIA_DIALOG, XnoiseAddMediaDialog))
#define XNOISE_ADD_MEDIA_DIALOG_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_ADD_MEDIA_DIALOG, XnoiseAddMediaDialogClass))
#define XNOISE_IS_ADD_MEDIA_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_ADD_MEDIA_DIALOG))
#define XNOISE_IS_ADD_MEDIA_DIALOG_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_ADD_MEDIA_DIALOG))
#define XNOISE_ADD_MEDIA_DIALOG_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_ADD_MEDIA_DIALOG, XnoiseAddMediaDialogClass))

typedef struct _XnoiseAddMediaDialog XnoiseAddMediaDialog;
typedef struct _XnoiseAddMediaDialogClass XnoiseAddMediaDialogClass;
typedef struct _XnoiseAddMediaDialogPrivate XnoiseAddMediaDialogPrivate;

#define XNOISE_TYPE_ALBUM_IMAGE (xnoise_album_image_get_type ())
#define XNOISE_ALBUM_IMAGE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_ALBUM_IMAGE, XnoiseAlbumImage))
#define XNOISE_ALBUM_IMAGE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_ALBUM_IMAGE, XnoiseAlbumImageClass))
#define XNOISE_IS_ALBUM_IMAGE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_ALBUM_IMAGE))
#define XNOISE_IS_ALBUM_IMAGE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_ALBUM_IMAGE))
#define XNOISE_ALBUM_IMAGE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_ALBUM_IMAGE, XnoiseAlbumImageClass))

typedef struct _XnoiseAlbumImage XnoiseAlbumImage;
typedef struct _XnoiseAlbumImageClass XnoiseAlbumImageClass;
typedef struct _XnoiseAlbumImagePrivate XnoiseAlbumImagePrivate;

#define XNOISE_TYPE_ALBUM_IMAGE_LOADER (xnoise_album_image_loader_get_type ())
#define XNOISE_ALBUM_IMAGE_LOADER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_ALBUM_IMAGE_LOADER, XnoiseAlbumImageLoader))
#define XNOISE_ALBUM_IMAGE_LOADER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_ALBUM_IMAGE_LOADER, XnoiseAlbumImageLoaderClass))
#define XNOISE_IS_ALBUM_IMAGE_LOADER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_ALBUM_IMAGE_LOADER))
#define XNOISE_IS_ALBUM_IMAGE_LOADER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_ALBUM_IMAGE_LOADER))
#define XNOISE_ALBUM_IMAGE_LOADER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_ALBUM_IMAGE_LOADER, XnoiseAlbumImageLoaderClass))

typedef struct _XnoiseAlbumImageLoader XnoiseAlbumImageLoader;
typedef struct _XnoiseAlbumImageLoaderClass XnoiseAlbumImageLoaderClass;
typedef struct _XnoiseAlbumImageLoaderPrivate XnoiseAlbumImageLoaderPrivate;

#define XNOISE_TYPE_APP_STARTER (xnoise_app_starter_get_type ())
#define XNOISE_APP_STARTER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_APP_STARTER, XnoiseAppStarter))
#define XNOISE_APP_STARTER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_APP_STARTER, XnoiseAppStarterClass))
#define XNOISE_IS_APP_STARTER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_APP_STARTER))
#define XNOISE_IS_APP_STARTER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_APP_STARTER))
#define XNOISE_APP_STARTER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_APP_STARTER, XnoiseAppStarterClass))

typedef struct _XnoiseAppStarter XnoiseAppStarter;
typedef struct _XnoiseAppStarterClass XnoiseAppStarterClass;
typedef struct _XnoiseAppStarterPrivate XnoiseAppStarterPrivate;

#define XNOISE_TYPE_MAIN (xnoise_main_get_type ())
#define XNOISE_MAIN(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_MAIN, XnoiseMain))
#define XNOISE_MAIN_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_MAIN, XnoiseMainClass))
#define XNOISE_IS_MAIN(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_MAIN))
#define XNOISE_IS_MAIN_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_MAIN))
#define XNOISE_MAIN_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_MAIN, XnoiseMainClass))

typedef struct _XnoiseMain XnoiseMain;
typedef struct _XnoiseMainClass XnoiseMainClass;

#define XNOISE_TYPE_CONTROL_BUTTON (xnoise_control_button_get_type ())
#define XNOISE_CONTROL_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_CONTROL_BUTTON, XnoiseControlButton))
#define XNOISE_CONTROL_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_CONTROL_BUTTON, XnoiseControlButtonClass))
#define XNOISE_IS_CONTROL_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_CONTROL_BUTTON))
#define XNOISE_IS_CONTROL_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_CONTROL_BUTTON))
#define XNOISE_CONTROL_BUTTON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_CONTROL_BUTTON, XnoiseControlButtonClass))

typedef struct _XnoiseControlButton XnoiseControlButton;
typedef struct _XnoiseControlButtonClass XnoiseControlButtonClass;
typedef struct _XnoiseControlButtonPrivate XnoiseControlButtonPrivate;

#define XNOISE_CONTROL_BUTTON_TYPE_DIRECTION (xnoise_control_button_direction_get_type ())

#define XNOISE_TYPE_DB_BROWSER (xnoise_db_browser_get_type ())
#define XNOISE_DB_BROWSER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_DB_BROWSER, XnoiseDbBrowser))
#define XNOISE_DB_BROWSER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_DB_BROWSER, XnoiseDbBrowserClass))
#define XNOISE_IS_DB_BROWSER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_DB_BROWSER))
#define XNOISE_IS_DB_BROWSER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_DB_BROWSER))
#define XNOISE_DB_BROWSER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_DB_BROWSER, XnoiseDbBrowserClass))

typedef struct _XnoiseDbBrowser XnoiseDbBrowser;
typedef struct _XnoiseDbBrowserClass XnoiseDbBrowserClass;
typedef struct _XnoiseDbBrowserPrivate XnoiseDbBrowserPrivate;

#define XNOISE_TYPE_TRACK_DATA (xnoise_track_data_get_type ())
#define XNOISE_TRACK_DATA(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_TRACK_DATA, XnoiseTrackData))
#define XNOISE_TRACK_DATA_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_TRACK_DATA, XnoiseTrackDataClass))
#define XNOISE_IS_TRACK_DATA(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_TRACK_DATA))
#define XNOISE_IS_TRACK_DATA_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_TRACK_DATA))
#define XNOISE_TRACK_DATA_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_TRACK_DATA, XnoiseTrackDataClass))

typedef struct _XnoiseTrackData XnoiseTrackData;
typedef struct _XnoiseTrackDataClass XnoiseTrackDataClass;

#define XNOISE_TYPE_STREAM_DATA (xnoise_stream_data_get_type ())
typedef struct _XnoiseStreamData XnoiseStreamData;

#define XNOISE_TYPE_MEDIA_DATA (xnoise_media_data_get_type ())

#define XNOISE_TYPE_MEDIA_TYPE (xnoise_media_type_get_type ())
typedef struct _XnoiseMediaData XnoiseMediaData;

#define XNOISE_TYPE_DB_CREATOR (xnoise_db_creator_get_type ())
#define XNOISE_DB_CREATOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_DB_CREATOR, XnoiseDbCreator))
#define XNOISE_DB_CREATOR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_DB_CREATOR, XnoiseDbCreatorClass))
#define XNOISE_IS_DB_CREATOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_DB_CREATOR))
#define XNOISE_IS_DB_CREATOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_DB_CREATOR))
#define XNOISE_DB_CREATOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_DB_CREATOR, XnoiseDbCreatorClass))

typedef struct _XnoiseDbCreator XnoiseDbCreator;
typedef struct _XnoiseDbCreatorClass XnoiseDbCreatorClass;
typedef struct _XnoiseDbCreatorPrivate XnoiseDbCreatorPrivate;

#define XNOISE_TYPE_DB_WRITER (xnoise_db_writer_get_type ())
#define XNOISE_DB_WRITER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_DB_WRITER, XnoiseDbWriter))
#define XNOISE_DB_WRITER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_DB_WRITER, XnoiseDbWriterClass))
#define XNOISE_IS_DB_WRITER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_DB_WRITER))
#define XNOISE_IS_DB_WRITER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_DB_WRITER))
#define XNOISE_DB_WRITER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_DB_WRITER, XnoiseDbWriterClass))

typedef struct _XnoiseDbWriter XnoiseDbWriter;
typedef struct _XnoiseDbWriterClass XnoiseDbWriterClass;
typedef struct _XnoiseDbWriterPrivate XnoiseDbWriterPrivate;

#define XNOISE_TYPE_FULLSCREEN_TOOLBAR (xnoise_fullscreen_toolbar_get_type ())
#define XNOISE_FULLSCREEN_TOOLBAR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_FULLSCREEN_TOOLBAR, XnoiseFullscreenToolbar))
#define XNOISE_FULLSCREEN_TOOLBAR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_FULLSCREEN_TOOLBAR, XnoiseFullscreenToolbarClass))
#define XNOISE_IS_FULLSCREEN_TOOLBAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_FULLSCREEN_TOOLBAR))
#define XNOISE_IS_FULLSCREEN_TOOLBAR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_FULLSCREEN_TOOLBAR))
#define XNOISE_FULLSCREEN_TOOLBAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_FULLSCREEN_TOOLBAR, XnoiseFullscreenToolbarClass))

typedef struct _XnoiseFullscreenToolbar XnoiseFullscreenToolbar;
typedef struct _XnoiseFullscreenToolbarClass XnoiseFullscreenToolbarClass;
typedef struct _XnoiseFullscreenToolbarPrivate XnoiseFullscreenToolbarPrivate;

#define XNOISE_FULLSCREEN_TOOLBAR_TYPE_LEAVE_VIDEO_FS_BUTTON (xnoise_fullscreen_toolbar_leave_video_fs_button_get_type ())
#define XNOISE_FULLSCREEN_TOOLBAR_LEAVE_VIDEO_FS_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_FULLSCREEN_TOOLBAR_TYPE_LEAVE_VIDEO_FS_BUTTON, XnoiseFullscreenToolbarLeaveVideoFSButton))
#define XNOISE_FULLSCREEN_TOOLBAR_LEAVE_VIDEO_FS_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_FULLSCREEN_TOOLBAR_TYPE_LEAVE_VIDEO_FS_BUTTON, XnoiseFullscreenToolbarLeaveVideoFSButtonClass))
#define XNOISE_FULLSCREEN_TOOLBAR_IS_LEAVE_VIDEO_FS_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_FULLSCREEN_TOOLBAR_TYPE_LEAVE_VIDEO_FS_BUTTON))
#define XNOISE_FULLSCREEN_TOOLBAR_IS_LEAVE_VIDEO_FS_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_FULLSCREEN_TOOLBAR_TYPE_LEAVE_VIDEO_FS_BUTTON))
#define XNOISE_FULLSCREEN_TOOLBAR_LEAVE_VIDEO_FS_BUTTON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_FULLSCREEN_TOOLBAR_TYPE_LEAVE_VIDEO_FS_BUTTON, XnoiseFullscreenToolbarLeaveVideoFSButtonClass))

typedef struct _XnoiseFullscreenToolbarLeaveVideoFSButton XnoiseFullscreenToolbarLeaveVideoFSButton;
typedef struct _XnoiseFullscreenToolbarLeaveVideoFSButtonClass XnoiseFullscreenToolbarLeaveVideoFSButtonClass;
typedef struct _XnoiseFullscreenToolbarLeaveVideoFSButtonPrivate XnoiseFullscreenToolbarLeaveVideoFSButtonPrivate;

#define XNOISE_TYPE_GLOBAL_ACCESS (xnoise_global_access_get_type ())
#define XNOISE_GLOBAL_ACCESS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_GLOBAL_ACCESS, XnoiseGlobalAccess))
#define XNOISE_GLOBAL_ACCESS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_GLOBAL_ACCESS, XnoiseGlobalAccessClass))
#define XNOISE_IS_GLOBAL_ACCESS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_GLOBAL_ACCESS))
#define XNOISE_IS_GLOBAL_ACCESS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_GLOBAL_ACCESS))
#define XNOISE_GLOBAL_ACCESS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_GLOBAL_ACCESS, XnoiseGlobalAccessClass))

typedef struct _XnoiseGlobalAccess XnoiseGlobalAccess;
typedef struct _XnoiseGlobalAccessClass XnoiseGlobalAccessClass;
typedef struct _XnoiseGlobalAccessPrivate XnoiseGlobalAccessPrivate;

#define XNOISE_GLOBAL_ACCESS_TYPE_TRACK_STATE (xnoise_global_access_track_state_get_type ())

#define XNOISE_TYPE_GST_PLAYER (xnoise_gst_player_get_type ())
#define XNOISE_GST_PLAYER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_GST_PLAYER, XnoiseGstPlayer))
#define XNOISE_GST_PLAYER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_GST_PLAYER, XnoiseGstPlayerClass))
#define XNOISE_IS_GST_PLAYER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_GST_PLAYER))
#define XNOISE_IS_GST_PLAYER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_GST_PLAYER))
#define XNOISE_GST_PLAYER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_GST_PLAYER, XnoiseGstPlayerClass))

typedef struct _XnoiseGstPlayer XnoiseGstPlayer;
typedef struct _XnoiseGstPlayerClass XnoiseGstPlayerClass;
typedef struct _XnoiseGstPlayerPrivate XnoiseGstPlayerPrivate;

#define XNOISE_TYPE_VIDEO_SCREEN (xnoise_video_screen_get_type ())
#define XNOISE_VIDEO_SCREEN(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_VIDEO_SCREEN, XnoiseVideoScreen))
#define XNOISE_VIDEO_SCREEN_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_VIDEO_SCREEN, XnoiseVideoScreenClass))
#define XNOISE_IS_VIDEO_SCREEN(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_VIDEO_SCREEN))
#define XNOISE_IS_VIDEO_SCREEN_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_VIDEO_SCREEN))
#define XNOISE_VIDEO_SCREEN_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_VIDEO_SCREEN, XnoiseVideoScreenClass))

typedef struct _XnoiseVideoScreen XnoiseVideoScreen;
typedef struct _XnoiseVideoScreenClass XnoiseVideoScreenClass;

#define XNOISE_TYPE_INFO_BAR (xnoise_info_bar_get_type ())
#define XNOISE_INFO_BAR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_INFO_BAR, XnoiseInfoBar))
#define XNOISE_INFO_BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_INFO_BAR, XnoiseInfoBarClass))
#define XNOISE_IS_INFO_BAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_INFO_BAR))
#define XNOISE_IS_INFO_BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_INFO_BAR))
#define XNOISE_INFO_BAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_INFO_BAR, XnoiseInfoBarClass))

typedef struct _XnoiseInfoBar XnoiseInfoBar;
typedef struct _XnoiseInfoBarClass XnoiseInfoBarClass;
typedef struct _XnoiseInfoBarPrivate XnoiseInfoBarPrivate;

#define XNOISE_TYPE_USER_INFO (xnoise_user_info_get_type ())
#define XNOISE_USER_INFO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_USER_INFO, XnoiseUserInfo))
#define XNOISE_USER_INFO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_USER_INFO, XnoiseUserInfoClass))
#define XNOISE_IS_USER_INFO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_USER_INFO))
#define XNOISE_IS_USER_INFO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_USER_INFO))
#define XNOISE_USER_INFO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_USER_INFO, XnoiseUserInfoClass))

typedef struct _XnoiseUserInfo XnoiseUserInfo;
typedef struct _XnoiseUserInfoClass XnoiseUserInfoClass;

#define XNOISE_USER_INFO_TYPE_CONTENT_CLASS (xnoise_user_info_content_class_get_type ())

#define XNOISE_USER_INFO_TYPE_REMOVAL_TYPE (xnoise_user_info_removal_type_get_type ())

#define XNOISE_TYPE_LYRICS_LOADER (xnoise_lyrics_loader_get_type ())
#define XNOISE_LYRICS_LOADER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_LYRICS_LOADER, XnoiseLyricsLoader))
#define XNOISE_LYRICS_LOADER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_LYRICS_LOADER, XnoiseLyricsLoaderClass))
#define XNOISE_IS_LYRICS_LOADER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_LYRICS_LOADER))
#define XNOISE_IS_LYRICS_LOADER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_LYRICS_LOADER))
#define XNOISE_LYRICS_LOADER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_LYRICS_LOADER, XnoiseLyricsLoaderClass))

typedef struct _XnoiseLyricsLoader XnoiseLyricsLoader;
typedef struct _XnoiseLyricsLoaderClass XnoiseLyricsLoaderClass;
typedef struct _XnoiseLyricsLoaderPrivate XnoiseLyricsLoaderPrivate;

#define XNOISE_TYPE_LYRICS_VIEW (xnoise_lyrics_view_get_type ())
#define XNOISE_LYRICS_VIEW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_LYRICS_VIEW, XnoiseLyricsView))
#define XNOISE_LYRICS_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_LYRICS_VIEW, XnoiseLyricsViewClass))
#define XNOISE_IS_LYRICS_VIEW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_LYRICS_VIEW))
#define XNOISE_IS_LYRICS_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_LYRICS_VIEW))
#define XNOISE_LYRICS_VIEW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_LYRICS_VIEW, XnoiseLyricsViewClass))

typedef struct _XnoiseLyricsView XnoiseLyricsView;
typedef struct _XnoiseLyricsViewClass XnoiseLyricsViewClass;
typedef struct _XnoiseLyricsViewPrivate XnoiseLyricsViewPrivate;
typedef struct _XnoiseMainPrivate XnoiseMainPrivate;

#define XNOISE_TYPE_TRAY_ICON (xnoise_tray_icon_get_type ())
#define XNOISE_TRAY_ICON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_TRAY_ICON, XnoiseTrayIcon))
#define XNOISE_TRAY_ICON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_TRAY_ICON, XnoiseTrayIconClass))
#define XNOISE_IS_TRAY_ICON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_TRAY_ICON))
#define XNOISE_IS_TRAY_ICON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_TRAY_ICON))
#define XNOISE_TRAY_ICON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_TRAY_ICON, XnoiseTrayIconClass))

typedef struct _XnoiseTrayIcon XnoiseTrayIcon;
typedef struct _XnoiseTrayIconClass XnoiseTrayIconClass;

#define XNOISE_TYPE_MAIN_WINDOW (xnoise_main_window_get_type ())
#define XNOISE_MAIN_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_MAIN_WINDOW, XnoiseMainWindow))
#define XNOISE_MAIN_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_MAIN_WINDOW, XnoiseMainWindowClass))
#define XNOISE_IS_MAIN_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_MAIN_WINDOW))
#define XNOISE_IS_MAIN_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_MAIN_WINDOW))
#define XNOISE_MAIN_WINDOW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_MAIN_WINDOW, XnoiseMainWindowClass))

typedef struct _XnoiseMainWindow XnoiseMainWindow;
typedef struct _XnoiseMainWindowClass XnoiseMainWindowClass;

#define XNOISE_TYPE_TRACK_LIST (xnoise_track_list_get_type ())
#define XNOISE_TRACK_LIST(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_TRACK_LIST, XnoiseTrackList))
#define XNOISE_TRACK_LIST_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_TRACK_LIST, XnoiseTrackListClass))
#define XNOISE_IS_TRACK_LIST(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_TRACK_LIST))
#define XNOISE_IS_TRACK_LIST_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_TRACK_LIST))
#define XNOISE_TRACK_LIST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_TRACK_LIST, XnoiseTrackListClass))

typedef struct _XnoiseTrackList XnoiseTrackList;
typedef struct _XnoiseTrackListClass XnoiseTrackListClass;

#define XNOISE_TYPE_TRACK_LIST_MODEL (xnoise_track_list_model_get_type ())
#define XNOISE_TRACK_LIST_MODEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_TRACK_LIST_MODEL, XnoiseTrackListModel))
#define XNOISE_TRACK_LIST_MODEL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_TRACK_LIST_MODEL, XnoiseTrackListModelClass))
#define XNOISE_IS_TRACK_LIST_MODEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_TRACK_LIST_MODEL))
#define XNOISE_IS_TRACK_LIST_MODEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_TRACK_LIST_MODEL))
#define XNOISE_TRACK_LIST_MODEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_TRACK_LIST_MODEL, XnoiseTrackListModelClass))

typedef struct _XnoiseTrackListModel XnoiseTrackListModel;
typedef struct _XnoiseTrackListModelClass XnoiseTrackListModelClass;

#define XNOISE_TYPE_PLUGIN_LOADER (xnoise_plugin_loader_get_type ())
#define XNOISE_PLUGIN_LOADER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_PLUGIN_LOADER, XnoisePluginLoader))
#define XNOISE_PLUGIN_LOADER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_PLUGIN_LOADER, XnoisePluginLoaderClass))
#define XNOISE_IS_PLUGIN_LOADER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_PLUGIN_LOADER))
#define XNOISE_IS_PLUGIN_LOADER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_PLUGIN_LOADER))
#define XNOISE_PLUGIN_LOADER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_PLUGIN_LOADER, XnoisePluginLoaderClass))

typedef struct _XnoisePluginLoader XnoisePluginLoader;
typedef struct _XnoisePluginLoaderClass XnoisePluginLoaderClass;

#define XNOISE_TYPE_IPARAMS (xnoise_iparams_get_type ())
#define XNOISE_IPARAMS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_IPARAMS, XnoiseIParams))
#define XNOISE_IS_IPARAMS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_IPARAMS))
#define XNOISE_IPARAMS_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), XNOISE_TYPE_IPARAMS, XnoiseIParamsIface))

typedef struct _XnoiseIParams XnoiseIParams;
typedef struct _XnoiseIParamsIface XnoiseIParamsIface;
typedef struct _XnoiseMainWindowPrivate XnoiseMainWindowPrivate;

#define XNOISE_TYPE_TRACK_LIST_NOTE_BOOK_TAB (xnoise_track_list_note_book_tab_get_type ())

#define XNOISE_TYPE_PLAY_PAUSE_BUTTON (xnoise_play_pause_button_get_type ())
#define XNOISE_PLAY_PAUSE_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_PLAY_PAUSE_BUTTON, XnoisePlayPauseButton))
#define XNOISE_PLAY_PAUSE_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_PLAY_PAUSE_BUTTON, XnoisePlayPauseButtonClass))
#define XNOISE_IS_PLAY_PAUSE_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_PLAY_PAUSE_BUTTON))
#define XNOISE_IS_PLAY_PAUSE_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_PLAY_PAUSE_BUTTON))
#define XNOISE_PLAY_PAUSE_BUTTON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_PLAY_PAUSE_BUTTON, XnoisePlayPauseButtonClass))

typedef struct _XnoisePlayPauseButton XnoisePlayPauseButton;
typedef struct _XnoisePlayPauseButtonClass XnoisePlayPauseButtonClass;

#define XNOISE_TYPE_TRACK_PROGRESS_BAR (xnoise_track_progress_bar_get_type ())
#define XNOISE_TRACK_PROGRESS_BAR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_TRACK_PROGRESS_BAR, XnoiseTrackProgressBar))
#define XNOISE_TRACK_PROGRESS_BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_TRACK_PROGRESS_BAR, XnoiseTrackProgressBarClass))
#define XNOISE_IS_TRACK_PROGRESS_BAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_TRACK_PROGRESS_BAR))
#define XNOISE_IS_TRACK_PROGRESS_BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_TRACK_PROGRESS_BAR))
#define XNOISE_TRACK_PROGRESS_BAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_TRACK_PROGRESS_BAR, XnoiseTrackProgressBarClass))

typedef struct _XnoiseTrackProgressBar XnoiseTrackProgressBar;
typedef struct _XnoiseTrackProgressBarClass XnoiseTrackProgressBarClass;

#define XNOISE_TYPE_MEDIA_BROWSER (xnoise_media_browser_get_type ())
#define XNOISE_MEDIA_BROWSER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_MEDIA_BROWSER, XnoiseMediaBrowser))
#define XNOISE_MEDIA_BROWSER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_MEDIA_BROWSER, XnoiseMediaBrowserClass))
#define XNOISE_IS_MEDIA_BROWSER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_MEDIA_BROWSER))
#define XNOISE_IS_MEDIA_BROWSER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_MEDIA_BROWSER))
#define XNOISE_MEDIA_BROWSER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_MEDIA_BROWSER, XnoiseMediaBrowserClass))

typedef struct _XnoiseMediaBrowser XnoiseMediaBrowser;
typedef struct _XnoiseMediaBrowserClass XnoiseMediaBrowserClass;
typedef struct _XnoiseMediaBrowserPrivate XnoiseMediaBrowserPrivate;

#define XNOISE_TYPE_MEDIA_BROWSER_MODEL (xnoise_media_browser_model_get_type ())
#define XNOISE_MEDIA_BROWSER_MODEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_MEDIA_BROWSER_MODEL, XnoiseMediaBrowserModel))
#define XNOISE_MEDIA_BROWSER_MODEL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_MEDIA_BROWSER_MODEL, XnoiseMediaBrowserModelClass))
#define XNOISE_IS_MEDIA_BROWSER_MODEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_MEDIA_BROWSER_MODEL))
#define XNOISE_IS_MEDIA_BROWSER_MODEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_MEDIA_BROWSER_MODEL))
#define XNOISE_MEDIA_BROWSER_MODEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_MEDIA_BROWSER_MODEL, XnoiseMediaBrowserModelClass))

typedef struct _XnoiseMediaBrowserModel XnoiseMediaBrowserModel;
typedef struct _XnoiseMediaBrowserModelClass XnoiseMediaBrowserModelClass;
typedef struct _XnoiseMediaBrowserModelPrivate XnoiseMediaBrowserModelPrivate;

#define XNOISE_MEDIA_BROWSER_MODEL_TYPE_COLUMN (xnoise_media_browser_model_column_get_type ())

#define XNOISE_MEDIA_BROWSER_MODEL_TYPE_COLLECTION_TYPE (xnoise_media_browser_model_collection_type_get_type ())

#define XNOISE_TYPE_MEDIA_IMPORTER (xnoise_media_importer_get_type ())
#define XNOISE_MEDIA_IMPORTER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_MEDIA_IMPORTER, XnoiseMediaImporter))
#define XNOISE_MEDIA_IMPORTER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_MEDIA_IMPORTER, XnoiseMediaImporterClass))
#define XNOISE_IS_MEDIA_IMPORTER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_MEDIA_IMPORTER))
#define XNOISE_IS_MEDIA_IMPORTER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_MEDIA_IMPORTER))
#define XNOISE_MEDIA_IMPORTER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_MEDIA_IMPORTER, XnoiseMediaImporterClass))

typedef struct _XnoiseMediaImporter XnoiseMediaImporter;
typedef struct _XnoiseMediaImporterClass XnoiseMediaImporterClass;
typedef struct _XnoiseMediaImporterPrivate XnoiseMediaImporterPrivate;

#define XNOISE_TYPE_PARAMS (xnoise_params_get_type ())
#define XNOISE_PARAMS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_PARAMS, XnoiseParams))
#define XNOISE_PARAMS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_PARAMS, XnoiseParamsClass))
#define XNOISE_IS_PARAMS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_PARAMS))
#define XNOISE_IS_PARAMS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_PARAMS))
#define XNOISE_PARAMS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_PARAMS, XnoiseParamsClass))

typedef struct _XnoiseParams XnoiseParams;
typedef struct _XnoiseParamsClass XnoiseParamsClass;

#define GST_TYPE_STREAM_TYPE (gst_stream_type_get_type ())
typedef struct _XnoiseTrackDataPrivate XnoiseTrackDataPrivate;

#define XNOISE_TYPE_ILYRICS (xnoise_ilyrics_get_type ())
#define XNOISE_ILYRICS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_ILYRICS, XnoiseILyrics))
#define XNOISE_IS_ILYRICS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_ILYRICS))
#define XNOISE_ILYRICS_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), XNOISE_TYPE_ILYRICS, XnoiseILyricsIface))

typedef struct _XnoiseILyrics XnoiseILyrics;
typedef struct _XnoiseILyricsIface XnoiseILyricsIface;

#define XNOISE_TYPE_ILYRICS_PROVIDER (xnoise_ilyrics_provider_get_type ())
#define XNOISE_ILYRICS_PROVIDER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_ILYRICS_PROVIDER, XnoiseILyricsProvider))
#define XNOISE_IS_ILYRICS_PROVIDER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_ILYRICS_PROVIDER))
#define XNOISE_ILYRICS_PROVIDER_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), XNOISE_TYPE_ILYRICS_PROVIDER, XnoiseILyricsProviderIface))

typedef struct _XnoiseILyricsProvider XnoiseILyricsProvider;
typedef struct _XnoiseILyricsProviderIface XnoiseILyricsProviderIface;

#define XNOISE_TYPE_IALBUM_COVER_IMAGE (xnoise_ialbum_cover_image_get_type ())
#define XNOISE_IALBUM_COVER_IMAGE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_IALBUM_COVER_IMAGE, XnoiseIAlbumCoverImage))
#define XNOISE_IS_IALBUM_COVER_IMAGE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_IALBUM_COVER_IMAGE))
#define XNOISE_IALBUM_COVER_IMAGE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), XNOISE_TYPE_IALBUM_COVER_IMAGE, XnoiseIAlbumCoverImageIface))

typedef struct _XnoiseIAlbumCoverImage XnoiseIAlbumCoverImage;
typedef struct _XnoiseIAlbumCoverImageIface XnoiseIAlbumCoverImageIface;

#define XNOISE_TYPE_IALBUM_COVER_IMAGE_PROVIDER (xnoise_ialbum_cover_image_provider_get_type ())
#define XNOISE_IALBUM_COVER_IMAGE_PROVIDER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_IALBUM_COVER_IMAGE_PROVIDER, XnoiseIAlbumCoverImageProvider))
#define XNOISE_IS_IALBUM_COVER_IMAGE_PROVIDER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_IALBUM_COVER_IMAGE_PROVIDER))
#define XNOISE_IALBUM_COVER_IMAGE_PROVIDER_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), XNOISE_TYPE_IALBUM_COVER_IMAGE_PROVIDER, XnoiseIAlbumCoverImageProviderIface))

typedef struct _XnoiseIAlbumCoverImageProvider XnoiseIAlbumCoverImageProvider;
typedef struct _XnoiseIAlbumCoverImageProviderIface XnoiseIAlbumCoverImageProviderIface;
typedef struct _XnoiseParamsPrivate XnoiseParamsPrivate;
typedef struct _XnoisePlayPauseButtonPrivate XnoisePlayPauseButtonPrivate;

#define XNOISE_TYPE_PLUGIN (xnoise_plugin_get_type ())
#define XNOISE_PLUGIN(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_PLUGIN, XnoisePlugin))
#define XNOISE_PLUGIN_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_PLUGIN, XnoisePluginClass))
#define XNOISE_IS_PLUGIN(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_PLUGIN))
#define XNOISE_IS_PLUGIN_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_PLUGIN))
#define XNOISE_PLUGIN_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_PLUGIN, XnoisePluginClass))

typedef struct _XnoisePlugin XnoisePlugin;
typedef struct _XnoisePluginClass XnoisePluginClass;
typedef struct _XnoisePluginPrivate XnoisePluginPrivate;

#define XNOISE_TYPE_PLUGIN_INFORMATION (xnoise_plugin_information_get_type ())
#define XNOISE_PLUGIN_INFORMATION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_PLUGIN_INFORMATION, XnoisePluginInformation))
#define XNOISE_PLUGIN_INFORMATION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_PLUGIN_INFORMATION, XnoisePluginInformationClass))
#define XNOISE_IS_PLUGIN_INFORMATION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_PLUGIN_INFORMATION))
#define XNOISE_IS_PLUGIN_INFORMATION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_PLUGIN_INFORMATION))
#define XNOISE_PLUGIN_INFORMATION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_PLUGIN_INFORMATION, XnoisePluginInformationClass))

typedef struct _XnoisePluginInformation XnoisePluginInformation;
typedef struct _XnoisePluginInformationClass XnoisePluginInformationClass;
typedef struct _XnoisePluginLoaderPrivate XnoisePluginLoaderPrivate;
typedef struct _XnoisePluginInformationPrivate XnoisePluginInformationPrivate;

#define XNOISE_TYPE_IPLUGIN (xnoise_iplugin_get_type ())
#define XNOISE_IPLUGIN(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_IPLUGIN, XnoiseIPlugin))
#define XNOISE_IS_IPLUGIN(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_IPLUGIN))
#define XNOISE_IPLUGIN_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), XNOISE_TYPE_IPLUGIN, XnoiseIPluginIface))

typedef struct _XnoiseIPlugin XnoiseIPlugin;
typedef struct _XnoiseIPluginIface XnoiseIPluginIface;

#define XNOISE_TYPE_PLUGIN_MANAGER_TREE (xnoise_plugin_manager_tree_get_type ())
#define XNOISE_PLUGIN_MANAGER_TREE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_PLUGIN_MANAGER_TREE, XnoisePluginManagerTree))
#define XNOISE_PLUGIN_MANAGER_TREE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_PLUGIN_MANAGER_TREE, XnoisePluginManagerTreeClass))
#define XNOISE_IS_PLUGIN_MANAGER_TREE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_PLUGIN_MANAGER_TREE))
#define XNOISE_IS_PLUGIN_MANAGER_TREE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_PLUGIN_MANAGER_TREE))
#define XNOISE_PLUGIN_MANAGER_TREE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_PLUGIN_MANAGER_TREE, XnoisePluginManagerTreeClass))

typedef struct _XnoisePluginManagerTree XnoisePluginManagerTree;
typedef struct _XnoisePluginManagerTreeClass XnoisePluginManagerTreeClass;
typedef struct _XnoisePluginManagerTreePrivate XnoisePluginManagerTreePrivate;

#define XNOISE_TYPE_SETTINGS_DIALOG (xnoise_settings_dialog_get_type ())
#define XNOISE_SETTINGS_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_SETTINGS_DIALOG, XnoiseSettingsDialog))
#define XNOISE_SETTINGS_DIALOG_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_SETTINGS_DIALOG, XnoiseSettingsDialogClass))
#define XNOISE_IS_SETTINGS_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_SETTINGS_DIALOG))
#define XNOISE_IS_SETTINGS_DIALOG_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_SETTINGS_DIALOG))
#define XNOISE_SETTINGS_DIALOG_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_SETTINGS_DIALOG, XnoiseSettingsDialogClass))

typedef struct _XnoiseSettingsDialog XnoiseSettingsDialog;
typedef struct _XnoiseSettingsDialogClass XnoiseSettingsDialogClass;
typedef struct _XnoiseSettingsDialogPrivate XnoiseSettingsDialogPrivate;

#define XNOISE_TYPE_TAG_READER (xnoise_tag_reader_get_type ())
#define XNOISE_TAG_READER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_TAG_READER, XnoiseTagReader))
#define XNOISE_TAG_READER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_TAG_READER, XnoiseTagReaderClass))
#define XNOISE_IS_TAG_READER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_TAG_READER))
#define XNOISE_IS_TAG_READER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_TAG_READER))
#define XNOISE_TAG_READER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_TAG_READER, XnoiseTagReaderClass))

typedef struct _XnoiseTagReader XnoiseTagReader;
typedef struct _XnoiseTagReaderClass XnoiseTagReaderClass;
typedef struct _XnoiseTagReaderPrivate XnoiseTagReaderPrivate;

#define XNOISE_TYPE_TEXT_COLUMN (xnoise_text_column_get_type ())
#define XNOISE_TEXT_COLUMN(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_TEXT_COLUMN, XnoiseTextColumn))
#define XNOISE_TEXT_COLUMN_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_TEXT_COLUMN, XnoiseTextColumnClass))
#define XNOISE_IS_TEXT_COLUMN(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_TEXT_COLUMN))
#define XNOISE_IS_TEXT_COLUMN_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_TEXT_COLUMN))
#define XNOISE_TEXT_COLUMN_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_TEXT_COLUMN, XnoiseTextColumnClass))

typedef struct _XnoiseTextColumn XnoiseTextColumn;
typedef struct _XnoiseTextColumnClass XnoiseTextColumnClass;
typedef struct _XnoiseTextColumnPrivate XnoiseTextColumnPrivate;

#define XNOISE_TRACK_LIST_MODEL_TYPE_COLUMN (xnoise_track_list_model_column_get_type ())
typedef struct _XnoiseTrackListPrivate XnoiseTrackListPrivate;
typedef struct _XnoiseTrackListModelPrivate XnoiseTrackListModelPrivate;
typedef struct _XnoiseTrackProgressBarPrivate XnoiseTrackProgressBarPrivate;
typedef struct _XnoiseTrayIconPrivate XnoiseTrayIconPrivate;
typedef struct _XnoiseUserInfoPrivate XnoiseUserInfoPrivate;
typedef struct _XnoiseVideoScreenPrivate XnoiseVideoScreenPrivate;

#define XNOISE_TYPE_VOLUME_SLIDER_BUTTON (xnoise_volume_slider_button_get_type ())
#define XNOISE_VOLUME_SLIDER_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_VOLUME_SLIDER_BUTTON, XnoiseVolumeSliderButton))
#define XNOISE_VOLUME_SLIDER_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_VOLUME_SLIDER_BUTTON, XnoiseVolumeSliderButtonClass))
#define XNOISE_IS_VOLUME_SLIDER_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_VOLUME_SLIDER_BUTTON))
#define XNOISE_IS_VOLUME_SLIDER_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_VOLUME_SLIDER_BUTTON))
#define XNOISE_VOLUME_SLIDER_BUTTON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_VOLUME_SLIDER_BUTTON, XnoiseVolumeSliderButtonClass))

typedef struct _XnoiseVolumeSliderButton XnoiseVolumeSliderButton;
typedef struct _XnoiseVolumeSliderButtonClass XnoiseVolumeSliderButtonClass;
typedef struct _XnoiseVolumeSliderButtonPrivate XnoiseVolumeSliderButtonPrivate;

struct _XnoiseAboutDialog {
	GtkAboutDialog parent_instance;
	XnoiseAboutDialogPrivate * priv;
};

struct _XnoiseAboutDialogClass {
	GtkAboutDialogClass parent_class;
};

struct _XnoiseAddMediaDialog {
	GObject parent_instance;
	XnoiseAddMediaDialogPrivate * priv;
	GtkBuilder* builder;
};

struct _XnoiseAddMediaDialogClass {
	GObjectClass parent_class;
};

struct _XnoiseAlbumImage {
	GtkImage parent_instance;
	XnoiseAlbumImagePrivate * priv;
};

struct _XnoiseAlbumImageClass {
	GtkImageClass parent_class;
};

struct _XnoiseAlbumImageLoader {
	GObject parent_instance;
	XnoiseAlbumImageLoaderPrivate * priv;
	char* artist;
	char* album;
};

struct _XnoiseAlbumImageLoaderClass {
	GObjectClass parent_class;
};

struct _XnoiseAppStarter {
	GTypeInstance parent_instance;
	volatile int ref_count;
	XnoiseAppStarterPrivate * priv;
};

struct _XnoiseAppStarterClass {
	GTypeClass parent_class;
	void (*finalize) (XnoiseAppStarter *self);
};

struct _XnoiseControlButton {
	GtkButton parent_instance;
	XnoiseControlButtonPrivate * priv;
};

struct _XnoiseControlButtonClass {
	GtkButtonClass parent_class;
};

typedef enum  {
	XNOISE_CONTROL_BUTTON_DIRECTION_NEXT = 0,
	XNOISE_CONTROL_BUTTON_DIRECTION_PREVIOUS,
	XNOISE_CONTROL_BUTTON_DIRECTION_STOP
} XnoiseControlButtonDirection;

typedef enum  {
	XNOISE_DB_ERROR_FAILED
} XnoiseDbError;
#define XNOISE_DB_ERROR xnoise_db_error_quark ()
struct _XnoiseDbBrowser {
	GTypeInstance parent_instance;
	volatile int ref_count;
	XnoiseDbBrowserPrivate * priv;
};

struct _XnoiseDbBrowserClass {
	GTypeClass parent_class;
	void (*finalize) (XnoiseDbBrowser *self);
};

struct _XnoiseStreamData {
	char* Name;
	char* Uri;
};

typedef enum  {
	XNOISE_MEDIA_TYPE_UNKNOWN = 0,
	XNOISE_MEDIA_TYPE_AUDIO,
	XNOISE_MEDIA_TYPE_VIDEO,
	XNOISE_MEDIA_TYPE_STREAM,
	XNOISE_MEDIA_TYPE_PLAYLISTFILE
} XnoiseMediaType;

struct _XnoiseMediaData {
	char* name;
	gint id;
	XnoiseMediaType mediatype;
};

struct _XnoiseDbCreator {
	GObject parent_instance;
	XnoiseDbCreatorPrivate * priv;
};

struct _XnoiseDbCreatorClass {
	GObjectClass parent_class;
};

struct _XnoiseDbWriter {
	GObject parent_instance;
	XnoiseDbWriterPrivate * priv;
};

struct _XnoiseDbWriterClass {
	GObjectClass parent_class;
};

struct _XnoiseFullscreenToolbar {
	GTypeInstance parent_instance;
	volatile int ref_count;
	XnoiseFullscreenToolbarPrivate * priv;
};

struct _XnoiseFullscreenToolbarClass {
	GTypeClass parent_class;
	void (*finalize) (XnoiseFullscreenToolbar *self);
};

struct _XnoiseFullscreenToolbarLeaveVideoFSButton {
	GtkButton parent_instance;
	XnoiseFullscreenToolbarLeaveVideoFSButtonPrivate * priv;
};

struct _XnoiseFullscreenToolbarLeaveVideoFSButtonClass {
	GtkButtonClass parent_class;
};

struct _XnoiseGlobalAccess {
	GObject parent_instance;
	XnoiseGlobalAccessPrivate * priv;
	gboolean _media_import_in_progress;
};

struct _XnoiseGlobalAccessClass {
	GObjectClass parent_class;
};

typedef enum  {
	XNOISE_GLOBAL_ACCESS_TRACK_STATE_STOPPED = 0,
	XNOISE_GLOBAL_ACCESS_TRACK_STATE_PLAYING,
	XNOISE_GLOBAL_ACCESS_TRACK_STATE_PAUSED
} XnoiseGlobalAccessTrackState;

struct _XnoiseGstPlayer {
	GObject parent_instance;
	XnoiseGstPlayerPrivate * priv;
	XnoiseVideoScreen* videoscreen;
};

struct _XnoiseGstPlayerClass {
	GObjectClass parent_class;
};

struct _XnoiseInfoBar {
	GtkInfoBar parent_instance;
	XnoiseInfoBarPrivate * priv;
};

struct _XnoiseInfoBarClass {
	GtkInfoBarClass parent_class;
};

typedef enum  {
	XNOISE_USER_INFO_CONTENT_CLASS_INFO = 0,
	XNOISE_USER_INFO_CONTENT_CLASS_WAIT,
	XNOISE_USER_INFO_CONTENT_CLASS_WARNING,
	XNOISE_USER_INFO_CONTENT_CLASS_QUESTION,
	XNOISE_USER_INFO_CONTENT_CLASS_CRITICAL
} XnoiseUserInfoContentClass;

typedef enum  {
	XNOISE_USER_INFO_REMOVAL_TYPE_CLOSE_BUTTON = 0,
	XNOISE_USER_INFO_REMOVAL_TYPE_TIMER,
	XNOISE_USER_INFO_REMOVAL_TYPE_EXTERNAL
} XnoiseUserInfoRemovalType;

struct _XnoiseLyricsLoader {
	GObject parent_instance;
	XnoiseLyricsLoaderPrivate * priv;
	char* artist;
	char* title;
};

struct _XnoiseLyricsLoaderClass {
	GObjectClass parent_class;
};

struct _XnoiseLyricsView {
	GtkTextView parent_instance;
	XnoiseLyricsViewPrivate * priv;
};

struct _XnoiseLyricsViewClass {
	GtkTextViewClass parent_class;
};

struct _XnoiseMain {
	GObject parent_instance;
	XnoiseMainPrivate * priv;
	XnoiseTrayIcon* tray_icon;
	XnoiseMainWindow* main_window;
	XnoiseTrackList* tl;
	XnoiseTrackListModel* tlm;
	XnoisePluginLoader* plugin_loader;
	XnoiseGstPlayer* gPl;
};

struct _XnoiseMainClass {
	GObjectClass parent_class;
};

struct _XnoiseIParamsIface {
	GTypeInterface parent_iface;
	void (*read_params_data) (XnoiseIParams* self);
	void (*write_params_data) (XnoiseIParams* self);
};

typedef enum  {
	XNOISE_TRACK_LIST_NOTE_BOOK_TAB_TRACKLIST = 0,
	XNOISE_TRACK_LIST_NOTE_BOOK_TAB_VIDEO,
	XNOISE_TRACK_LIST_NOTE_BOOK_TAB_LYRICS
} XnoiseTrackListNoteBookTab;

struct _XnoiseMainWindow {
	GtkWindow parent_instance;
	XnoiseMainWindowPrivate * priv;
	GtkActionGroup* action_group;
	GtkScrolledWindow* mediaBrScrollWin;
	GtkScrolledWindow* trackListScrollWin;
	gboolean _seek;
	gboolean is_fullscreen;
	gboolean drag_on_content_area;
	XnoiseTrackListNoteBookTab temporary_tab;
	XnoiseFullscreenToolbar* fullscreentoolbar;
	GtkVBox* videovbox;
	XnoiseLyricsView* lyricsView;
	XnoiseVideoScreen* videoscreen;
	GtkHPaned* hpaned;
	GtkEntry* searchEntryMB;
	XnoisePlayPauseButton* playPauseButton;
	XnoiseControlButton* previousButton;
	XnoiseControlButton* nextButton;
	XnoiseControlButton* stopButton;
	GtkNotebook* browsernotebook;
	GtkNotebook* tracklistnotebook;
	XnoiseAlbumImage* albumimage;
	XnoiseTrackProgressBar* songProgressBar;
	XnoiseMediaBrowser* mediaBr;
	XnoiseTrackList* trackList;
	GtkWindow* fullscreenwindow;
	GtkButton* config_button;
};

struct _XnoiseMainWindowClass {
	GtkWindowClass parent_class;
};

struct _XnoiseMediaBrowser {
	GtkTreeView parent_instance;
	XnoiseMediaBrowserPrivate * priv;
	XnoiseMediaBrowserModel* mediabrowsermodel;
};

struct _XnoiseMediaBrowserClass {
	GtkTreeViewClass parent_class;
};

struct _XnoiseMediaBrowserModel {
	GtkTreeStore parent_instance;
	XnoiseMediaBrowserModelPrivate * priv;
	char* searchtext;
};

struct _XnoiseMediaBrowserModelClass {
	GtkTreeStoreClass parent_class;
};

typedef enum  {
	XNOISE_MEDIA_BROWSER_MODEL_COLUMN_ICON = 0,
	XNOISE_MEDIA_BROWSER_MODEL_COLUMN_VIS_TEXT,
	XNOISE_MEDIA_BROWSER_MODEL_COLUMN_DB_ID,
	XNOISE_MEDIA_BROWSER_MODEL_COLUMN_MEDIATYPE,
	XNOISE_MEDIA_BROWSER_MODEL_COLUMN_COLL_TYPE,
	XNOISE_MEDIA_BROWSER_MODEL_COLUMN_DRAW_SEPTR,
	XNOISE_MEDIA_BROWSER_MODEL_COLUMN_N_COLUMNS
} XnoiseMediaBrowserModelColumn;

typedef enum  {
	XNOISE_MEDIA_BROWSER_MODEL_COLLECTION_TYPE_UNKNOWN = 0,
	XNOISE_MEDIA_BROWSER_MODEL_COLLECTION_TYPE_HIERARCHICAL = 1,
	XNOISE_MEDIA_BROWSER_MODEL_COLLECTION_TYPE_LISTED = 2
} XnoiseMediaBrowserModelCollectionType;

struct _XnoiseMediaImporter {
	GObject parent_instance;
	XnoiseMediaImporterPrivate * priv;
};

struct _XnoiseMediaImporterClass {
	GObjectClass parent_class;
};

typedef enum  {
	GST_STREAM_TYPE_UNKNOWN = 0,
	GST_STREAM_TYPE_AUDIO = 1,
	GST_STREAM_TYPE_VIDEO = 2
} GstStreamType;

struct _XnoiseTrackData {
	GTypeInstance parent_instance;
	volatile int ref_count;
	XnoiseTrackDataPrivate * priv;
	char* Artist;
	char* Album;
	char* Title;
	char* Genre;
	guint Year;
	guint Tracknumber;
	gint32 Length;
	gint Bitrate;
	XnoiseMediaType Mediatype;
	char* Uri;
};

struct _XnoiseTrackDataClass {
	GTypeClass parent_class;
	void (*finalize) (XnoiseTrackData *self);
};

struct _XnoiseILyricsIface {
	GTypeInterface parent_iface;
	void (*find_lyrics) (XnoiseILyrics* self);
	char* (*get_identifier) (XnoiseILyrics* self);
	char* (*get_credits) (XnoiseILyrics* self);
};

struct _XnoiseILyricsProviderIface {
	GTypeInterface parent_iface;
	XnoiseILyrics* (*from_tags) (XnoiseILyricsProvider* self, const char* artist, const char* title);
};

struct _XnoiseIAlbumCoverImageIface {
	GTypeInterface parent_iface;
	void (*find_image) (XnoiseIAlbumCoverImage* self);
};

struct _XnoiseIAlbumCoverImageProviderIface {
	GTypeInterface parent_iface;
	XnoiseIAlbumCoverImage* (*from_tags) (XnoiseIAlbumCoverImageProvider* self, const char* artist, const char* album);
};

struct _XnoiseParams {
	GObject parent_instance;
	XnoiseParamsPrivate * priv;
};

struct _XnoiseParamsClass {
	GObjectClass parent_class;
};

struct _XnoisePlayPauseButton {
	GtkButton parent_instance;
	XnoisePlayPauseButtonPrivate * priv;
};

struct _XnoisePlayPauseButtonClass {
	GtkButtonClass parent_class;
};

struct _XnoisePlugin {
	GTypeModule parent_instance;
	XnoisePluginPrivate * priv;
	GObject* loaded_plugin;
};

struct _XnoisePluginClass {
	GTypeModuleClass parent_class;
};

struct _XnoisePluginLoader {
	GObject parent_instance;
	XnoisePluginLoaderPrivate * priv;
	GHashTable* plugin_htable;
	GHashTable* lyrics_plugins_htable;
	GHashTable* image_provider_htable;
	GHashTable* lyrics_plugins_priority;
	GHashTable* image_provider_priority;
};

struct _XnoisePluginLoaderClass {
	GObjectClass parent_class;
};

struct _XnoisePluginInformation {
	GObject parent_instance;
	XnoisePluginInformationPrivate * priv;
};

struct _XnoisePluginInformationClass {
	GObjectClass parent_class;
};

struct _XnoiseIPluginIface {
	GTypeInterface parent_iface;
	gboolean (*init) (XnoiseIPlugin* self);
	gboolean (*has_settings_widget) (XnoiseIPlugin* self);
	gboolean (*has_singleline_settings_widget) (XnoiseIPlugin* self);
	GtkWidget* (*get_settings_widget) (XnoiseIPlugin* self);
	GtkWidget* (*get_singleline_settings_widget) (XnoiseIPlugin* self);
	const char* (*get_name) (XnoiseIPlugin* self);
	XnoiseMain* (*get_xn) (XnoiseIPlugin* self);
	void (*set_xn) (XnoiseIPlugin* self, XnoiseMain* value);
};

struct _XnoisePluginManagerTree {
	GtkTreeView parent_instance;
	XnoisePluginManagerTreePrivate * priv;
};

struct _XnoisePluginManagerTreeClass {
	GtkTreeViewClass parent_class;
};

typedef enum  {
	XNOISE_SETTINGS_DIALOG_ERROR_FILE_NOT_FOUND,
	XNOISE_SETTINGS_DIALOG_ERROR_GENERAL_ERROR
} XnoiseSettingsDialogError;
#define XNOISE_SETTINGS_DIALOG_ERROR xnoise_settings_dialog_error_quark ()
struct _XnoiseSettingsDialog {
	GtkBuilder parent_instance;
	XnoiseSettingsDialogPrivate * priv;
	GtkDialog* dialog;
};

struct _XnoiseSettingsDialogClass {
	GtkBuilderClass parent_class;
};

struct _XnoiseTagReader {
	GTypeInstance parent_instance;
	volatile int ref_count;
	XnoiseTagReaderPrivate * priv;
};

struct _XnoiseTagReaderClass {
	GTypeClass parent_class;
	void (*finalize) (XnoiseTagReader *self);
};

struct _XnoiseTextColumn {
	GtkTreeViewColumn parent_instance;
	XnoiseTextColumnPrivate * priv;
};

struct _XnoiseTextColumnClass {
	GtkTreeViewColumnClass parent_class;
};

typedef enum  {
	XNOISE_TRACK_LIST_MODEL_COLUMN_ICON = 0,
	XNOISE_TRACK_LIST_MODEL_COLUMN_TRACKNUMBER,
	XNOISE_TRACK_LIST_MODEL_COLUMN_TITLE,
	XNOISE_TRACK_LIST_MODEL_COLUMN_ALBUM,
	XNOISE_TRACK_LIST_MODEL_COLUMN_ARTIST,
	XNOISE_TRACK_LIST_MODEL_COLUMN_LENGTH,
	XNOISE_TRACK_LIST_MODEL_COLUMN_WEIGHT,
	XNOISE_TRACK_LIST_MODEL_COLUMN_URI
} XnoiseTrackListModelColumn;

struct _XnoiseTrackList {
	GtkTreeView parent_instance;
	XnoiseTrackListPrivate * priv;
	XnoiseTrackListModel* tracklistmodel;
};

struct _XnoiseTrackListClass {
	GtkTreeViewClass parent_class;
};

struct _XnoiseTrackListModel {
	GtkListStore parent_instance;
	XnoiseTrackListModelPrivate * priv;
};

struct _XnoiseTrackListModelClass {
	GtkListStoreClass parent_class;
};

struct _XnoiseTrackProgressBar {
	GtkProgressBar parent_instance;
	XnoiseTrackProgressBarPrivate * priv;
};

struct _XnoiseTrackProgressBarClass {
	GtkProgressBarClass parent_class;
};

struct _XnoiseTrayIcon {
	GtkStatusIcon parent_instance;
	XnoiseTrayIconPrivate * priv;
};

struct _XnoiseTrayIconClass {
	GtkStatusIconClass parent_class;
};

struct _XnoiseUserInfo {
	GObject parent_instance;
	XnoiseUserInfoPrivate * priv;
};

struct _XnoiseUserInfoClass {
	GObjectClass parent_class;
};

typedef void (*XnoiseUserInfoAddInfoBarDelegateType) (XnoiseInfoBar* ibar, void* user_data);
struct _XnoiseVideoScreen {
	GtkDrawingArea parent_instance;
	XnoiseVideoScreenPrivate * priv;
};

struct _XnoiseVideoScreenClass {
	GtkDrawingAreaClass parent_class;
};

struct _XnoiseVolumeSliderButton {
	GtkVolumeButton parent_instance;
	XnoiseVolumeSliderButtonPrivate * priv;
};

struct _XnoiseVolumeSliderButtonClass {
	GtkVolumeButtonClass parent_class;
};


GType xnoise_about_dialog_get_type (void) G_GNUC_CONST;
XnoiseAboutDialog* xnoise_about_dialog_new (void);
XnoiseAboutDialog* xnoise_about_dialog_construct (GType object_type);
GType xnoise_add_media_dialog_get_type (void) G_GNUC_CONST;
XnoiseAddMediaDialog* xnoise_add_media_dialog_new (void);
XnoiseAddMediaDialog* xnoise_add_media_dialog_construct (GType object_type);
GType xnoise_album_image_get_type (void) G_GNUC_CONST;
XnoiseAlbumImage* xnoise_album_image_new (void);
XnoiseAlbumImage* xnoise_album_image_construct (GType object_type);
void xnoise_album_image_load_default_image (XnoiseAlbumImage* self);
GType xnoise_album_image_loader_get_type (void) G_GNUC_CONST;
XnoiseAlbumImageLoader* xnoise_album_image_loader_new (void);
XnoiseAlbumImageLoader* xnoise_album_image_loader_construct (GType object_type);
gboolean xnoise_album_image_loader_fetch_image (XnoiseAlbumImageLoader* self);
gpointer xnoise_app_starter_ref (gpointer instance);
void xnoise_app_starter_unref (gpointer instance);
GParamSpec* xnoise_param_spec_app_starter (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void xnoise_value_set_app_starter (GValue* value, gpointer v_object);
void xnoise_value_take_app_starter (GValue* value, gpointer v_object);
gpointer xnoise_value_get_app_starter (const GValue* value);
GType xnoise_app_starter_get_type (void) G_GNUC_CONST;
GType xnoise_main_get_type (void) G_GNUC_CONST;
extern XnoiseMain* xnoise_app_starter_xn;
UniqueResponse xnoise_app_starter_on_message_received (UniqueApp* sender, gint command, UniqueMessageData* message_data, guint time);
gint xnoise_app_starter_main (char** args, int args_length1);
XnoiseAppStarter* xnoise_app_starter_new (void);
XnoiseAppStarter* xnoise_app_starter_construct (GType object_type);
GType xnoise_control_button_get_type (void) G_GNUC_CONST;
GType xnoise_control_button_direction_get_type (void) G_GNUC_CONST;
XnoiseControlButton* xnoise_control_button_new (XnoiseControlButtonDirection _direction);
XnoiseControlButton* xnoise_control_button_construct (GType object_type, XnoiseControlButtonDirection _direction);
GQuark xnoise_db_error_quark (void);
gpointer xnoise_db_browser_ref (gpointer instance);
void xnoise_db_browser_unref (gpointer instance);
GParamSpec* xnoise_param_spec_db_browser (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void xnoise_value_set_db_browser (GValue* value, gpointer v_object);
void xnoise_value_take_db_browser (GValue* value, gpointer v_object);
gpointer xnoise_value_get_db_browser (const GValue* value);
GType xnoise_db_browser_get_type (void) G_GNUC_CONST;
XnoiseDbBrowser* xnoise_db_browser_new (GError** error);
XnoiseDbBrowser* xnoise_db_browser_construct (GType object_type, GError** error);
gboolean xnoise_db_browser_videos_available (XnoiseDbBrowser* self);
gboolean xnoise_db_browser_streams_available (XnoiseDbBrowser* self);
gboolean xnoise_db_browser_stream_in_db (XnoiseDbBrowser* self, const char* uri);
gboolean xnoise_db_browser_track_in_db (XnoiseDbBrowser* self, const char* uri);
gboolean xnoise_db_browser_get_uri_for_id (XnoiseDbBrowser* self, gint id, char** val);
gpointer xnoise_track_data_ref (gpointer instance);
void xnoise_track_data_unref (gpointer instance);
GParamSpec* xnoise_param_spec_track_data (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void xnoise_value_set_track_data (GValue* value, gpointer v_object);
void xnoise_value_take_track_data (GValue* value, gpointer v_object);
gpointer xnoise_value_get_track_data (const GValue* value);
GType xnoise_track_data_get_type (void) G_GNUC_CONST;
gboolean xnoise_db_browser_get_trackdata_for_id (XnoiseDbBrowser* self, gint id, XnoiseTrackData** val);
gboolean xnoise_db_browser_get_stream_td_for_id (XnoiseDbBrowser* self, gint id, XnoiseTrackData** val);
gboolean xnoise_db_browser_get_stream_for_id (XnoiseDbBrowser* self, gint id, char** uri);
char* xnoise_db_browser_get_local_image_path_for_track (XnoiseDbBrowser* self, char** uri);
gboolean xnoise_db_browser_get_trackdata_for_stream (XnoiseDbBrowser* self, const char* uri, XnoiseTrackData** val);
gboolean xnoise_db_browser_get_trackdata_for_uri (XnoiseDbBrowser* self, const char* uri, XnoiseTrackData** val);
char** xnoise_db_browser_get_media_files (XnoiseDbBrowser* self, int* result_length1);
char** xnoise_db_browser_get_media_folders (XnoiseDbBrowser* self, int* result_length1);
GType xnoise_stream_data_get_type (void) G_GNUC_CONST;
XnoiseStreamData* xnoise_stream_data_dup (const XnoiseStreamData* self);
void xnoise_stream_data_free (XnoiseStreamData* self);
void xnoise_stream_data_copy (const XnoiseStreamData* self, XnoiseStreamData* dest);
void xnoise_stream_data_destroy (XnoiseStreamData* self);
XnoiseStreamData* xnoise_db_browser_get_streams (XnoiseDbBrowser* self, int* result_length1);
char* xnoise_db_browser_get_single_stream_uri (XnoiseDbBrowser* self, const char* name);
gint xnoise_db_browser_get_track_id_for_path (XnoiseDbBrowser* self, const char* uri);
char** xnoise_db_browser_get_lastused_uris (XnoiseDbBrowser* self, int* result_length1);
char** xnoise_db_browser_get_uris (XnoiseDbBrowser* self, const char* search_string, int* result_length1);
GType xnoise_media_data_get_type (void) G_GNUC_CONST;
GType xnoise_media_type_get_type (void) G_GNUC_CONST;
XnoiseMediaData* xnoise_media_data_dup (const XnoiseMediaData* self);
void xnoise_media_data_free (XnoiseMediaData* self);
void xnoise_media_data_copy (const XnoiseMediaData* self, XnoiseMediaData* dest);
void xnoise_media_data_destroy (XnoiseMediaData* self);
XnoiseMediaData* xnoise_db_browser_get_video_data (XnoiseDbBrowser* self, char** searchtext, int* result_length1);
XnoiseMediaData* xnoise_db_browser_get_stream_data (XnoiseDbBrowser* self, char** searchtext, int* result_length1);
char** xnoise_db_browser_get_videos (XnoiseDbBrowser* self, char** searchtext, int* result_length1);
char** xnoise_db_browser_get_artists (XnoiseDbBrowser* self, char** searchtext, int* result_length1);
char** xnoise_db_browser_get_albums (XnoiseDbBrowser* self, const char* artist, char** searchtext, int* result_length1);
XnoiseMediaData* xnoise_db_browser_get_titles_with_mediatypes_and_ids (XnoiseDbBrowser* self, const char* artist, const char* album, char** searchtext, int* result_length1);
GType xnoise_db_creator_get_type (void) G_GNUC_CONST;
#define XNOISE_DB_CREATOR_DB_VERSION_MAJOR 3
#define XNOISE_DB_CREATOR_DB_VERSION_MINOR 1
XnoiseDbCreator* xnoise_db_creator_new (GError** error);
XnoiseDbCreator* xnoise_db_creator_construct (GType object_type, GError** error);
GType xnoise_db_writer_get_type (void) G_GNUC_CONST;
XnoiseDbWriter* xnoise_db_writer_new (GError** error);
XnoiseDbWriter* xnoise_db_writer_construct (GType object_type, GError** error);
gboolean xnoise_db_writer_set_local_image_for_album (XnoiseDbWriter* self, char** artist, char** album, const char* image_path);
void xnoise_db_writer_insert_title (XnoiseDbWriter* self, XnoiseTrackData* td, const char* uri);
void xnoise_db_writer_delete_uri (XnoiseDbWriter* self, const char* uri);
gint xnoise_db_writer_uri_entry_exists (XnoiseDbWriter* self, const char* uri);
void xnoise_db_writer_add_single_stream_to_collection (XnoiseDbWriter* self, const char* uri, const char* name);
void xnoise_db_writer_add_single_file_to_collection (XnoiseDbWriter* self, const char* uri);
void xnoise_db_writer_add_single_folder_to_collection (XnoiseDbWriter* self, const char* mfolder);
void xnoise_db_writer_write_final_tracks_to_db (XnoiseDbWriter* self, char** final_tracklist, int final_tracklist_length1, GError** error);
void xnoise_db_writer_del_all_folders (XnoiseDbWriter* self);
void xnoise_db_writer_del_all_files (XnoiseDbWriter* self);
void xnoise_db_writer_del_all_streams (XnoiseDbWriter* self);
gboolean xnoise_db_writer_delete_local_media_data (XnoiseDbWriter* self);
void xnoise_db_writer_begin_transaction (XnoiseDbWriter* self);
void xnoise_db_writer_commit_transaction (XnoiseDbWriter* self);
gpointer xnoise_fullscreen_toolbar_ref (gpointer instance);
void xnoise_fullscreen_toolbar_unref (gpointer instance);
GParamSpec* xnoise_param_spec_fullscreen_toolbar (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void xnoise_value_set_fullscreen_toolbar (GValue* value, gpointer v_object);
void xnoise_value_take_fullscreen_toolbar (GValue* value, gpointer v_object);
gpointer xnoise_value_get_fullscreen_toolbar (const GValue* value);
GType xnoise_fullscreen_toolbar_get_type (void) G_GNUC_CONST;
XnoiseFullscreenToolbar* xnoise_fullscreen_toolbar_new (GtkWindow* fullscreenwindow);
XnoiseFullscreenToolbar* xnoise_fullscreen_toolbar_construct (GType object_type, GtkWindow* fullscreenwindow);
void xnoise_fullscreen_toolbar_resize (XnoiseFullscreenToolbar* self);
void xnoise_fullscreen_toolbar_launch_hide_timer (XnoiseFullscreenToolbar* self);
gboolean xnoise_fullscreen_toolbar_on_pointer_motion (XnoiseFullscreenToolbar* self, GdkEventMotion* ev);
void xnoise_fullscreen_toolbar_show (XnoiseFullscreenToolbar* self);
void xnoise_fullscreen_toolbar_hide (XnoiseFullscreenToolbar* self);
GType xnoise_fullscreen_toolbar_leave_video_fs_button_get_type (void) G_GNUC_CONST;
XnoiseFullscreenToolbarLeaveVideoFSButton* xnoise_fullscreen_toolbar_leave_video_fs_button_new (void);
XnoiseFullscreenToolbarLeaveVideoFSButton* xnoise_fullscreen_toolbar_leave_video_fs_button_construct (GType object_type);
void xnoise_fullscreen_toolbar_leave_video_fs_button_on_clicked (XnoiseFullscreenToolbarLeaveVideoFSButton* self);
GType xnoise_global_access_get_type (void) G_GNUC_CONST;
GType xnoise_global_access_track_state_get_type (void) G_GNUC_CONST;
void xnoise_global_access_reset_position_reference (XnoiseGlobalAccess* self);
void xnoise_global_access_do_restart_of_current_track (XnoiseGlobalAccess* self);
void xnoise_global_access_handle_eos (XnoiseGlobalAccess* self);
void xnoise_global_access_check_image_for_current_track (XnoiseGlobalAccess* self);
XnoiseGlobalAccess* xnoise_global_access_new (void);
XnoiseGlobalAccess* xnoise_global_access_construct (GType object_type);
const char* xnoise_global_access_get_settings_folder (XnoiseGlobalAccess* self);
XnoiseGlobalAccessTrackState xnoise_global_access_get_track_state (XnoiseGlobalAccess* self);
void xnoise_global_access_set_track_state (XnoiseGlobalAccess* self, XnoiseGlobalAccessTrackState value);
const char* xnoise_global_access_get_current_uri (XnoiseGlobalAccess* self);
void xnoise_global_access_set_current_uri (XnoiseGlobalAccess* self, const char* value);
const GtkTreeRowReference* xnoise_global_access_get_position_reference (XnoiseGlobalAccess* self);
void xnoise_global_access_set_position_reference (XnoiseGlobalAccess* self, const GtkTreeRowReference* value);
const GtkTreeRowReference* xnoise_global_access_get_position_reference_next (XnoiseGlobalAccess* self);
void xnoise_global_access_set_position_reference_next (XnoiseGlobalAccess* self, const GtkTreeRowReference* value);
gboolean xnoise_global_access_get_media_import_in_progress (XnoiseGlobalAccess* self);
void xnoise_global_access_set_media_import_in_progress (XnoiseGlobalAccess* self, gboolean value);
const char* xnoise_global_access_get_current_artist (XnoiseGlobalAccess* self);
void xnoise_global_access_set_current_artist (XnoiseGlobalAccess* self, const char* value);
const char* xnoise_global_access_get_current_album (XnoiseGlobalAccess* self);
void xnoise_global_access_set_current_album (XnoiseGlobalAccess* self, const char* value);
const char* xnoise_global_access_get_current_title (XnoiseGlobalAccess* self);
void xnoise_global_access_set_current_title (XnoiseGlobalAccess* self, const char* value);
const char* xnoise_global_access_get_current_location (XnoiseGlobalAccess* self);
void xnoise_global_access_set_current_location (XnoiseGlobalAccess* self, const char* value);
const char* xnoise_global_access_get_current_genre (XnoiseGlobalAccess* self);
void xnoise_global_access_set_current_genre (XnoiseGlobalAccess* self, const char* value);
const char* xnoise_global_access_get_current_organization (XnoiseGlobalAccess* self);
void xnoise_global_access_set_current_organization (XnoiseGlobalAccess* self, const char* value);
const char* xnoise_global_access_get_image_path_small (XnoiseGlobalAccess* self);
void xnoise_global_access_set_image_path_small (XnoiseGlobalAccess* self, const char* value);
const char* xnoise_global_access_get_image_path_large (XnoiseGlobalAccess* self);
void xnoise_global_access_set_image_path_large (XnoiseGlobalAccess* self, const char* value);
GType xnoise_gst_player_get_type (void) G_GNUC_CONST;
GType xnoise_video_screen_get_type (void) G_GNUC_CONST;
XnoiseGstPlayer* xnoise_gst_player_new (void);
XnoiseGstPlayer* xnoise_gst_player_construct (GType object_type);
void xnoise_gst_player_play (XnoiseGstPlayer* self);
void xnoise_gst_player_pause (XnoiseGstPlayer* self);
void xnoise_gst_player_stop (XnoiseGstPlayer* self);
void xnoise_gst_player_playSong (XnoiseGstPlayer* self, gboolean force_play);
gboolean xnoise_gst_player_get_current_has_video (XnoiseGstPlayer* self);
void xnoise_gst_player_set_current_has_video (XnoiseGstPlayer* self, gboolean value);
double xnoise_gst_player_get_volume (XnoiseGstPlayer* self);
void xnoise_gst_player_set_volume (XnoiseGstPlayer* self, double value);
gboolean xnoise_gst_player_get_playing (XnoiseGstPlayer* self);
void xnoise_gst_player_set_playing (XnoiseGstPlayer* self, gboolean value);
gboolean xnoise_gst_player_get_paused (XnoiseGstPlayer* self);
void xnoise_gst_player_set_paused (XnoiseGstPlayer* self, gboolean value);
gboolean xnoise_gst_player_get_seeking (XnoiseGstPlayer* self);
void xnoise_gst_player_set_seeking (XnoiseGstPlayer* self, gboolean value);
gint64 xnoise_gst_player_get_length_time (XnoiseGstPlayer* self);
void xnoise_gst_player_set_length_time (XnoiseGstPlayer* self, gint64 value);
gboolean xnoise_gst_player_get_is_stream (XnoiseGstPlayer* self);
gboolean xnoise_gst_player_get_buffering (XnoiseGstPlayer* self);
const char* xnoise_gst_player_get_Uri (XnoiseGstPlayer* self);
void xnoise_gst_player_set_Uri (XnoiseGstPlayer* self, const char* value);
double xnoise_gst_player_get_gst_position (XnoiseGstPlayer* self);
void xnoise_gst_player_set_gst_position (XnoiseGstPlayer* self, double value);
GType xnoise_info_bar_get_type (void) G_GNUC_CONST;
GType xnoise_user_info_get_type (void) G_GNUC_CONST;
GType xnoise_user_info_content_class_get_type (void) G_GNUC_CONST;
GType xnoise_user_info_removal_type_get_type (void) G_GNUC_CONST;
XnoiseInfoBar* xnoise_info_bar_new (XnoiseUserInfo* _uinf, XnoiseUserInfoContentClass _content_class, XnoiseUserInfoRemovalType _removal_type, guint _current_id, gint _appearance_time_seconds, const char* _info_text, gboolean bold, GtkWidget* _extra_widget);
XnoiseInfoBar* xnoise_info_bar_construct (GType object_type, XnoiseUserInfo* _uinf, XnoiseUserInfoContentClass _content_class, XnoiseUserInfoRemovalType _removal_type, guint _current_id, gint _appearance_time_seconds, const char* _info_text, gboolean bold, GtkWidget* _extra_widget);
void xnoise_info_bar_enable_close_button (XnoiseInfoBar* self, gboolean enable);
void xnoise_info_bar_update_symbol_widget (XnoiseInfoBar* self, XnoiseUserInfoContentClass cc);
void xnoise_info_bar_update_text (XnoiseInfoBar* self, const char* txt, gboolean bold);
void xnoise_info_bar_update_extra_widget (XnoiseInfoBar* self, GtkWidget* widget);
GType xnoise_lyrics_loader_get_type (void) G_GNUC_CONST;
XnoiseLyricsLoader* xnoise_lyrics_loader_new (void);
XnoiseLyricsLoader* xnoise_lyrics_loader_construct (GType object_type);
gboolean xnoise_lyrics_loader_fetch (XnoiseLyricsLoader* self);
GType xnoise_lyrics_view_get_type (void) G_GNUC_CONST;
XnoiseLyricsView* xnoise_lyrics_view_new (void);
XnoiseLyricsView* xnoise_lyrics_view_construct (GType object_type);
GType xnoise_tray_icon_get_type (void) G_GNUC_CONST;
GType xnoise_main_window_get_type (void) G_GNUC_CONST;
GType xnoise_track_list_get_type (void) G_GNUC_CONST;
GType xnoise_track_list_model_get_type (void) G_GNUC_CONST;
GType xnoise_plugin_loader_get_type (void) G_GNUC_CONST;
extern gboolean xnoise_main_show_plugin_state;
extern gboolean xnoise_main_no_plugins;
XnoiseMain* xnoise_main_new (void);
XnoiseMain* xnoise_main_construct (GType object_type);
void xnoise_main_add_track_to_gst_player (XnoiseMain* self, const char* uri);
void xnoise_main_save_tracklist (XnoiseMain* self);
void xnoise_main_quit (XnoiseMain* self);
XnoiseMain* xnoise_main_get_instance (void);
gboolean gdk_window_ensure_native (GdkWindow* window);
GType xnoise_iparams_get_type (void) G_GNUC_CONST;
GType xnoise_track_list_note_book_tab_get_type (void) G_GNUC_CONST;
GType xnoise_play_pause_button_get_type (void) G_GNUC_CONST;
GType xnoise_track_progress_bar_get_type (void) G_GNUC_CONST;
GType xnoise_media_browser_get_type (void) G_GNUC_CONST;
GtkUIManager* xnoise_main_window_get_ui_manager (XnoiseMainWindow* self);
XnoiseMainWindow* xnoise_main_window_new (void);
XnoiseMainWindow* xnoise_main_window_construct (GType object_type);
void xnoise_main_window_ask_for_initial_media_import (XnoiseMainWindow* self);
void xnoise_main_window_position_config_menu (XnoiseMainWindow* self, GtkMenu* menu, gint* x, gint* y, gboolean* push);
void xnoise_main_window_toggle_fullscreen (XnoiseMainWindow* self);
void xnoise_main_window_toggle_window_visbility (XnoiseMainWindow* self);
void xnoise_main_window_stop (XnoiseMainWindow* self);
void xnoise_main_window_change_track (XnoiseMainWindow* self, XnoiseControlButtonDirection direction, gboolean handle_repeat_state);
void xnoise_main_window_set_displayed_title (XnoiseMainWindow* self, char** newuri, const char* tagname, const char* tagvalue);
void xnoise_main_window_handle_control_button_click (XnoiseMainWindow* self, XnoiseControlButton* sender, XnoiseControlButtonDirection dir);
void xnoise_main_window_display_info_bar (XnoiseMainWindow* self, GtkInfoBar* bar);
void xnoise_main_window_show_status_info (XnoiseMainWindow* self, XnoiseInfoBar* bar);
gint xnoise_main_window_get_repeatState (XnoiseMainWindow* self);
void xnoise_main_window_set_repeatState (XnoiseMainWindow* self, gint value);
gboolean xnoise_main_window_get_fullscreenwindowvisible (XnoiseMainWindow* self);
void xnoise_main_window_set_fullscreenwindowvisible (XnoiseMainWindow* self, gboolean value);
gboolean xnoise_main_window_get_compact_layout (XnoiseMainWindow* self);
void xnoise_main_window_set_compact_layout (XnoiseMainWindow* self, gboolean value);
GType xnoise_media_browser_model_get_type (void) G_GNUC_CONST;
XnoiseMediaBrowser* xnoise_media_browser_new (void);
XnoiseMediaBrowser* xnoise_media_browser_construct (GType object_type);
void xnoise_media_browser_on_searchtext_changed (XnoiseMediaBrowser* self, const char* txt);
gboolean xnoise_media_browser_change_model_data (XnoiseMediaBrowser* self);
gboolean xnoise_media_browser_update_view (XnoiseMediaBrowser* self);
void xnoise_media_browser_on_row_expanded (XnoiseMediaBrowser* self, GtkTreeIter* iter, GtkTreePath* path);
void xnoise_media_browser_on_row_collapsed (XnoiseMediaBrowser* self, GtkTreeIter* iter, GtkTreePath* path);
void xnoise_media_browser_resize_line_width (XnoiseMediaBrowser* self, gint new_width);
gboolean xnoise_media_browser_get_use_linebreaks (XnoiseMediaBrowser* self);
void xnoise_media_browser_set_use_linebreaks (XnoiseMediaBrowser* self, gboolean value);
gboolean xnoise_media_browser_get_use_treelines (XnoiseMediaBrowser* self);
void xnoise_media_browser_set_use_treelines (XnoiseMediaBrowser* self, gboolean value);
GType xnoise_media_browser_model_column_get_type (void) G_GNUC_CONST;
GType xnoise_media_browser_model_collection_type_get_type (void) G_GNUC_CONST;
gint xnoise_media_browser_model_get_max_icon_width (XnoiseMediaBrowserModel* self);
gboolean xnoise_media_browser_model_populate_model (XnoiseMediaBrowserModel* self);
XnoiseTrackData** xnoise_media_browser_model_get_trackdata_listed (XnoiseMediaBrowserModel* self, GtkTreePath* treepath, int* result_length1);
XnoiseTrackData** xnoise_media_browser_model_get_trackdata_hierarchical (XnoiseMediaBrowserModel* self, GtkTreePath* treepath, int* result_length1);
XnoiseTrackData** xnoise_media_browser_model_get_trackdata_for_treepath (XnoiseMediaBrowserModel* self, GtkTreePath* treepath, int* result_length1);
char** xnoise_media_browser_model_build_uri_list_for_treepath (XnoiseMediaBrowserModel* self, GtkTreePath* treepath, XnoiseDbBrowser** dbb, int* result_length1);
XnoiseMediaBrowserModel* xnoise_media_browser_model_new (void);
XnoiseMediaBrowserModel* xnoise_media_browser_model_construct (GType object_type);
GType xnoise_media_importer_get_type (void) G_GNUC_CONST;
void xnoise_media_importer_store_files (XnoiseMediaImporter* self, char** list_of_files, int list_of_files_length1, XnoiseDbWriter** dbw);
void xnoise_media_importer_add_single_file (XnoiseMediaImporter* self, const char* uri, XnoiseDbWriter** dbw);
gint xnoise_media_importer_add_local_tags (XnoiseMediaImporter* self, GFile* dir, XnoiseDbWriter** dbw);
void xnoise_media_importer_store_folders (XnoiseMediaImporter* self, char** mfolders, int mfolders_length1, XnoiseDbWriter** dbw);
void xnoise_media_importer_store_streams (XnoiseMediaImporter* self, char** list_of_streams, int list_of_streams_length1, XnoiseDbWriter** dbw);
XnoiseMediaImporter* xnoise_media_importer_new (void);
XnoiseMediaImporter* xnoise_media_importer_construct (GType object_type);
GType xnoise_params_get_type (void) G_GNUC_CONST;
extern XnoiseParams* xnoise_par;
extern XnoiseGlobalAccess* xnoise_global;
extern XnoiseUserInfo* xnoise_userinfo;
void xnoise_initialize (gboolean* is_first_start);
char* xnoise_escape_for_local_folder_search (const char* value);
char* xnoise_remove_single_character (const char* haystack, const char* needle);
char* xnoise_prepare_for_comparison (const char* value);
char* xnoise_remove_linebreaks (const char* value);
char* xnoise_replace_underline_with_blank_encoded (const char* value);
gboolean xnoise_get_image_path_for_media_uri (const char* uri, char** image_path);
char* xnoise_get_stream_uri (const char* playlist_uri);
GType gst_stream_type_get_type (void) G_GNUC_CONST;
XnoiseTrackData* xnoise_track_data_new (void);
XnoiseTrackData* xnoise_track_data_construct (GType object_type);
void xnoise_iparams_read_params_data (XnoiseIParams* self);
void xnoise_iparams_write_params_data (XnoiseIParams* self);
GType xnoise_ilyrics_get_type (void) G_GNUC_CONST;
void xnoise_ilyrics_find_lyrics (XnoiseILyrics* self);
char* xnoise_ilyrics_get_identifier (XnoiseILyrics* self);
char* xnoise_ilyrics_get_credits (XnoiseILyrics* self);
GType xnoise_ilyrics_provider_get_type (void) G_GNUC_CONST;
XnoiseILyrics* xnoise_ilyrics_provider_from_tags (XnoiseILyricsProvider* self, const char* artist, const char* title);
GType xnoise_ialbum_cover_image_get_type (void) G_GNUC_CONST;
void xnoise_ialbum_cover_image_find_image (XnoiseIAlbumCoverImage* self);
GType xnoise_ialbum_cover_image_provider_get_type (void) G_GNUC_CONST;
XnoiseIAlbumCoverImage* xnoise_ialbum_cover_image_provider_from_tags (XnoiseIAlbumCoverImageProvider* self, const char* artist, const char* album);
XnoiseParams* xnoise_params_new (void);
XnoiseParams* xnoise_params_construct (GType object_type);
void xnoise_params_iparams_register (XnoiseParams* self, XnoiseIParams* iparam);
void xnoise_params_set_start_parameters_in_implementors (XnoiseParams* self);
void xnoise_params_write_all_parameters_to_file (XnoiseParams* self);
gint xnoise_params_get_int_value (XnoiseParams* self, const char* key);
double xnoise_params_get_double_value (XnoiseParams* self, const char* key);
char** xnoise_params_get_string_list_value (XnoiseParams* self, const char* key, int* result_length1);
char* xnoise_params_get_string_value (XnoiseParams* self, const char* key);
void xnoise_params_set_int_value (XnoiseParams* self, const char* key, gint value);
void xnoise_params_set_double_value (XnoiseParams* self, const char* key, double value);
void xnoise_params_set_string_list_value (XnoiseParams* self, const char* key, char** value, int value_length1);
void xnoise_params_set_string_value (XnoiseParams* self, const char* key, const char* value);
gint xnoise_params_get_lyric_provider_priority (XnoiseParams* self, const char* name);
gint xnoise_params_get_image_provider_priority (XnoiseParams* self, const char* name);
XnoisePlayPauseButton* xnoise_play_pause_button_new (void);
XnoisePlayPauseButton* xnoise_play_pause_button_construct (GType object_type);
void xnoise_play_pause_button_on_menu_clicked (XnoisePlayPauseButton* self, GtkMenuItem* sender);
void xnoise_play_pause_button_on_clicked (XnoisePlayPauseButton* self, GtkWidget* sender);
void xnoise_play_pause_button_update_picture (XnoisePlayPauseButton* self);
void xnoise_play_pause_button_set_play_picture (XnoisePlayPauseButton* self);
void xnoise_play_pause_button_set_pause_picture (XnoisePlayPauseButton* self);
GType xnoise_plugin_get_type (void) G_GNUC_CONST;
GType xnoise_plugin_information_get_type (void) G_GNUC_CONST;
XnoisePlugin* xnoise_plugin_new (XnoisePluginInformation* info);
XnoisePlugin* xnoise_plugin_construct (GType object_type, XnoisePluginInformation* info);
void xnoise_plugin_activate (XnoisePlugin* self);
void xnoise_plugin_deactivate (XnoisePlugin* self);
GtkWidget* xnoise_plugin_settingwidget (XnoisePlugin* self);
XnoisePluginInformation* xnoise_plugin_get_info (XnoisePlugin* self);
gboolean xnoise_plugin_get_loaded (XnoisePlugin* self);
gboolean xnoise_plugin_get_activated (XnoisePlugin* self);
void xnoise_plugin_set_activated (XnoisePlugin* self, gboolean value);
gboolean xnoise_plugin_get_configurable (XnoisePlugin* self);
gboolean xnoise_plugin_get_is_lyrics_plugin (XnoisePlugin* self);
gboolean xnoise_plugin_get_is_album_image_plugin (XnoisePlugin* self);
XnoisePluginLoader* xnoise_plugin_loader_new (void);
XnoisePluginLoader* xnoise_plugin_loader_construct (GType object_type);
GList* xnoise_plugin_loader_get_info_files (XnoisePluginLoader* self);
gboolean xnoise_plugin_loader_load_all (XnoisePluginLoader* self);
gboolean xnoise_plugin_loader_activate_single_plugin (XnoisePluginLoader* self, const char* name);
void xnoise_plugin_loader_deactivate_single_plugin (XnoisePluginLoader* self, const char* name);
XnoisePluginInformation* xnoise_plugin_information_new (const char* xplug_file);
XnoisePluginInformation* xnoise_plugin_information_construct (GType object_type, const char* xplug_file);
gboolean xnoise_plugin_information_load_info (XnoisePluginInformation* self);
const char* xnoise_plugin_information_get_xplug_file (XnoisePluginInformation* self);
const char* xnoise_plugin_information_get_name (XnoisePluginInformation* self);
const char* xnoise_plugin_information_get_icon (XnoisePluginInformation* self);
const char* xnoise_plugin_information_get_module (XnoisePluginInformation* self);
const char* xnoise_plugin_information_get_description (XnoisePluginInformation* self);
const char* xnoise_plugin_information_get_website (XnoisePluginInformation* self);
const char* xnoise_plugin_information_get_license (XnoisePluginInformation* self);
const char* xnoise_plugin_information_get_copyright (XnoisePluginInformation* self);
const char* xnoise_plugin_information_get_author (XnoisePluginInformation* self);
GType xnoise_iplugin_get_type (void) G_GNUC_CONST;
gboolean xnoise_iplugin_init (XnoiseIPlugin* self);
gboolean xnoise_iplugin_has_settings_widget (XnoiseIPlugin* self);
gboolean xnoise_iplugin_has_singleline_settings_widget (XnoiseIPlugin* self);
GtkWidget* xnoise_iplugin_get_settings_widget (XnoiseIPlugin* self);
GtkWidget* xnoise_iplugin_get_singleline_settings_widget (XnoiseIPlugin* self);
const char* xnoise_iplugin_get_name (XnoiseIPlugin* self);
XnoiseMain* xnoise_iplugin_get_xn (XnoiseIPlugin* self);
void xnoise_iplugin_set_xn (XnoiseIPlugin* self, XnoiseMain* value);
GType xnoise_plugin_manager_tree_get_type (void) G_GNUC_CONST;
XnoisePluginManagerTree* xnoise_plugin_manager_tree_new (void);
XnoisePluginManagerTree* xnoise_plugin_manager_tree_construct (GType object_type);
void xnoise_plugin_manager_tree_text_cell_cb (GtkCellLayout* cell_layout, GtkCellRenderer* cell, GtkTreeModel* tree_model, GtkTreeIter* iter);
void xnoise_plugin_manager_tree_create_view (XnoisePluginManagerTree* self);
void xnoise_plugin_manager_tree_set_width (XnoisePluginManagerTree* self, gint w);
GQuark xnoise_settings_dialog_error_quark (void);
GType xnoise_settings_dialog_get_type (void) G_GNUC_CONST;
XnoiseSettingsDialog* xnoise_settings_dialog_new (void);
XnoiseSettingsDialog* xnoise_settings_dialog_construct (GType object_type);
gpointer xnoise_tag_reader_ref (gpointer instance);
void xnoise_tag_reader_unref (gpointer instance);
GParamSpec* xnoise_param_spec_tag_reader (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void xnoise_value_set_tag_reader (GValue* value, gpointer v_object);
void xnoise_value_take_tag_reader (GValue* value, gpointer v_object);
gpointer xnoise_value_get_tag_reader (const GValue* value);
GType xnoise_tag_reader_get_type (void) G_GNUC_CONST;
XnoiseTrackData* xnoise_tag_reader_read_tag (XnoiseTagReader* self, const char* filename);
XnoiseTagReader* xnoise_tag_reader_new (void);
XnoiseTagReader* xnoise_tag_reader_construct (GType object_type);
GType xnoise_text_column_get_type (void) G_GNUC_CONST;
GType xnoise_track_list_model_column_get_type (void) G_GNUC_CONST;
XnoiseTextColumn* xnoise_text_column_new (const char* title, GtkCellRendererText* renderer, XnoiseTrackListModelColumn col_id);
XnoiseTextColumn* xnoise_text_column_construct (GType object_type, const char* title, GtkCellRendererText* renderer, XnoiseTrackListModelColumn col_id);
void xnoise_text_column_adjust_width (XnoiseTextColumn* self, gint width);
XnoiseTrackListModelColumn xnoise_text_column_get_id (XnoiseTextColumn* self);
XnoiseTrackList* xnoise_track_list_new (void);
XnoiseTrackList* xnoise_track_list_construct (GType object_type);
void xnoise_track_list_set_focus_on_iter (XnoiseTrackList* self, GtkTreeIter* iter);
void xnoise_track_list_remove_selected_rows (XnoiseTrackList* self);
void xnoise_track_list_on_activated (XnoiseTrackList* self, const char* uri, GtkTreePath* path);
void xnoise_track_list_handle_resize (XnoiseTrackList* self);
gboolean xnoise_track_list_get_column_length_visible (XnoiseTrackList* self);
void xnoise_track_list_set_column_length_visible (XnoiseTrackList* self, gboolean value);
gboolean xnoise_track_list_get_column_tracknumber_visible (XnoiseTrackList* self);
void xnoise_track_list_set_column_tracknumber_visible (XnoiseTrackList* self, gboolean value);
gboolean xnoise_track_list_get_column_album_visible (XnoiseTrackList* self);
void xnoise_track_list_set_column_album_visible (XnoiseTrackList* self, gboolean value);
XnoiseTrackListModel* xnoise_track_list_model_new (void);
XnoiseTrackListModel* xnoise_track_list_model_construct (GType object_type);
void xnoise_track_list_model_on_before_position_reference_changed (XnoiseTrackListModel* self);
gboolean xnoise_track_list_model_get_first_row (XnoiseTrackListModel* self, GtkTreePath** treepath);
gboolean xnoise_track_list_model_get_random_row (XnoiseTrackListModel* self, GtkTreePath** treepath);
gboolean xnoise_track_list_model_path_is_last_row (XnoiseTrackListModel* self, GtkTreePath** path, gboolean* trackList_is_empty);
void xnoise_track_list_model_on_position_reference_changed (XnoiseTrackListModel* self);
gboolean xnoise_track_list_model_get_current_path (XnoiseTrackListModel* self, GtkTreePath** treepath);
gboolean xnoise_track_list_model_get_active_path (XnoiseTrackListModel* self, GtkTreePath** treepath, gboolean* used_next_pos);
void xnoise_track_list_model_insert_title (XnoiseTrackListModel* self, GdkPixbuf* pixbuf, gint tracknumber, const char* title, const char* album, const char* artist, gint length, gboolean bold, const char* uri, GtkTreeIter* result);
gboolean xnoise_track_list_model_not_empty (XnoiseTrackListModel* self);
void xnoise_track_list_model_set_reference_to_last (XnoiseTrackListModel* self);
char** xnoise_track_list_model_get_all_tracks (XnoiseTrackListModel* self, int* result_length1);
char* xnoise_track_list_model_get_uri_for_current_position (XnoiseTrackListModel* self);
void xnoise_track_list_model_add_tracks (XnoiseTrackListModel* self, XnoiseTrackData** td_list, int td_list_length1, gboolean imediate_play);
void xnoise_track_list_model_add_uris (XnoiseTrackListModel* self, char** uris, int uris_length1);
XnoiseTrackProgressBar* xnoise_track_progress_bar_new (void);
XnoiseTrackProgressBar* xnoise_track_progress_bar_construct (GType object_type);
void xnoise_track_progress_bar_set_value (XnoiseTrackProgressBar* self, guint pos, guint len);
XnoiseTrayIcon* xnoise_tray_icon_new (void);
XnoiseTrayIcon* xnoise_tray_icon_construct (GType object_type);
XnoiseUserInfo* xnoise_user_info_new (XnoiseUserInfoAddInfoBarDelegateType func, void* func_target);
XnoiseUserInfo* xnoise_user_info_construct (GType object_type, XnoiseUserInfoAddInfoBarDelegateType func, void* func_target);
void xnoise_user_info_enable_close_button_by_id (XnoiseUserInfo* self, guint id, gboolean enable);
void xnoise_user_info_update_symbol_widget_by_id (XnoiseUserInfo* self, guint id, XnoiseUserInfoContentClass cc);
void xnoise_user_info_update_text_by_id (XnoiseUserInfo* self, guint id, const char* txt, gboolean bold);
void xnoise_user_info_update_extra_widget_by_id (XnoiseUserInfo* self, guint id, GtkWidget* widget);
void xnoise_user_info_popdown (XnoiseUserInfo* self, guint id);
guint xnoise_user_info_popup (XnoiseUserInfo* self, XnoiseUserInfoRemovalType removal_type, XnoiseUserInfoContentClass content_class, const char* info_text, gboolean bold, gint appearance_time_seconds, GtkWidget* extra_widget);
XnoiseVideoScreen* xnoise_video_screen_new (void);
XnoiseVideoScreen* xnoise_video_screen_construct (GType object_type);
void xnoise_video_screen_trigger_expose (XnoiseVideoScreen* self);
GType xnoise_volume_slider_button_get_type (void) G_GNUC_CONST;
XnoiseVolumeSliderButton* xnoise_volume_slider_button_new (void);
XnoiseVolumeSliderButton* xnoise_volume_slider_button_construct (GType object_type);


G_END_DECLS

#endif
