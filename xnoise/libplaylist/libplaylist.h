/* libplaylist.h generated by valac, the Vala compiler, do not modify */


#ifndef __LIBPLAYLIST_H__
#define __LIBPLAYLIST_H__

#include <glib.h>
#include <stdlib.h>
#include <string.h>
#include <glib-object.h>
#include <gio/gio.h>

G_BEGIN_DECLS


#define PL_TYPE_LIST_TYPE (pl_list_type_get_type ())

#define PL_TYPE_RESULT (pl_result_get_type ())

#define PL_TYPE_DATA (pl_data_get_type ())
#define PL_DATA(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PL_TYPE_DATA, PlData))
#define PL_DATA_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PL_TYPE_DATA, PlDataClass))
#define PL_IS_DATA(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PL_TYPE_DATA))
#define PL_IS_DATA_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PL_TYPE_DATA))
#define PL_DATA_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PL_TYPE_DATA, PlDataClass))

typedef struct _PlData PlData;
typedef struct _PlDataClass PlDataClass;
typedef struct _PlDataPrivate PlDataPrivate;

#define PL_DATA_TYPE_FIELD (pl_data_field_get_type ())

#define PL_TYPE_READER (pl_reader_get_type ())
#define PL_READER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PL_TYPE_READER, PlReader))
#define PL_READER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PL_TYPE_READER, PlReaderClass))
#define PL_IS_READER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PL_TYPE_READER))
#define PL_IS_READER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PL_TYPE_READER))
#define PL_READER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PL_TYPE_READER, PlReaderClass))

typedef struct _PlReader PlReader;
typedef struct _PlReaderClass PlReaderClass;
typedef struct _PlReaderPrivate PlReaderPrivate;

#define PL_TYPE_WRITER (pl_writer_get_type ())
#define PL_WRITER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PL_TYPE_WRITER, PlWriter))
#define PL_WRITER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PL_TYPE_WRITER, PlWriterClass))
#define PL_IS_WRITER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PL_TYPE_WRITER))
#define PL_IS_WRITER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PL_TYPE_WRITER))
#define PL_WRITER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PL_TYPE_WRITER, PlWriterClass))

typedef struct _PlWriter PlWriter;
typedef struct _PlWriterClass PlWriterClass;
typedef struct _PlWriterPrivate PlWriterPrivate;

typedef enum  {
	PL_READER_ERROR_UNKNOWN_TYPE,
	PL_READER_ERROR_SOMETHING_ELSE
} PlReaderError;
#define PL_READER_ERROR pl_reader_error_quark ()
typedef enum  {
	PL_WRITER_ERROR_UNKNOWN_TYPE,
	PL_WRITER_ERROR_SOMETHING_ELSE
} PlWriterError;
#define PL_WRITER_ERROR pl_writer_error_quark ()
typedef enum  {
	PL_LIST_TYPE_UNKNOWN = 0,
	PL_LIST_TYPE_IGNORED,
	PL_LIST_TYPE_M3U,
	PL_LIST_TYPE_PLS,
	PL_LIST_TYPE_ASX,
	PL_LIST_TYPE_XSPF
} PlListType;

typedef enum  {
	PL_RESULT_UNHANDLED = 0,
	PL_RESULT_ERROR,
	PL_RESULT_IGNORED,
	PL_RESULT_SUCCESS,
	PL_RESULT_EMPTY
} PlResult;

struct _PlData {
	GTypeInstance parent_instance;
	volatile int ref_count;
	PlDataPrivate * priv;
};

struct _PlDataClass {
	GTypeClass parent_class;
	void (*finalize) (PlData *self);
};

typedef enum  {
	PL_DATA_FIELD_URI = 0,
	PL_DATA_FIELD_TITLE,
	PL_DATA_FIELD_AUTHOR,
	PL_DATA_FIELD_GENRE,
	PL_DATA_FIELD_ALBUM,
	PL_DATA_FIELD_COPYRIGHT,
	PL_DATA_FIELD_DURATION
} PlDataField;

struct _PlReader {
	GObject parent_instance;
	PlReaderPrivate * priv;
};

struct _PlReaderClass {
	GObjectClass parent_class;
};

struct _PlWriter {
	GObject parent_instance;
	PlWriterPrivate * priv;
};

struct _PlWriterClass {
	GObjectClass parent_class;
};


GQuark pl_reader_error_quark (void);
GQuark pl_writer_error_quark (void);
GType pl_list_type_get_type (void);
GType pl_result_get_type (void);
extern gboolean pl_debug;
glong pl_get_duration_from_string (char** duration_string);
gpointer pl_data_ref (gpointer instance);
void pl_data_unref (gpointer instance);
GParamSpec* pl_param_spec_data (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void pl_value_set_data (GValue* value, gpointer v_object);
void pl_value_take_data (GValue* value, gpointer v_object);
gpointer pl_value_get_data (const GValue* value);
GType pl_data_get_type (void);
GType pl_data_field_get_type (void);
PlData* pl_data_new (void);
PlData* pl_data_construct (GType object_type);
void pl_data_add_field (PlData* self, PlDataField field, const char* val);
PlDataField* pl_data_get_contained_fields (PlData* self, int* result_length1);
char* pl_data_get_field (PlData* self, PlDataField field);
char* pl_data_get_uri (PlData* self);
char* pl_data_get_title (PlData* self);
char* pl_data_get_author (PlData* self);
char* pl_data_get_genre (PlData* self);
char* pl_data_get_album (PlData* self);
char* pl_data_get_copyright (PlData* self);
char* pl_data_get_duration_string (PlData* self);
glong pl_data_get_duration (PlData* self);
GType pl_reader_get_type (void);
PlReader* pl_reader_new (void);
PlReader* pl_reader_construct (GType object_type);
char** pl_reader_get_uris (PlReader* self, int* result_length1);
PlResult pl_reader_read (PlReader* self, const char* list_uri, GError** error);
void pl_reader_read_async (PlReader* self, const char* list_uri, GAsyncReadyCallback _callback_, gpointer _user_data_);
PlResult pl_reader_read_finish (PlReader* self, GAsyncResult* _res_, GError** error);
PlListType pl_reader_get_ptype (PlReader* self);
const char* pl_reader_get_playlist_uri (PlReader* self);
GType pl_writer_get_type (void);
PlWriter* pl_writer_new (PlListType ptype);
PlWriter* pl_writer_construct (GType object_type, PlListType ptype);
PlResult pl_writer_write (PlWriter* self, PlData** data, int data_length1, const char* playlist_uri, gboolean overwrite, GError** error);
void pl_writer_write_asyn (PlWriter* self, PlData** data, int data_length1, const char* playlist_uri, gboolean overwrite, GAsyncReadyCallback _callback_, gpointer _user_data_);
PlResult pl_writer_write_asyn_finish (PlWriter* self, GAsyncResult* _res_, GError** error);
const char* pl_writer_get_uri (PlWriter* self);


G_END_DECLS

#endif
