/* libplaylist-1.0.vapi generated by valac, do not modify. */

[CCode (cprefix = "Pl", lower_case_cprefix = "pl_")]
namespace Pl {
	[CCode (cprefix = "PlAsx", lower_case_cprefix = "pl_asx_")]
	namespace Asx {
	}
	[CCode (cprefix = "PlM3u", lower_case_cprefix = "pl_m3u_")]
	namespace M3u {
	}
	[CCode (cprefix = "PlPls", lower_case_cprefix = "pl_pls_")]
	namespace Pls {
	}
	[CCode (cprefix = "PlXspf", lower_case_cprefix = "pl_xspf_")]
	namespace Xspf {
	}
	[CCode (ref_function = "pl_data_ref", unref_function = "pl_data_unref", cheader_filename = "libplaylist.h")]
	public class Data {
		public string? album;
		public string? author;
		public string? copyright;
		public string? duration;
		public string? genre;
		public Pl.ListType playlist_type;
		public string? starttime;
		public string? title;
		public string[] urls;
		public string? volume;
		public Data ();
		public string? get_next_url ();
	}
	[CCode (cheader_filename = "libplaylist.h")]
	public class Reader : GLib.Object {
		public Reader ();
		public string? get_album ();
		public string? get_author ();
		public string? get_copyright ();
		public string? get_duration ();
		public string? get_genre ();
		public string? get_starttime ();
		public string? get_title ();
		public string[]? get_uris ();
		public string? get_volume ();
		public Pl.Result read (string playlist_uri);
		public async Pl.Result read_async (string playlist_uri);
		public Pl.ListType ptype { get; }
		public string uri { get; }
	}
	[CCode (cheader_filename = "libplaylist.h")]
	public class Writer : GLib.Object {
		public Writer (Pl.ListType ptype);
		public Pl.Result write (Pl.Data? data, string playlist_uri, bool overwrite = true);
		public async Pl.Result write_asyn (Pl.Data? data, string playlist_uri, bool overwrite = true);
		public string? uri { get; }
	}
	[CCode (cprefix = "PL_LIST_TYPE_", cheader_filename = "libplaylist.h")]
	public enum ListType {
		UNKNOWN,
		IGNORED,
		M3U,
		PLS,
		ASX,
		XSPF
	}
	[CCode (cprefix = "PL_RESULT_", cheader_filename = "libplaylist.h")]
	public enum Result {
		UNHANDLED,
		ERROR,
		IGNORED,
		SUCCESS,
		EMPTY
	}
	[CCode (cprefix = "PL_READER_ERROR_", cheader_filename = "libplaylist.h")]
	public errordomain ReaderError {
		UNKNOWN_TYPE,
		SOMETHING_ELSE,
	}
	[CCode (cprefix = "PL_WRITER_ERROR_", cheader_filename = "libplaylist.h")]
	public errordomain WriterError {
		UNKNOWN_TYPE,
		SOMETHING_ELSE,
	}
	[CCode (cheader_filename = "libplaylist.h")]
	public static bool debug;
	[CCode (cheader_filename = "libplaylist.h")]
	public static long get_duration_from_string (ref string? duration_string);
}
