/* xnoise-1.0.h generated by valac 0.14.0.47-6f1cc, the Vala compiler, do not modify */


#ifndef __XNOISE_1_0_H__
#define __XNOISE_1_0_H__

#include <glib.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <gtk/gtk.h>
#include <gio/gio.h>
#include <sqlite3.h>
#include <float.h>
#include <math.h>
#include <gdk-pixbuf/gdk-pixbuf.h>
#include <unique/uniqueapp.h>
#include <unique/uniquemessage.h>
#include <unique/uniqueenumtypes.h>
#include <gdk/gdk.h>

G_BEGIN_DECLS


#define XNOISE_TYPE_MAIN (xnoise_main_get_type ())
#define XNOISE_MAIN(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_MAIN, XnoiseMain))
#define XNOISE_MAIN_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_MAIN, XnoiseMainClass))
#define XNOISE_IS_MAIN(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_MAIN))
#define XNOISE_IS_MAIN_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_MAIN))
#define XNOISE_MAIN_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_MAIN, XnoiseMainClass))

typedef struct _XnoiseMain XnoiseMain;
typedef struct _XnoiseMainClass XnoiseMainClass;
typedef struct _XnoiseMainPrivate XnoiseMainPrivate;

#define XNOISE_TYPE_ALBUM_IMAGE (xnoise_album_image_get_type ())
#define XNOISE_ALBUM_IMAGE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_ALBUM_IMAGE, XnoiseAlbumImage))
#define XNOISE_ALBUM_IMAGE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_ALBUM_IMAGE, XnoiseAlbumImageClass))
#define XNOISE_IS_ALBUM_IMAGE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_ALBUM_IMAGE))
#define XNOISE_IS_ALBUM_IMAGE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_ALBUM_IMAGE))
#define XNOISE_ALBUM_IMAGE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_ALBUM_IMAGE, XnoiseAlbumImageClass))

typedef struct _XnoiseAlbumImage XnoiseAlbumImage;
typedef struct _XnoiseAlbumImageClass XnoiseAlbumImageClass;
typedef struct _XnoiseAlbumImagePrivate XnoiseAlbumImagePrivate;

#define XNOISE_TYPE_ALBUM_IMAGE_LOADER (xnoise_album_image_loader_get_type ())
#define XNOISE_ALBUM_IMAGE_LOADER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_ALBUM_IMAGE_LOADER, XnoiseAlbumImageLoader))
#define XNOISE_ALBUM_IMAGE_LOADER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_ALBUM_IMAGE_LOADER, XnoiseAlbumImageLoaderClass))
#define XNOISE_IS_ALBUM_IMAGE_LOADER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_ALBUM_IMAGE_LOADER))
#define XNOISE_IS_ALBUM_IMAGE_LOADER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_ALBUM_IMAGE_LOADER))
#define XNOISE_ALBUM_IMAGE_LOADER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_ALBUM_IMAGE_LOADER, XnoiseAlbumImageLoaderClass))

typedef struct _XnoiseAlbumImageLoader XnoiseAlbumImageLoader;
typedef struct _XnoiseAlbumImageLoaderClass XnoiseAlbumImageLoaderClass;
typedef struct _XnoiseAlbumImageLoaderPrivate XnoiseAlbumImageLoaderPrivate;

#define XNOISE_TYPE_IALBUM_COVER_IMAGE (xnoise_ialbum_cover_image_get_type ())
#define XNOISE_IALBUM_COVER_IMAGE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_IALBUM_COVER_IMAGE, XnoiseIAlbumCoverImage))
#define XNOISE_IS_IALBUM_COVER_IMAGE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_IALBUM_COVER_IMAGE))
#define XNOISE_IALBUM_COVER_IMAGE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), XNOISE_TYPE_IALBUM_COVER_IMAGE, XnoiseIAlbumCoverImageIface))

typedef struct _XnoiseIAlbumCoverImage XnoiseIAlbumCoverImage;
typedef struct _XnoiseIAlbumCoverImageIface XnoiseIAlbumCoverImageIface;

#define XNOISE_TYPE_IALBUM_COVER_IMAGE_PROVIDER (xnoise_ialbum_cover_image_provider_get_type ())
#define XNOISE_IALBUM_COVER_IMAGE_PROVIDER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_IALBUM_COVER_IMAGE_PROVIDER, XnoiseIAlbumCoverImageProvider))
#define XNOISE_IS_IALBUM_COVER_IMAGE_PROVIDER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_IALBUM_COVER_IMAGE_PROVIDER))
#define XNOISE_IALBUM_COVER_IMAGE_PROVIDER_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), XNOISE_TYPE_IALBUM_COVER_IMAGE_PROVIDER, XnoiseIAlbumCoverImageProviderIface))

typedef struct _XnoiseIAlbumCoverImageProvider XnoiseIAlbumCoverImageProvider;
typedef struct _XnoiseIAlbumCoverImageProviderIface XnoiseIAlbumCoverImageProviderIface;

#define XNOISE_TYPE_ITEM_HANDLER (xnoise_item_handler_get_type ())
#define XNOISE_ITEM_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_ITEM_HANDLER, XnoiseItemHandler))
#define XNOISE_ITEM_HANDLER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_ITEM_HANDLER, XnoiseItemHandlerClass))
#define XNOISE_IS_ITEM_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_ITEM_HANDLER))
#define XNOISE_IS_ITEM_HANDLER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_ITEM_HANDLER))
#define XNOISE_ITEM_HANDLER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_ITEM_HANDLER, XnoiseItemHandlerClass))

typedef struct _XnoiseItemHandler XnoiseItemHandler;
typedef struct _XnoiseItemHandlerClass XnoiseItemHandlerClass;
typedef struct _XnoiseItemHandlerPrivate XnoiseItemHandlerPrivate;

#define XNOISE_TYPE_ITEM_HANDLER_TYPE (xnoise_item_handler_type_get_type ())

#define XNOISE_TYPE_ITEM_TYPE (xnoise_item_type_get_type ())

#define XNOISE_TYPE_ACTION_CONTEXT (xnoise_action_context_get_type ())

#define XNOISE_TYPE_ITEM_SELECTION_TYPE (xnoise_item_selection_type_get_type ())
typedef struct _XnoiseAction XnoiseAction;

#define XNOISE_TYPE_ITEM_HANDLER_MANAGER (xnoise_item_handler_manager_get_type ())
#define XNOISE_ITEM_HANDLER_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_ITEM_HANDLER_MANAGER, XnoiseItemHandlerManager))
#define XNOISE_ITEM_HANDLER_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_ITEM_HANDLER_MANAGER, XnoiseItemHandlerManagerClass))
#define XNOISE_IS_ITEM_HANDLER_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_ITEM_HANDLER_MANAGER))
#define XNOISE_IS_ITEM_HANDLER_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_ITEM_HANDLER_MANAGER))
#define XNOISE_ITEM_HANDLER_MANAGER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_ITEM_HANDLER_MANAGER, XnoiseItemHandlerManagerClass))

typedef struct _XnoiseItemHandlerManager XnoiseItemHandlerManager;
typedef struct _XnoiseItemHandlerManagerClass XnoiseItemHandlerManagerClass;

#define XNOISE_TYPE_HANDLER_ADD_ALL_TO_TRACKLIST (xnoise_handler_add_all_to_tracklist_get_type ())
#define XNOISE_HANDLER_ADD_ALL_TO_TRACKLIST(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_HANDLER_ADD_ALL_TO_TRACKLIST, XnoiseHandlerAddAllToTracklist))
#define XNOISE_HANDLER_ADD_ALL_TO_TRACKLIST_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_HANDLER_ADD_ALL_TO_TRACKLIST, XnoiseHandlerAddAllToTracklistClass))
#define XNOISE_IS_HANDLER_ADD_ALL_TO_TRACKLIST(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_HANDLER_ADD_ALL_TO_TRACKLIST))
#define XNOISE_IS_HANDLER_ADD_ALL_TO_TRACKLIST_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_HANDLER_ADD_ALL_TO_TRACKLIST))
#define XNOISE_HANDLER_ADD_ALL_TO_TRACKLIST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_HANDLER_ADD_ALL_TO_TRACKLIST, XnoiseHandlerAddAllToTracklistClass))

typedef struct _XnoiseHandlerAddAllToTracklist XnoiseHandlerAddAllToTracklist;
typedef struct _XnoiseHandlerAddAllToTracklistClass XnoiseHandlerAddAllToTracklistClass;
typedef struct _XnoiseHandlerAddAllToTracklistPrivate XnoiseHandlerAddAllToTracklistPrivate;

#define XNOISE_TYPE_HANDLER_ADD_TO_TRACKLIST (xnoise_handler_add_to_tracklist_get_type ())
#define XNOISE_HANDLER_ADD_TO_TRACKLIST(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_HANDLER_ADD_TO_TRACKLIST, XnoiseHandlerAddToTracklist))
#define XNOISE_HANDLER_ADD_TO_TRACKLIST_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_HANDLER_ADD_TO_TRACKLIST, XnoiseHandlerAddToTracklistClass))
#define XNOISE_IS_HANDLER_ADD_TO_TRACKLIST(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_HANDLER_ADD_TO_TRACKLIST))
#define XNOISE_IS_HANDLER_ADD_TO_TRACKLIST_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_HANDLER_ADD_TO_TRACKLIST))
#define XNOISE_HANDLER_ADD_TO_TRACKLIST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_HANDLER_ADD_TO_TRACKLIST, XnoiseHandlerAddToTracklistClass))

typedef struct _XnoiseHandlerAddToTracklist XnoiseHandlerAddToTracklist;
typedef struct _XnoiseHandlerAddToTracklistClass XnoiseHandlerAddToTracklistClass;
typedef struct _XnoiseHandlerAddToTracklistPrivate XnoiseHandlerAddToTracklistPrivate;

#define XNOISE_TYPE_HANDLER_EDIT_TAGS (xnoise_handler_edit_tags_get_type ())
#define XNOISE_HANDLER_EDIT_TAGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_HANDLER_EDIT_TAGS, XnoiseHandlerEditTags))
#define XNOISE_HANDLER_EDIT_TAGS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_HANDLER_EDIT_TAGS, XnoiseHandlerEditTagsClass))
#define XNOISE_IS_HANDLER_EDIT_TAGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_HANDLER_EDIT_TAGS))
#define XNOISE_IS_HANDLER_EDIT_TAGS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_HANDLER_EDIT_TAGS))
#define XNOISE_HANDLER_EDIT_TAGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_HANDLER_EDIT_TAGS, XnoiseHandlerEditTagsClass))

typedef struct _XnoiseHandlerEditTags XnoiseHandlerEditTags;
typedef struct _XnoiseHandlerEditTagsClass XnoiseHandlerEditTagsClass;
typedef struct _XnoiseHandlerEditTagsPrivate XnoiseHandlerEditTagsPrivate;

#define XNOISE_TYPE_TAG_TITLE_EDITOR (xnoise_tag_title_editor_get_type ())
#define XNOISE_TAG_TITLE_EDITOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_TAG_TITLE_EDITOR, XnoiseTagTitleEditor))
#define XNOISE_TAG_TITLE_EDITOR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_TAG_TITLE_EDITOR, XnoiseTagTitleEditorClass))
#define XNOISE_IS_TAG_TITLE_EDITOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_TAG_TITLE_EDITOR))
#define XNOISE_IS_TAG_TITLE_EDITOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_TAG_TITLE_EDITOR))
#define XNOISE_TAG_TITLE_EDITOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_TAG_TITLE_EDITOR, XnoiseTagTitleEditorClass))

typedef struct _XnoiseTagTitleEditor XnoiseTagTitleEditor;
typedef struct _XnoiseTagTitleEditorClass XnoiseTagTitleEditorClass;
typedef struct _XnoiseTagTitleEditorPrivate XnoiseTagTitleEditorPrivate;

#define XNOISE_TYPE_ITEM (xnoise_item_get_type ())
typedef struct _XnoiseItem XnoiseItem;

#define XNOISE_TYPE_HANDLER_PLAY_ITEM (xnoise_handler_play_item_get_type ())
#define XNOISE_HANDLER_PLAY_ITEM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_HANDLER_PLAY_ITEM, XnoiseHandlerPlayItem))
#define XNOISE_HANDLER_PLAY_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_HANDLER_PLAY_ITEM, XnoiseHandlerPlayItemClass))
#define XNOISE_IS_HANDLER_PLAY_ITEM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_HANDLER_PLAY_ITEM))
#define XNOISE_IS_HANDLER_PLAY_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_HANDLER_PLAY_ITEM))
#define XNOISE_HANDLER_PLAY_ITEM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_HANDLER_PLAY_ITEM, XnoiseHandlerPlayItemClass))

typedef struct _XnoiseHandlerPlayItem XnoiseHandlerPlayItem;
typedef struct _XnoiseHandlerPlayItemClass XnoiseHandlerPlayItemClass;
typedef struct _XnoiseHandlerPlayItemPrivate XnoiseHandlerPlayItemPrivate;

#define XNOISE_TYPE_HANDLER_REMOVE_TRACK (xnoise_handler_remove_track_get_type ())
#define XNOISE_HANDLER_REMOVE_TRACK(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_HANDLER_REMOVE_TRACK, XnoiseHandlerRemoveTrack))
#define XNOISE_HANDLER_REMOVE_TRACK_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_HANDLER_REMOVE_TRACK, XnoiseHandlerRemoveTrackClass))
#define XNOISE_IS_HANDLER_REMOVE_TRACK(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_HANDLER_REMOVE_TRACK))
#define XNOISE_IS_HANDLER_REMOVE_TRACK_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_HANDLER_REMOVE_TRACK))
#define XNOISE_HANDLER_REMOVE_TRACK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_HANDLER_REMOVE_TRACK, XnoiseHandlerRemoveTrackClass))

typedef struct _XnoiseHandlerRemoveTrack XnoiseHandlerRemoveTrack;
typedef struct _XnoiseHandlerRemoveTrackClass XnoiseHandlerRemoveTrackClass;
typedef struct _XnoiseHandlerRemoveTrackPrivate XnoiseHandlerRemoveTrackPrivate;

#define XNOISE_TYPE_ITEM_CONVERTER (xnoise_item_converter_get_type ())
#define XNOISE_ITEM_CONVERTER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_ITEM_CONVERTER, XnoiseItemConverter))
#define XNOISE_ITEM_CONVERTER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_ITEM_CONVERTER, XnoiseItemConverterClass))
#define XNOISE_IS_ITEM_CONVERTER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_ITEM_CONVERTER))
#define XNOISE_IS_ITEM_CONVERTER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_ITEM_CONVERTER))
#define XNOISE_ITEM_CONVERTER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_ITEM_CONVERTER, XnoiseItemConverterClass))

typedef struct _XnoiseItemConverter XnoiseItemConverter;
typedef struct _XnoiseItemConverterClass XnoiseItemConverterClass;
typedef struct _XnoiseItemConverterPrivate XnoiseItemConverterPrivate;

#define XNOISE_TYPE_TRACK_DATA (xnoise_track_data_get_type ())
#define XNOISE_TRACK_DATA(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_TRACK_DATA, XnoiseTrackData))
#define XNOISE_TRACK_DATA_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_TRACK_DATA, XnoiseTrackDataClass))
#define XNOISE_IS_TRACK_DATA(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_TRACK_DATA))
#define XNOISE_IS_TRACK_DATA_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_TRACK_DATA))
#define XNOISE_TRACK_DATA_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_TRACK_DATA, XnoiseTrackDataClass))

typedef struct _XnoiseTrackData XnoiseTrackData;
typedef struct _XnoiseTrackDataClass XnoiseTrackDataClass;
typedef struct _XnoiseItemHandlerManagerPrivate XnoiseItemHandlerManagerPrivate;

#define XNOISE_DATABASE_TYPE_DB_BROWSER (xnoise_database_db_browser_get_type ())
#define XNOISE_DATABASE_DB_BROWSER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_DATABASE_TYPE_DB_BROWSER, XnoiseDatabaseDbBrowser))
#define XNOISE_DATABASE_DB_BROWSER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_DATABASE_TYPE_DB_BROWSER, XnoiseDatabaseDbBrowserClass))
#define XNOISE_DATABASE_IS_DB_BROWSER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_DATABASE_TYPE_DB_BROWSER))
#define XNOISE_DATABASE_IS_DB_BROWSER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_DATABASE_TYPE_DB_BROWSER))
#define XNOISE_DATABASE_DB_BROWSER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_DATABASE_TYPE_DB_BROWSER, XnoiseDatabaseDbBrowserClass))

typedef struct _XnoiseDatabaseDbBrowser XnoiseDatabaseDbBrowser;
typedef struct _XnoiseDatabaseDbBrowserClass XnoiseDatabaseDbBrowserClass;
typedef struct _XnoiseDatabaseDbBrowserPrivate XnoiseDatabaseDbBrowserPrivate;

#define XNOISE_TYPE_STREAM_DATA (xnoise_stream_data_get_type ())
typedef struct _XnoiseStreamData XnoiseStreamData;

#define XNOISE_DATABASE_TYPE_DB_WRITER (xnoise_database_db_writer_get_type ())
#define XNOISE_DATABASE_DB_WRITER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_DATABASE_TYPE_DB_WRITER, XnoiseDatabaseDbWriter))
#define XNOISE_DATABASE_DB_WRITER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_DATABASE_TYPE_DB_WRITER, XnoiseDatabaseDbWriterClass))
#define XNOISE_DATABASE_IS_DB_WRITER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_DATABASE_TYPE_DB_WRITER))
#define XNOISE_DATABASE_IS_DB_WRITER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_DATABASE_TYPE_DB_WRITER))
#define XNOISE_DATABASE_DB_WRITER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_DATABASE_TYPE_DB_WRITER, XnoiseDatabaseDbWriterClass))

typedef struct _XnoiseDatabaseDbWriter XnoiseDatabaseDbWriter;
typedef struct _XnoiseDatabaseDbWriterClass XnoiseDatabaseDbWriterClass;
typedef struct _XnoiseDatabaseDbWriterPrivate XnoiseDatabaseDbWriterPrivate;

#define XNOISE_DATABASE_DB_WRITER_TYPE_CHANGE_TYPE (xnoise_database_db_writer_change_type_get_type ())

#define XNOISE_TYPE_MEDIA_BROWSER_MODEL (xnoise_media_browser_model_get_type ())
#define XNOISE_MEDIA_BROWSER_MODEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_MEDIA_BROWSER_MODEL, XnoiseMediaBrowserModel))
#define XNOISE_MEDIA_BROWSER_MODEL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_MEDIA_BROWSER_MODEL, XnoiseMediaBrowserModelClass))
#define XNOISE_IS_MEDIA_BROWSER_MODEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_MEDIA_BROWSER_MODEL))
#define XNOISE_IS_MEDIA_BROWSER_MODEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_MEDIA_BROWSER_MODEL))
#define XNOISE_MEDIA_BROWSER_MODEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_MEDIA_BROWSER_MODEL, XnoiseMediaBrowserModelClass))

typedef struct _XnoiseMediaBrowserModel XnoiseMediaBrowserModel;
typedef struct _XnoiseMediaBrowserModelClass XnoiseMediaBrowserModelClass;

#define XNOISE_WORKER_TYPE_JOB (xnoise_worker_job_get_type ())
#define XNOISE_WORKER_JOB(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_WORKER_TYPE_JOB, XnoiseWorkerJob))
#define XNOISE_WORKER_JOB_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_WORKER_TYPE_JOB, XnoiseWorkerJobClass))
#define XNOISE_WORKER_IS_JOB(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_WORKER_TYPE_JOB))
#define XNOISE_WORKER_IS_JOB_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_WORKER_TYPE_JOB))
#define XNOISE_WORKER_JOB_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_WORKER_TYPE_JOB, XnoiseWorkerJobClass))

typedef struct _XnoiseWorkerJob XnoiseWorkerJob;
typedef struct _XnoiseWorkerJobClass XnoiseWorkerJobClass;

#define XNOISE_TYPE_ILYRICS (xnoise_ilyrics_get_type ())
#define XNOISE_ILYRICS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_ILYRICS, XnoiseILyrics))
#define XNOISE_IS_ILYRICS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_ILYRICS))
#define XNOISE_ILYRICS_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), XNOISE_TYPE_ILYRICS, XnoiseILyricsIface))

typedef struct _XnoiseILyrics XnoiseILyrics;
typedef struct _XnoiseILyricsIface XnoiseILyricsIface;

#define XNOISE_PLUGIN_MODULE_TYPE_IPLUGIN (xnoise_plugin_module_iplugin_get_type ())
#define XNOISE_PLUGIN_MODULE_IPLUGIN(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_PLUGIN_MODULE_TYPE_IPLUGIN, XnoisePluginModuleIPlugin))
#define XNOISE_PLUGIN_MODULE_IS_IPLUGIN(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_PLUGIN_MODULE_TYPE_IPLUGIN))
#define XNOISE_PLUGIN_MODULE_IPLUGIN_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), XNOISE_PLUGIN_MODULE_TYPE_IPLUGIN, XnoisePluginModuleIPluginIface))

typedef struct _XnoisePluginModuleIPlugin XnoisePluginModuleIPlugin;
typedef struct _XnoisePluginModuleIPluginIface XnoisePluginModuleIPluginIface;

#define XNOISE_PLUGIN_MODULE_TYPE_CONTAINER (xnoise_plugin_module_container_get_type ())
#define XNOISE_PLUGIN_MODULE_CONTAINER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_PLUGIN_MODULE_TYPE_CONTAINER, XnoisePluginModuleContainer))
#define XNOISE_PLUGIN_MODULE_CONTAINER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_PLUGIN_MODULE_TYPE_CONTAINER, XnoisePluginModuleContainerClass))
#define XNOISE_PLUGIN_MODULE_IS_CONTAINER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_PLUGIN_MODULE_TYPE_CONTAINER))
#define XNOISE_PLUGIN_MODULE_IS_CONTAINER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_PLUGIN_MODULE_TYPE_CONTAINER))
#define XNOISE_PLUGIN_MODULE_CONTAINER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_PLUGIN_MODULE_TYPE_CONTAINER, XnoisePluginModuleContainerClass))

typedef struct _XnoisePluginModuleContainer XnoisePluginModuleContainer;
typedef struct _XnoisePluginModuleContainerClass XnoisePluginModuleContainerClass;

#define XNOISE_TYPE_ILYRICS_PROVIDER (xnoise_ilyrics_provider_get_type ())
#define XNOISE_ILYRICS_PROVIDER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_ILYRICS_PROVIDER, XnoiseILyricsProvider))
#define XNOISE_IS_ILYRICS_PROVIDER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_ILYRICS_PROVIDER))
#define XNOISE_ILYRICS_PROVIDER_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), XNOISE_TYPE_ILYRICS_PROVIDER, XnoiseILyricsProviderIface))

typedef struct _XnoiseILyricsProvider XnoiseILyricsProvider;
typedef struct _XnoiseILyricsProviderIface XnoiseILyricsProviderIface;

#define XNOISE_TYPE_LYRICS_LOADER (xnoise_lyrics_loader_get_type ())
#define XNOISE_LYRICS_LOADER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_LYRICS_LOADER, XnoiseLyricsLoader))
#define XNOISE_LYRICS_LOADER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_LYRICS_LOADER, XnoiseLyricsLoaderClass))
#define XNOISE_IS_LYRICS_LOADER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_LYRICS_LOADER))
#define XNOISE_IS_LYRICS_LOADER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_LYRICS_LOADER))
#define XNOISE_LYRICS_LOADER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_LYRICS_LOADER, XnoiseLyricsLoaderClass))

typedef struct _XnoiseLyricsLoader XnoiseLyricsLoader;
typedef struct _XnoiseLyricsLoaderClass XnoiseLyricsLoaderClass;
typedef struct _XnoiseLyricsLoaderPrivate XnoiseLyricsLoaderPrivate;

#define XNOISE_TYPE_LYRICS_VIEW (xnoise_lyrics_view_get_type ())
#define XNOISE_LYRICS_VIEW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_LYRICS_VIEW, XnoiseLyricsView))
#define XNOISE_LYRICS_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_LYRICS_VIEW, XnoiseLyricsViewClass))
#define XNOISE_IS_LYRICS_VIEW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_LYRICS_VIEW))
#define XNOISE_IS_LYRICS_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_LYRICS_VIEW))
#define XNOISE_LYRICS_VIEW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_LYRICS_VIEW, XnoiseLyricsViewClass))

typedef struct _XnoiseLyricsView XnoiseLyricsView;
typedef struct _XnoiseLyricsViewClass XnoiseLyricsViewClass;
typedef struct _XnoiseLyricsViewPrivate XnoiseLyricsViewPrivate;

#define XNOISE_TYPE_IPARAMS (xnoise_iparams_get_type ())
#define XNOISE_IPARAMS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_IPARAMS, XnoiseIParams))
#define XNOISE_IS_IPARAMS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_IPARAMS))
#define XNOISE_IPARAMS_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), XNOISE_TYPE_IPARAMS, XnoiseIParamsIface))

typedef struct _XnoiseIParams XnoiseIParams;
typedef struct _XnoiseIParamsIface XnoiseIParamsIface;

#define XNOISE_TYPE_MEDIA_BROWSER (xnoise_media_browser_get_type ())
#define XNOISE_MEDIA_BROWSER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_MEDIA_BROWSER, XnoiseMediaBrowser))
#define XNOISE_MEDIA_BROWSER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_MEDIA_BROWSER, XnoiseMediaBrowserClass))
#define XNOISE_IS_MEDIA_BROWSER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_MEDIA_BROWSER))
#define XNOISE_IS_MEDIA_BROWSER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_MEDIA_BROWSER))
#define XNOISE_MEDIA_BROWSER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_MEDIA_BROWSER, XnoiseMediaBrowserClass))

typedef struct _XnoiseMediaBrowser XnoiseMediaBrowser;
typedef struct _XnoiseMediaBrowserClass XnoiseMediaBrowserClass;
typedef struct _XnoiseMediaBrowserPrivate XnoiseMediaBrowserPrivate;
typedef struct _XnoiseMediaBrowserModelPrivate XnoiseMediaBrowserModelPrivate;

#define XNOISE_MEDIA_BROWSER_MODEL_TYPE_TRACK_SORTING (xnoise_media_browser_model_track_sorting_get_type ())

#define XNOISE_MEDIA_BROWSER_MODEL_TYPE_COLUMN (xnoise_media_browser_model_column_get_type ())

#define XNOISE_MEDIA_BROWSER_MODEL_TYPE_COLLECTION_TYPE (xnoise_media_browser_model_collection_type_get_type ())

#define XNOISE_TYPE_DND_DATA (xnoise_dnd_data_get_type ())
typedef struct _XnoiseDndData XnoiseDndData;

#define XNOISE_TYPE_PARAMS (xnoise_params_get_type ())
#define XNOISE_PARAMS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_PARAMS, XnoiseParams))
#define XNOISE_PARAMS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_PARAMS, XnoiseParamsClass))
#define XNOISE_IS_PARAMS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_PARAMS))
#define XNOISE_IS_PARAMS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_PARAMS))
#define XNOISE_PARAMS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_PARAMS, XnoiseParamsClass))

typedef struct _XnoiseParams XnoiseParams;
typedef struct _XnoiseParamsClass XnoiseParamsClass;
typedef struct _XnoiseParamsPrivate XnoiseParamsPrivate;

#define XNOISE_TYPE_GST_PLAYER (xnoise_gst_player_get_type ())
#define XNOISE_GST_PLAYER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_GST_PLAYER, XnoiseGstPlayer))
#define XNOISE_GST_PLAYER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_GST_PLAYER, XnoiseGstPlayerClass))
#define XNOISE_IS_GST_PLAYER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_GST_PLAYER))
#define XNOISE_IS_GST_PLAYER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_GST_PLAYER))
#define XNOISE_GST_PLAYER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_GST_PLAYER, XnoiseGstPlayerClass))

typedef struct _XnoiseGstPlayer XnoiseGstPlayer;
typedef struct _XnoiseGstPlayerClass XnoiseGstPlayerClass;
typedef struct _XnoiseGstPlayerPrivate XnoiseGstPlayerPrivate;

#define XNOISE_TYPE_VIDEO_SCREEN (xnoise_video_screen_get_type ())
#define XNOISE_VIDEO_SCREEN(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_VIDEO_SCREEN, XnoiseVideoScreen))
#define XNOISE_VIDEO_SCREEN_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_VIDEO_SCREEN, XnoiseVideoScreenClass))
#define XNOISE_IS_VIDEO_SCREEN(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_VIDEO_SCREEN))
#define XNOISE_IS_VIDEO_SCREEN_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_VIDEO_SCREEN))
#define XNOISE_VIDEO_SCREEN_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_VIDEO_SCREEN, XnoiseVideoScreenClass))

typedef struct _XnoiseVideoScreen XnoiseVideoScreen;
typedef struct _XnoiseVideoScreenClass XnoiseVideoScreenClass;

#define XNOISE_PLAYLIST_TYPE_LIST_TYPE (xnoise_playlist_list_type_get_type ())

#define XNOISE_PLAYLIST_TYPE_RESULT (xnoise_playlist_result_get_type ())

#define XNOISE_PLAYLIST_TYPE_TARGET_TYPE (xnoise_playlist_target_type_get_type ())

#define XNOISE_PLAYLIST_TYPE_ENTRY (xnoise_playlist_entry_get_type ())
#define XNOISE_PLAYLIST_ENTRY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_PLAYLIST_TYPE_ENTRY, XnoisePlaylistEntry))
#define XNOISE_PLAYLIST_ENTRY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_PLAYLIST_TYPE_ENTRY, XnoisePlaylistEntryClass))
#define XNOISE_PLAYLIST_IS_ENTRY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_PLAYLIST_TYPE_ENTRY))
#define XNOISE_PLAYLIST_IS_ENTRY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_PLAYLIST_TYPE_ENTRY))
#define XNOISE_PLAYLIST_ENTRY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_PLAYLIST_TYPE_ENTRY, XnoisePlaylistEntryClass))

typedef struct _XnoisePlaylistEntry XnoisePlaylistEntry;
typedef struct _XnoisePlaylistEntryClass XnoisePlaylistEntryClass;
typedef struct _XnoisePlaylistEntryPrivate XnoisePlaylistEntryPrivate;

#define XNOISE_PLAYLIST_ENTRY_TYPE_FIELD (xnoise_playlist_entry_field_get_type ())

#define XNOISE_PLAYLIST_TYPE_ENTRY_COLLECTION (xnoise_playlist_entry_collection_get_type ())
#define XNOISE_PLAYLIST_ENTRY_COLLECTION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_PLAYLIST_TYPE_ENTRY_COLLECTION, XnoisePlaylistEntryCollection))
#define XNOISE_PLAYLIST_ENTRY_COLLECTION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_PLAYLIST_TYPE_ENTRY_COLLECTION, XnoisePlaylistEntryCollectionClass))
#define XNOISE_PLAYLIST_IS_ENTRY_COLLECTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_PLAYLIST_TYPE_ENTRY_COLLECTION))
#define XNOISE_PLAYLIST_IS_ENTRY_COLLECTION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_PLAYLIST_TYPE_ENTRY_COLLECTION))
#define XNOISE_PLAYLIST_ENTRY_COLLECTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_PLAYLIST_TYPE_ENTRY_COLLECTION, XnoisePlaylistEntryCollectionClass))

typedef struct _XnoisePlaylistEntryCollection XnoisePlaylistEntryCollection;
typedef struct _XnoisePlaylistEntryCollectionClass XnoisePlaylistEntryCollectionClass;
typedef struct _XnoisePlaylistEntryCollectionPrivate XnoisePlaylistEntryCollectionPrivate;

#define XNOISE_PLAYLIST_ENTRY_COLLECTION_TYPE_ITERATOR (xnoise_playlist_entry_collection_iterator_get_type ())
#define XNOISE_PLAYLIST_ENTRY_COLLECTION_ITERATOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_PLAYLIST_ENTRY_COLLECTION_TYPE_ITERATOR, XnoisePlaylistEntryCollectionIterator))
#define XNOISE_PLAYLIST_ENTRY_COLLECTION_ITERATOR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_PLAYLIST_ENTRY_COLLECTION_TYPE_ITERATOR, XnoisePlaylistEntryCollectionIteratorClass))
#define XNOISE_PLAYLIST_ENTRY_COLLECTION_IS_ITERATOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_PLAYLIST_ENTRY_COLLECTION_TYPE_ITERATOR))
#define XNOISE_PLAYLIST_ENTRY_COLLECTION_IS_ITERATOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_PLAYLIST_ENTRY_COLLECTION_TYPE_ITERATOR))
#define XNOISE_PLAYLIST_ENTRY_COLLECTION_ITERATOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_PLAYLIST_ENTRY_COLLECTION_TYPE_ITERATOR, XnoisePlaylistEntryCollectionIteratorClass))

typedef struct _XnoisePlaylistEntryCollectionIterator XnoisePlaylistEntryCollectionIterator;
typedef struct _XnoisePlaylistEntryCollectionIteratorClass XnoisePlaylistEntryCollectionIteratorClass;
typedef struct _XnoisePlaylistEntryCollectionIteratorPrivate XnoisePlaylistEntryCollectionIteratorPrivate;

#define XNOISE_PLAYLIST_TYPE_READER (xnoise_playlist_reader_get_type ())
#define XNOISE_PLAYLIST_READER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_PLAYLIST_TYPE_READER, XnoisePlaylistReader))
#define XNOISE_PLAYLIST_READER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_PLAYLIST_TYPE_READER, XnoisePlaylistReaderClass))
#define XNOISE_PLAYLIST_IS_READER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_PLAYLIST_TYPE_READER))
#define XNOISE_PLAYLIST_IS_READER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_PLAYLIST_TYPE_READER))
#define XNOISE_PLAYLIST_READER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_PLAYLIST_TYPE_READER, XnoisePlaylistReaderClass))

typedef struct _XnoisePlaylistReader XnoisePlaylistReader;
typedef struct _XnoisePlaylistReaderClass XnoisePlaylistReaderClass;
typedef struct _XnoisePlaylistReaderPrivate XnoisePlaylistReaderPrivate;
typedef struct _XnoisePluginModuleContainerPrivate XnoisePluginModuleContainerPrivate;

#define XNOISE_PLUGIN_MODULE_TYPE_INFORMATION (xnoise_plugin_module_information_get_type ())
#define XNOISE_PLUGIN_MODULE_INFORMATION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_PLUGIN_MODULE_TYPE_INFORMATION, XnoisePluginModuleInformation))
#define XNOISE_PLUGIN_MODULE_INFORMATION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_PLUGIN_MODULE_TYPE_INFORMATION, XnoisePluginModuleInformationClass))
#define XNOISE_PLUGIN_MODULE_IS_INFORMATION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_PLUGIN_MODULE_TYPE_INFORMATION))
#define XNOISE_PLUGIN_MODULE_IS_INFORMATION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_PLUGIN_MODULE_TYPE_INFORMATION))
#define XNOISE_PLUGIN_MODULE_INFORMATION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_PLUGIN_MODULE_TYPE_INFORMATION, XnoisePluginModuleInformationClass))

typedef struct _XnoisePluginModuleInformation XnoisePluginModuleInformation;
typedef struct _XnoisePluginModuleInformationClass XnoisePluginModuleInformationClass;

#define XNOISE_PLUGIN_MODULE_TYPE_LOADER (xnoise_plugin_module_loader_get_type ())
#define XNOISE_PLUGIN_MODULE_LOADER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_PLUGIN_MODULE_TYPE_LOADER, XnoisePluginModuleLoader))
#define XNOISE_PLUGIN_MODULE_LOADER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_PLUGIN_MODULE_TYPE_LOADER, XnoisePluginModuleLoaderClass))
#define XNOISE_PLUGIN_MODULE_IS_LOADER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_PLUGIN_MODULE_TYPE_LOADER))
#define XNOISE_PLUGIN_MODULE_IS_LOADER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_PLUGIN_MODULE_TYPE_LOADER))
#define XNOISE_PLUGIN_MODULE_LOADER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_PLUGIN_MODULE_TYPE_LOADER, XnoisePluginModuleLoaderClass))

typedef struct _XnoisePluginModuleLoader XnoisePluginModuleLoader;
typedef struct _XnoisePluginModuleLoaderClass XnoisePluginModuleLoaderClass;
typedef struct _XnoisePluginModuleLoaderPrivate XnoisePluginModuleLoaderPrivate;
typedef struct _XnoisePluginModuleInformationPrivate XnoisePluginModuleInformationPrivate;

#define XNOISE_TYPE_REMOTE_SCHEMES (xnoise_remote_schemes_get_type ())
#define XNOISE_REMOTE_SCHEMES(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_REMOTE_SCHEMES, XnoiseRemoteSchemes))
#define XNOISE_REMOTE_SCHEMES_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_REMOTE_SCHEMES, XnoiseRemoteSchemesClass))
#define XNOISE_IS_REMOTE_SCHEMES(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_REMOTE_SCHEMES))
#define XNOISE_IS_REMOTE_SCHEMES_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_REMOTE_SCHEMES))
#define XNOISE_REMOTE_SCHEMES_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_REMOTE_SCHEMES, XnoiseRemoteSchemesClass))

typedef struct _XnoiseRemoteSchemes XnoiseRemoteSchemes;
typedef struct _XnoiseRemoteSchemesClass XnoiseRemoteSchemesClass;

#define XNOISE_TYPE_LOCAL_SCHEMES (xnoise_local_schemes_get_type ())
#define XNOISE_LOCAL_SCHEMES(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_LOCAL_SCHEMES, XnoiseLocalSchemes))
#define XNOISE_LOCAL_SCHEMES_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_LOCAL_SCHEMES, XnoiseLocalSchemesClass))
#define XNOISE_IS_LOCAL_SCHEMES(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_LOCAL_SCHEMES))
#define XNOISE_IS_LOCAL_SCHEMES_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_LOCAL_SCHEMES))
#define XNOISE_LOCAL_SCHEMES_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_LOCAL_SCHEMES, XnoiseLocalSchemesClass))

typedef struct _XnoiseLocalSchemes XnoiseLocalSchemes;
typedef struct _XnoiseLocalSchemesClass XnoiseLocalSchemesClass;

#define XNOISE_TYPE_MEDIA_EXTENSIONS (xnoise_media_extensions_get_type ())
#define XNOISE_MEDIA_EXTENSIONS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_MEDIA_EXTENSIONS, XnoiseMediaExtensions))
#define XNOISE_MEDIA_EXTENSIONS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_MEDIA_EXTENSIONS, XnoiseMediaExtensionsClass))
#define XNOISE_IS_MEDIA_EXTENSIONS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_MEDIA_EXTENSIONS))
#define XNOISE_IS_MEDIA_EXTENSIONS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_MEDIA_EXTENSIONS))
#define XNOISE_MEDIA_EXTENSIONS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_MEDIA_EXTENSIONS, XnoiseMediaExtensionsClass))

typedef struct _XnoiseMediaExtensions XnoiseMediaExtensions;
typedef struct _XnoiseMediaExtensionsClass XnoiseMediaExtensionsClass;

#define XNOISE_TYPE_PLUGIN_MANAGER_TREE (xnoise_plugin_manager_tree_get_type ())
#define XNOISE_PLUGIN_MANAGER_TREE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_PLUGIN_MANAGER_TREE, XnoisePluginManagerTree))
#define XNOISE_PLUGIN_MANAGER_TREE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_PLUGIN_MANAGER_TREE, XnoisePluginManagerTreeClass))
#define XNOISE_IS_PLUGIN_MANAGER_TREE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_PLUGIN_MANAGER_TREE))
#define XNOISE_IS_PLUGIN_MANAGER_TREE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_PLUGIN_MANAGER_TREE))
#define XNOISE_PLUGIN_MANAGER_TREE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_PLUGIN_MANAGER_TREE, XnoisePluginManagerTreeClass))

typedef struct _XnoisePluginManagerTree XnoisePluginManagerTree;
typedef struct _XnoisePluginManagerTreeClass XnoisePluginManagerTreeClass;
typedef struct _XnoisePluginManagerTreePrivate XnoisePluginManagerTreePrivate;

#define XNOISE_TYPE_SETTINGS_DIALOG (xnoise_settings_dialog_get_type ())
#define XNOISE_SETTINGS_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_SETTINGS_DIALOG, XnoiseSettingsDialog))
#define XNOISE_SETTINGS_DIALOG_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_SETTINGS_DIALOG, XnoiseSettingsDialogClass))
#define XNOISE_IS_SETTINGS_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_SETTINGS_DIALOG))
#define XNOISE_IS_SETTINGS_DIALOG_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_SETTINGS_DIALOG))
#define XNOISE_SETTINGS_DIALOG_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_SETTINGS_DIALOG, XnoiseSettingsDialogClass))

typedef struct _XnoiseSettingsDialog XnoiseSettingsDialog;
typedef struct _XnoiseSettingsDialogClass XnoiseSettingsDialogClass;
typedef struct _XnoiseSettingsDialogPrivate XnoiseSettingsDialogPrivate;

#define XNOISE_SIMPLE_MARKUP_TYPE_NODE (xnoise_simple_markup_node_get_type ())
#define XNOISE_SIMPLE_MARKUP_NODE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_SIMPLE_MARKUP_TYPE_NODE, XnoiseSimpleMarkupNode))
#define XNOISE_SIMPLE_MARKUP_NODE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_SIMPLE_MARKUP_TYPE_NODE, XnoiseSimpleMarkupNodeClass))
#define XNOISE_SIMPLE_MARKUP_IS_NODE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_SIMPLE_MARKUP_TYPE_NODE))
#define XNOISE_SIMPLE_MARKUP_IS_NODE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_SIMPLE_MARKUP_TYPE_NODE))
#define XNOISE_SIMPLE_MARKUP_NODE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_SIMPLE_MARKUP_TYPE_NODE, XnoiseSimpleMarkupNodeClass))

typedef struct _XnoiseSimpleMarkupNode XnoiseSimpleMarkupNode;
typedef struct _XnoiseSimpleMarkupNodeClass XnoiseSimpleMarkupNodeClass;
typedef struct _XnoiseSimpleMarkupNodePrivate XnoiseSimpleMarkupNodePrivate;

#define XNOISE_SIMPLE_MARKUP_NODE_TYPE_ATTRIBUTES (xnoise_simple_markup_node_attributes_get_type ())
#define XNOISE_SIMPLE_MARKUP_NODE_ATTRIBUTES(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_SIMPLE_MARKUP_NODE_TYPE_ATTRIBUTES, XnoiseSimpleMarkupNodeAttributes))
#define XNOISE_SIMPLE_MARKUP_NODE_ATTRIBUTES_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_SIMPLE_MARKUP_NODE_TYPE_ATTRIBUTES, XnoiseSimpleMarkupNodeAttributesClass))
#define XNOISE_SIMPLE_MARKUP_NODE_IS_ATTRIBUTES(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_SIMPLE_MARKUP_NODE_TYPE_ATTRIBUTES))
#define XNOISE_SIMPLE_MARKUP_NODE_IS_ATTRIBUTES_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_SIMPLE_MARKUP_NODE_TYPE_ATTRIBUTES))
#define XNOISE_SIMPLE_MARKUP_NODE_ATTRIBUTES_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_SIMPLE_MARKUP_NODE_TYPE_ATTRIBUTES, XnoiseSimpleMarkupNodeAttributesClass))

typedef struct _XnoiseSimpleMarkupNodeAttributes XnoiseSimpleMarkupNodeAttributes;
typedef struct _XnoiseSimpleMarkupNodeAttributesClass XnoiseSimpleMarkupNodeAttributesClass;

#define XNOISE_SIMPLE_MARKUP_NODE_TYPE_ITERATOR (xnoise_simple_markup_node_iterator_get_type ())
#define XNOISE_SIMPLE_MARKUP_NODE_ITERATOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_SIMPLE_MARKUP_NODE_TYPE_ITERATOR, XnoiseSimpleMarkupNodeIterator))
#define XNOISE_SIMPLE_MARKUP_NODE_ITERATOR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_SIMPLE_MARKUP_NODE_TYPE_ITERATOR, XnoiseSimpleMarkupNodeIteratorClass))
#define XNOISE_SIMPLE_MARKUP_NODE_IS_ITERATOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_SIMPLE_MARKUP_NODE_TYPE_ITERATOR))
#define XNOISE_SIMPLE_MARKUP_NODE_IS_ITERATOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_SIMPLE_MARKUP_NODE_TYPE_ITERATOR))
#define XNOISE_SIMPLE_MARKUP_NODE_ITERATOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_SIMPLE_MARKUP_NODE_TYPE_ITERATOR, XnoiseSimpleMarkupNodeIteratorClass))

typedef struct _XnoiseSimpleMarkupNodeIterator XnoiseSimpleMarkupNodeIterator;
typedef struct _XnoiseSimpleMarkupNodeIteratorClass XnoiseSimpleMarkupNodeIteratorClass;
typedef struct _XnoiseSimpleMarkupNodeAttributesPrivate XnoiseSimpleMarkupNodeAttributesPrivate;

#define XNOISE_SIMPLE_MARKUP_NODE_ATTRIBUTES_TYPE_KEYS (xnoise_simple_markup_node_attributes_keys_get_type ())
#define XNOISE_SIMPLE_MARKUP_NODE_ATTRIBUTES_KEYS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_SIMPLE_MARKUP_NODE_ATTRIBUTES_TYPE_KEYS, XnoiseSimpleMarkupNodeAttributesKeys))
#define XNOISE_SIMPLE_MARKUP_NODE_ATTRIBUTES_KEYS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_SIMPLE_MARKUP_NODE_ATTRIBUTES_TYPE_KEYS, XnoiseSimpleMarkupNodeAttributesKeysClass))
#define XNOISE_SIMPLE_MARKUP_NODE_ATTRIBUTES_IS_KEYS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_SIMPLE_MARKUP_NODE_ATTRIBUTES_TYPE_KEYS))
#define XNOISE_SIMPLE_MARKUP_NODE_ATTRIBUTES_IS_KEYS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_SIMPLE_MARKUP_NODE_ATTRIBUTES_TYPE_KEYS))
#define XNOISE_SIMPLE_MARKUP_NODE_ATTRIBUTES_KEYS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_SIMPLE_MARKUP_NODE_ATTRIBUTES_TYPE_KEYS, XnoiseSimpleMarkupNodeAttributesKeysClass))

typedef struct _XnoiseSimpleMarkupNodeAttributesKeys XnoiseSimpleMarkupNodeAttributesKeys;
typedef struct _XnoiseSimpleMarkupNodeAttributesKeysClass XnoiseSimpleMarkupNodeAttributesKeysClass;
typedef struct _XnoiseSimpleMarkupNodeAttributesKeysPrivate XnoiseSimpleMarkupNodeAttributesKeysPrivate;

#define XNOISE_SIMPLE_MARKUP_NODE_ATTRIBUTES_KEYS_TYPE_ITERATOR (xnoise_simple_markup_node_attributes_keys_iterator_get_type ())
#define XNOISE_SIMPLE_MARKUP_NODE_ATTRIBUTES_KEYS_ITERATOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_SIMPLE_MARKUP_NODE_ATTRIBUTES_KEYS_TYPE_ITERATOR, XnoiseSimpleMarkupNodeAttributesKeysIterator))
#define XNOISE_SIMPLE_MARKUP_NODE_ATTRIBUTES_KEYS_ITERATOR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_SIMPLE_MARKUP_NODE_ATTRIBUTES_KEYS_TYPE_ITERATOR, XnoiseSimpleMarkupNodeAttributesKeysIteratorClass))
#define XNOISE_SIMPLE_MARKUP_NODE_ATTRIBUTES_KEYS_IS_ITERATOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_SIMPLE_MARKUP_NODE_ATTRIBUTES_KEYS_TYPE_ITERATOR))
#define XNOISE_SIMPLE_MARKUP_NODE_ATTRIBUTES_KEYS_IS_ITERATOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_SIMPLE_MARKUP_NODE_ATTRIBUTES_KEYS_TYPE_ITERATOR))
#define XNOISE_SIMPLE_MARKUP_NODE_ATTRIBUTES_KEYS_ITERATOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_SIMPLE_MARKUP_NODE_ATTRIBUTES_KEYS_TYPE_ITERATOR, XnoiseSimpleMarkupNodeAttributesKeysIteratorClass))

typedef struct _XnoiseSimpleMarkupNodeAttributesKeysIterator XnoiseSimpleMarkupNodeAttributesKeysIterator;
typedef struct _XnoiseSimpleMarkupNodeAttributesKeysIteratorClass XnoiseSimpleMarkupNodeAttributesKeysIteratorClass;
typedef struct _XnoiseSimpleMarkupNodeAttributesKeysIteratorPrivate XnoiseSimpleMarkupNodeAttributesKeysIteratorPrivate;
typedef struct _XnoiseSimpleMarkupNodeIteratorPrivate XnoiseSimpleMarkupNodeIteratorPrivate;

#define XNOISE_SIMPLE_MARKUP_TYPE_READER (xnoise_simple_markup_reader_get_type ())
#define XNOISE_SIMPLE_MARKUP_READER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_SIMPLE_MARKUP_TYPE_READER, XnoiseSimpleMarkupReader))
#define XNOISE_SIMPLE_MARKUP_READER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_SIMPLE_MARKUP_TYPE_READER, XnoiseSimpleMarkupReaderClass))
#define XNOISE_SIMPLE_MARKUP_IS_READER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_SIMPLE_MARKUP_TYPE_READER))
#define XNOISE_SIMPLE_MARKUP_IS_READER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_SIMPLE_MARKUP_TYPE_READER))
#define XNOISE_SIMPLE_MARKUP_READER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_SIMPLE_MARKUP_TYPE_READER, XnoiseSimpleMarkupReaderClass))

typedef struct _XnoiseSimpleMarkupReader XnoiseSimpleMarkupReader;
typedef struct _XnoiseSimpleMarkupReaderClass XnoiseSimpleMarkupReaderClass;
typedef struct _XnoiseSimpleMarkupReaderPrivate XnoiseSimpleMarkupReaderPrivate;

#define XNOISE_SIMPLE_MARKUP_TYPE_WRITER (xnoise_simple_markup_writer_get_type ())
#define XNOISE_SIMPLE_MARKUP_WRITER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_SIMPLE_MARKUP_TYPE_WRITER, XnoiseSimpleMarkupWriter))
#define XNOISE_SIMPLE_MARKUP_WRITER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_SIMPLE_MARKUP_TYPE_WRITER, XnoiseSimpleMarkupWriterClass))
#define XNOISE_SIMPLE_MARKUP_IS_WRITER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_SIMPLE_MARKUP_TYPE_WRITER))
#define XNOISE_SIMPLE_MARKUP_IS_WRITER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_SIMPLE_MARKUP_TYPE_WRITER))
#define XNOISE_SIMPLE_MARKUP_WRITER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_SIMPLE_MARKUP_TYPE_WRITER, XnoiseSimpleMarkupWriterClass))

typedef struct _XnoiseSimpleMarkupWriter XnoiseSimpleMarkupWriter;
typedef struct _XnoiseSimpleMarkupWriterClass XnoiseSimpleMarkupWriterClass;
typedef struct _XnoiseSimpleMarkupWriterPrivate XnoiseSimpleMarkupWriterPrivate;

#define XNOISE_TAG_ACCESS_TYPE_TAG_READER (xnoise_tag_access_tag_reader_get_type ())
#define XNOISE_TAG_ACCESS_TAG_READER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TAG_ACCESS_TYPE_TAG_READER, XnoiseTagAccessTagReader))
#define XNOISE_TAG_ACCESS_TAG_READER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TAG_ACCESS_TYPE_TAG_READER, XnoiseTagAccessTagReaderClass))
#define XNOISE_TAG_ACCESS_IS_TAG_READER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TAG_ACCESS_TYPE_TAG_READER))
#define XNOISE_TAG_ACCESS_IS_TAG_READER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TAG_ACCESS_TYPE_TAG_READER))
#define XNOISE_TAG_ACCESS_TAG_READER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TAG_ACCESS_TYPE_TAG_READER, XnoiseTagAccessTagReaderClass))

typedef struct _XnoiseTagAccessTagReader XnoiseTagAccessTagReader;
typedef struct _XnoiseTagAccessTagReaderClass XnoiseTagAccessTagReaderClass;
typedef struct _XnoiseTagAccessTagReaderPrivate XnoiseTagAccessTagReaderPrivate;

#define XNOISE_TAG_ACCESS_TYPE_TAG_WRITER (xnoise_tag_access_tag_writer_get_type ())
#define XNOISE_TAG_ACCESS_TAG_WRITER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TAG_ACCESS_TYPE_TAG_WRITER, XnoiseTagAccessTagWriter))
#define XNOISE_TAG_ACCESS_TAG_WRITER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TAG_ACCESS_TYPE_TAG_WRITER, XnoiseTagAccessTagWriterClass))
#define XNOISE_TAG_ACCESS_IS_TAG_WRITER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TAG_ACCESS_TYPE_TAG_WRITER))
#define XNOISE_TAG_ACCESS_IS_TAG_WRITER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TAG_ACCESS_TYPE_TAG_WRITER))
#define XNOISE_TAG_ACCESS_TAG_WRITER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TAG_ACCESS_TYPE_TAG_WRITER, XnoiseTagAccessTagWriterClass))

typedef struct _XnoiseTagAccessTagWriter XnoiseTagAccessTagWriter;
typedef struct _XnoiseTagAccessTagWriterClass XnoiseTagAccessTagWriterClass;
typedef struct _XnoiseTagAccessTagWriterPrivate XnoiseTagAccessTagWriterPrivate;

#define XNOISE_TYPE_TRACK_LIST_COLUMN (xnoise_track_list_column_get_type ())
#define XNOISE_TRACK_LIST_COLUMN(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_TRACK_LIST_COLUMN, XnoiseTrackListColumn))
#define XNOISE_TRACK_LIST_COLUMN_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_TRACK_LIST_COLUMN, XnoiseTrackListColumnClass))
#define XNOISE_IS_TRACK_LIST_COLUMN(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_TRACK_LIST_COLUMN))
#define XNOISE_IS_TRACK_LIST_COLUMN_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_TRACK_LIST_COLUMN))
#define XNOISE_TRACK_LIST_COLUMN_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_TRACK_LIST_COLUMN, XnoiseTrackListColumnClass))

typedef struct _XnoiseTrackListColumn XnoiseTrackListColumn;
typedef struct _XnoiseTrackListColumnClass XnoiseTrackListColumnClass;
typedef struct _XnoiseTrackListColumnPrivate XnoiseTrackListColumnPrivate;

#define XNOISE_TYPE_TEXT_COLUMN (xnoise_text_column_get_type ())
#define XNOISE_TEXT_COLUMN(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_TEXT_COLUMN, XnoiseTextColumn))
#define XNOISE_TEXT_COLUMN_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_TEXT_COLUMN, XnoiseTextColumnClass))
#define XNOISE_IS_TEXT_COLUMN(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_TEXT_COLUMN))
#define XNOISE_IS_TEXT_COLUMN_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_TEXT_COLUMN))
#define XNOISE_TEXT_COLUMN_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_TEXT_COLUMN, XnoiseTextColumnClass))

typedef struct _XnoiseTextColumn XnoiseTextColumn;
typedef struct _XnoiseTextColumnClass XnoiseTextColumnClass;
typedef struct _XnoiseTextColumnPrivate XnoiseTextColumnPrivate;

#define XNOISE_TRACK_LIST_MODEL_TYPE_COLUMN (xnoise_track_list_model_column_get_type ())

#define XNOISE_TYPE_TRACK_LIST (xnoise_track_list_get_type ())
#define XNOISE_TRACK_LIST(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_TRACK_LIST, XnoiseTrackList))
#define XNOISE_TRACK_LIST_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_TRACK_LIST, XnoiseTrackListClass))
#define XNOISE_IS_TRACK_LIST(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_TRACK_LIST))
#define XNOISE_IS_TRACK_LIST_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_TRACK_LIST))
#define XNOISE_TRACK_LIST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_TRACK_LIST, XnoiseTrackListClass))

typedef struct _XnoiseTrackList XnoiseTrackList;
typedef struct _XnoiseTrackListClass XnoiseTrackListClass;
typedef struct _XnoiseTrackListPrivate XnoiseTrackListPrivate;

#define XNOISE_TYPE_TRACK_LIST_MODEL (xnoise_track_list_model_get_type ())
#define XNOISE_TRACK_LIST_MODEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_TRACK_LIST_MODEL, XnoiseTrackListModel))
#define XNOISE_TRACK_LIST_MODEL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_TRACK_LIST_MODEL, XnoiseTrackListModelClass))
#define XNOISE_IS_TRACK_LIST_MODEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_TRACK_LIST_MODEL))
#define XNOISE_IS_TRACK_LIST_MODEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_TRACK_LIST_MODEL))
#define XNOISE_TRACK_LIST_MODEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_TRACK_LIST_MODEL, XnoiseTrackListModelClass))

typedef struct _XnoiseTrackListModel XnoiseTrackListModel;
typedef struct _XnoiseTrackListModelClass XnoiseTrackListModelClass;
typedef struct _XnoiseTrackListModelPrivate XnoiseTrackListModelPrivate;

#define XNOISE_TRACK_LIST_MODEL_TYPE_ITERATOR (xnoise_track_list_model_iterator_get_type ())
#define XNOISE_TRACK_LIST_MODEL_ITERATOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TRACK_LIST_MODEL_TYPE_ITERATOR, XnoiseTrackListModelIterator))
#define XNOISE_TRACK_LIST_MODEL_ITERATOR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TRACK_LIST_MODEL_TYPE_ITERATOR, XnoiseTrackListModelIteratorClass))
#define XNOISE_TRACK_LIST_MODEL_IS_ITERATOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TRACK_LIST_MODEL_TYPE_ITERATOR))
#define XNOISE_TRACK_LIST_MODEL_IS_ITERATOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TRACK_LIST_MODEL_TYPE_ITERATOR))
#define XNOISE_TRACK_LIST_MODEL_ITERATOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TRACK_LIST_MODEL_TYPE_ITERATOR, XnoiseTrackListModelIteratorClass))

typedef struct _XnoiseTrackListModelIterator XnoiseTrackListModelIterator;
typedef struct _XnoiseTrackListModelIteratorClass XnoiseTrackListModelIteratorClass;
typedef struct _XnoiseTrackListModelIteratorPrivate XnoiseTrackListModelIteratorPrivate;

#define XNOISE_TYPE_TRAY_ICON (xnoise_tray_icon_get_type ())
#define XNOISE_TRAY_ICON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_TRAY_ICON, XnoiseTrayIcon))
#define XNOISE_TRAY_ICON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_TRAY_ICON, XnoiseTrayIconClass))
#define XNOISE_IS_TRAY_ICON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_TRAY_ICON))
#define XNOISE_IS_TRAY_ICON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_TRAY_ICON))
#define XNOISE_TRAY_ICON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_TRAY_ICON, XnoiseTrayIconClass))

typedef struct _XnoiseTrayIcon XnoiseTrayIcon;
typedef struct _XnoiseTrayIconClass XnoiseTrayIconClass;
typedef struct _XnoiseTrayIconPrivate XnoiseTrayIconPrivate;

#define XNOISE_TYPE_APP_STARTER (xnoise_app_starter_get_type ())
#define XNOISE_APP_STARTER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_APP_STARTER, XnoiseAppStarter))
#define XNOISE_APP_STARTER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_APP_STARTER, XnoiseAppStarterClass))
#define XNOISE_IS_APP_STARTER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_APP_STARTER))
#define XNOISE_IS_APP_STARTER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_APP_STARTER))
#define XNOISE_APP_STARTER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_APP_STARTER, XnoiseAppStarterClass))

typedef struct _XnoiseAppStarter XnoiseAppStarter;
typedef struct _XnoiseAppStarterClass XnoiseAppStarterClass;
typedef struct _XnoiseAppStarterPrivate XnoiseAppStarterPrivate;

#define XNOISE_TYPE_GLOBAL_ACCESS (xnoise_global_access_get_type ())
#define XNOISE_GLOBAL_ACCESS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_GLOBAL_ACCESS, XnoiseGlobalAccess))
#define XNOISE_GLOBAL_ACCESS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_GLOBAL_ACCESS, XnoiseGlobalAccessClass))
#define XNOISE_IS_GLOBAL_ACCESS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_GLOBAL_ACCESS))
#define XNOISE_IS_GLOBAL_ACCESS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_GLOBAL_ACCESS))
#define XNOISE_GLOBAL_ACCESS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_GLOBAL_ACCESS, XnoiseGlobalAccessClass))

typedef struct _XnoiseGlobalAccess XnoiseGlobalAccess;
typedef struct _XnoiseGlobalAccessClass XnoiseGlobalAccessClass;
typedef struct _XnoiseGlobalAccessPrivate XnoiseGlobalAccessPrivate;

#define XNOISE_TYPE_PLAYER_STATE (xnoise_player_state_get_type ())
typedef struct _XnoiseLocalSchemesPrivate XnoiseLocalSchemesPrivate;
typedef struct _XnoiseMediaExtensionsPrivate XnoiseMediaExtensionsPrivate;

#define XNOISE_TYPE_MEDIA_IMPORTER (xnoise_media_importer_get_type ())
#define XNOISE_MEDIA_IMPORTER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_MEDIA_IMPORTER, XnoiseMediaImporter))
#define XNOISE_MEDIA_IMPORTER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_MEDIA_IMPORTER, XnoiseMediaImporterClass))
#define XNOISE_IS_MEDIA_IMPORTER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_MEDIA_IMPORTER))
#define XNOISE_IS_MEDIA_IMPORTER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_MEDIA_IMPORTER))
#define XNOISE_MEDIA_IMPORTER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_MEDIA_IMPORTER, XnoiseMediaImporterClass))

typedef struct _XnoiseMediaImporter XnoiseMediaImporter;
typedef struct _XnoiseMediaImporterClass XnoiseMediaImporterClass;
typedef struct _XnoiseMediaImporterPrivate XnoiseMediaImporterPrivate;

#define XNOISE_TYPE_USER_INFO (xnoise_user_info_get_type ())
#define XNOISE_USER_INFO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_USER_INFO, XnoiseUserInfo))
#define XNOISE_USER_INFO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_USER_INFO, XnoiseUserInfoClass))
#define XNOISE_IS_USER_INFO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_USER_INFO))
#define XNOISE_IS_USER_INFO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_USER_INFO))
#define XNOISE_USER_INFO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_USER_INFO, XnoiseUserInfoClass))

typedef struct _XnoiseUserInfo XnoiseUserInfo;
typedef struct _XnoiseUserInfoClass XnoiseUserInfoClass;

#define XNOISE_TYPE_WORKER (xnoise_worker_get_type ())
#define XNOISE_WORKER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_WORKER, XnoiseWorker))
#define XNOISE_WORKER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_WORKER, XnoiseWorkerClass))
#define XNOISE_IS_WORKER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_WORKER))
#define XNOISE_IS_WORKER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_WORKER))
#define XNOISE_WORKER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_WORKER, XnoiseWorkerClass))

typedef struct _XnoiseWorker XnoiseWorker;
typedef struct _XnoiseWorkerClass XnoiseWorkerClass;

#define XNOISE_TYPE_MAIN_WINDOW (xnoise_main_window_get_type ())
#define XNOISE_MAIN_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_MAIN_WINDOW, XnoiseMainWindow))
#define XNOISE_MAIN_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_MAIN_WINDOW, XnoiseMainWindowClass))
#define XNOISE_IS_MAIN_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_MAIN_WINDOW))
#define XNOISE_IS_MAIN_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_MAIN_WINDOW))
#define XNOISE_MAIN_WINDOW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_MAIN_WINDOW, XnoiseMainWindowClass))

typedef struct _XnoiseMainWindow XnoiseMainWindow;
typedef struct _XnoiseMainWindowClass XnoiseMainWindowClass;

#define XNOISE_TYPE_TRACK_LIST_NOTE_BOOK_TAB (xnoise_track_list_note_book_tab_get_type ())

#define GST_TYPE_STREAM_TYPE (gst_stream_type_get_type ())

#define XNOISE_TYPE_GNOME_MEDIA_KEYS (xnoise_gnome_media_keys_get_type ())
#define XNOISE_GNOME_MEDIA_KEYS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_GNOME_MEDIA_KEYS, XnoiseGnomeMediaKeys))
#define XNOISE_IS_GNOME_MEDIA_KEYS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_GNOME_MEDIA_KEYS))
#define XNOISE_GNOME_MEDIA_KEYS_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), XNOISE_TYPE_GNOME_MEDIA_KEYS, XnoiseGnomeMediaKeysIface))

typedef struct _XnoiseGnomeMediaKeys XnoiseGnomeMediaKeys;
typedef struct _XnoiseGnomeMediaKeysIface XnoiseGnomeMediaKeysIface;

#define XNOISE_TYPE_GNOME_MEDIA_KEYS_PROXY (xnoise_gnome_media_keys_proxy_get_type ())
typedef struct _XnoiseRemoteSchemesPrivate XnoiseRemoteSchemesPrivate;
typedef struct _XnoiseTrackDataPrivate XnoiseTrackDataPrivate;
typedef struct _XnoiseUserInfoPrivate XnoiseUserInfoPrivate;

#define XNOISE_USER_INFO_TYPE_REMOVAL_TYPE (xnoise_user_info_removal_type_get_type ())

#define XNOISE_USER_INFO_TYPE_CONTENT_CLASS (xnoise_user_info_content_class_get_type ())

#define XNOISE_TYPE_INFO_BAR (xnoise_info_bar_get_type ())
#define XNOISE_INFO_BAR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_INFO_BAR, XnoiseInfoBar))
#define XNOISE_INFO_BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_INFO_BAR, XnoiseInfoBarClass))
#define XNOISE_IS_INFO_BAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_INFO_BAR))
#define XNOISE_IS_INFO_BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_INFO_BAR))
#define XNOISE_INFO_BAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_INFO_BAR, XnoiseInfoBarClass))

typedef struct _XnoiseInfoBar XnoiseInfoBar;
typedef struct _XnoiseInfoBarClass XnoiseInfoBarClass;
typedef struct _XnoiseWorkerPrivate XnoiseWorkerPrivate;

#define XNOISE_WORKER_TYPE_EXECUTION_TYPE (xnoise_worker_execution_type_get_type ())
typedef struct _XnoiseWorkerJobPrivate XnoiseWorkerJobPrivate;

#define XNOISE_TYPE_ADD_MEDIA_DIALOG (xnoise_add_media_dialog_get_type ())
#define XNOISE_ADD_MEDIA_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_ADD_MEDIA_DIALOG, XnoiseAddMediaDialog))
#define XNOISE_ADD_MEDIA_DIALOG_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_ADD_MEDIA_DIALOG, XnoiseAddMediaDialogClass))
#define XNOISE_IS_ADD_MEDIA_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_ADD_MEDIA_DIALOG))
#define XNOISE_IS_ADD_MEDIA_DIALOG_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_ADD_MEDIA_DIALOG))
#define XNOISE_ADD_MEDIA_DIALOG_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_ADD_MEDIA_DIALOG, XnoiseAddMediaDialogClass))

typedef struct _XnoiseAddMediaDialog XnoiseAddMediaDialog;
typedef struct _XnoiseAddMediaDialogClass XnoiseAddMediaDialogClass;
typedef struct _XnoiseAddMediaDialogPrivate XnoiseAddMediaDialogPrivate;

#define XNOISE_TYPE_CONTROL_BUTTON (xnoise_control_button_get_type ())
#define XNOISE_CONTROL_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_CONTROL_BUTTON, XnoiseControlButton))
#define XNOISE_CONTROL_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_CONTROL_BUTTON, XnoiseControlButtonClass))
#define XNOISE_IS_CONTROL_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_CONTROL_BUTTON))
#define XNOISE_IS_CONTROL_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_CONTROL_BUTTON))
#define XNOISE_CONTROL_BUTTON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_CONTROL_BUTTON, XnoiseControlButtonClass))

typedef struct _XnoiseControlButton XnoiseControlButton;
typedef struct _XnoiseControlButtonClass XnoiseControlButtonClass;
typedef struct _XnoiseControlButtonPrivate XnoiseControlButtonPrivate;

#define XNOISE_CONTROL_BUTTON_TYPE_DIRECTION (xnoise_control_button_direction_get_type ())

#define XNOISE_TYPE_FULLSCREEN_TOOLBAR (xnoise_fullscreen_toolbar_get_type ())
#define XNOISE_FULLSCREEN_TOOLBAR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_FULLSCREEN_TOOLBAR, XnoiseFullscreenToolbar))
#define XNOISE_FULLSCREEN_TOOLBAR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_FULLSCREEN_TOOLBAR, XnoiseFullscreenToolbarClass))
#define XNOISE_IS_FULLSCREEN_TOOLBAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_FULLSCREEN_TOOLBAR))
#define XNOISE_IS_FULLSCREEN_TOOLBAR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_FULLSCREEN_TOOLBAR))
#define XNOISE_FULLSCREEN_TOOLBAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_FULLSCREEN_TOOLBAR, XnoiseFullscreenToolbarClass))

typedef struct _XnoiseFullscreenToolbar XnoiseFullscreenToolbar;
typedef struct _XnoiseFullscreenToolbarClass XnoiseFullscreenToolbarClass;
typedef struct _XnoiseFullscreenToolbarPrivate XnoiseFullscreenToolbarPrivate;

#define XNOISE_FULLSCREEN_TOOLBAR_TYPE_LEAVE_VIDEO_FS_BUTTON (xnoise_fullscreen_toolbar_leave_video_fs_button_get_type ())
#define XNOISE_FULLSCREEN_TOOLBAR_LEAVE_VIDEO_FS_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_FULLSCREEN_TOOLBAR_TYPE_LEAVE_VIDEO_FS_BUTTON, XnoiseFullscreenToolbarLeaveVideoFSButton))
#define XNOISE_FULLSCREEN_TOOLBAR_LEAVE_VIDEO_FS_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_FULLSCREEN_TOOLBAR_TYPE_LEAVE_VIDEO_FS_BUTTON, XnoiseFullscreenToolbarLeaveVideoFSButtonClass))
#define XNOISE_FULLSCREEN_TOOLBAR_IS_LEAVE_VIDEO_FS_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_FULLSCREEN_TOOLBAR_TYPE_LEAVE_VIDEO_FS_BUTTON))
#define XNOISE_FULLSCREEN_TOOLBAR_IS_LEAVE_VIDEO_FS_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_FULLSCREEN_TOOLBAR_TYPE_LEAVE_VIDEO_FS_BUTTON))
#define XNOISE_FULLSCREEN_TOOLBAR_LEAVE_VIDEO_FS_BUTTON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_FULLSCREEN_TOOLBAR_TYPE_LEAVE_VIDEO_FS_BUTTON, XnoiseFullscreenToolbarLeaveVideoFSButtonClass))

typedef struct _XnoiseFullscreenToolbarLeaveVideoFSButton XnoiseFullscreenToolbarLeaveVideoFSButton;
typedef struct _XnoiseFullscreenToolbarLeaveVideoFSButtonClass XnoiseFullscreenToolbarLeaveVideoFSButtonClass;
typedef struct _XnoiseFullscreenToolbarLeaveVideoFSButtonPrivate XnoiseFullscreenToolbarLeaveVideoFSButtonPrivate;
typedef struct _XnoiseInfoBarPrivate XnoiseInfoBarPrivate;
typedef struct _XnoiseMainWindowPrivate XnoiseMainWindowPrivate;

#define XNOISE_TYPE_PLAY_PAUSE_BUTTON (xnoise_play_pause_button_get_type ())
#define XNOISE_PLAY_PAUSE_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_PLAY_PAUSE_BUTTON, XnoisePlayPauseButton))
#define XNOISE_PLAY_PAUSE_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_PLAY_PAUSE_BUTTON, XnoisePlayPauseButtonClass))
#define XNOISE_IS_PLAY_PAUSE_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_PLAY_PAUSE_BUTTON))
#define XNOISE_IS_PLAY_PAUSE_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_PLAY_PAUSE_BUTTON))
#define XNOISE_PLAY_PAUSE_BUTTON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_PLAY_PAUSE_BUTTON, XnoisePlayPauseButtonClass))

typedef struct _XnoisePlayPauseButton XnoisePlayPauseButton;
typedef struct _XnoisePlayPauseButtonClass XnoisePlayPauseButtonClass;

#define XNOISE_TYPE_TRACK_INFOBAR (xnoise_track_infobar_get_type ())
#define XNOISE_TRACK_INFOBAR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_TRACK_INFOBAR, XnoiseTrackInfobar))
#define XNOISE_TRACK_INFOBAR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_TRACK_INFOBAR, XnoiseTrackInfobarClass))
#define XNOISE_IS_TRACK_INFOBAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_TRACK_INFOBAR))
#define XNOISE_IS_TRACK_INFOBAR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_TRACK_INFOBAR))
#define XNOISE_TRACK_INFOBAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_TRACK_INFOBAR, XnoiseTrackInfobarClass))

typedef struct _XnoiseTrackInfobar XnoiseTrackInfobar;
typedef struct _XnoiseTrackInfobarClass XnoiseTrackInfobarClass;

#define XNOISE_MAIN_WINDOW_TYPE_PLAYER_REPEAT_MODE (xnoise_main_window_player_repeat_mode_get_type ())
typedef struct _XnoisePlayPauseButtonPrivate XnoisePlayPauseButtonPrivate;
typedef struct _XnoiseTrackInfobarPrivate XnoiseTrackInfobarPrivate;

#define XNOISE_TYPE_TRACK_PROGRESS_BAR (xnoise_track_progress_bar_get_type ())
#define XNOISE_TRACK_PROGRESS_BAR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_TRACK_PROGRESS_BAR, XnoiseTrackProgressBar))
#define XNOISE_TRACK_PROGRESS_BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_TRACK_PROGRESS_BAR, XnoiseTrackProgressBarClass))
#define XNOISE_IS_TRACK_PROGRESS_BAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_TRACK_PROGRESS_BAR))
#define XNOISE_IS_TRACK_PROGRESS_BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_TRACK_PROGRESS_BAR))
#define XNOISE_TRACK_PROGRESS_BAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_TRACK_PROGRESS_BAR, XnoiseTrackProgressBarClass))

typedef struct _XnoiseTrackProgressBar XnoiseTrackProgressBar;
typedef struct _XnoiseTrackProgressBarClass XnoiseTrackProgressBarClass;
typedef struct _XnoiseTrackProgressBarPrivate XnoiseTrackProgressBarPrivate;
typedef struct _XnoiseVideoScreenPrivate XnoiseVideoScreenPrivate;

#define XNOISE_TYPE_VOLUME_SLIDER_BUTTON (xnoise_volume_slider_button_get_type ())
#define XNOISE_VOLUME_SLIDER_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), XNOISE_TYPE_VOLUME_SLIDER_BUTTON, XnoiseVolumeSliderButton))
#define XNOISE_VOLUME_SLIDER_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), XNOISE_TYPE_VOLUME_SLIDER_BUTTON, XnoiseVolumeSliderButtonClass))
#define XNOISE_IS_VOLUME_SLIDER_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), XNOISE_TYPE_VOLUME_SLIDER_BUTTON))
#define XNOISE_IS_VOLUME_SLIDER_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), XNOISE_TYPE_VOLUME_SLIDER_BUTTON))
#define XNOISE_VOLUME_SLIDER_BUTTON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), XNOISE_TYPE_VOLUME_SLIDER_BUTTON, XnoiseVolumeSliderButtonClass))

typedef struct _XnoiseVolumeSliderButton XnoiseVolumeSliderButton;
typedef struct _XnoiseVolumeSliderButtonClass XnoiseVolumeSliderButtonClass;
typedef struct _XnoiseVolumeSliderButtonPrivate XnoiseVolumeSliderButtonPrivate;

struct _XnoiseMain {
	GObject parent_instance;
	XnoiseMainPrivate * priv;
};

struct _XnoiseMainClass {
	GObjectClass parent_class;
};

struct _XnoiseAlbumImage {
	GtkImage parent_instance;
	XnoiseAlbumImagePrivate * priv;
};

struct _XnoiseAlbumImageClass {
	GtkImageClass parent_class;
};

struct _XnoiseAlbumImageLoader {
	GObject parent_instance;
	XnoiseAlbumImageLoaderPrivate * priv;
	gchar* artist;
	gchar* album;
};

struct _XnoiseAlbumImageLoaderClass {
	GObjectClass parent_class;
};

struct _XnoiseIAlbumCoverImageIface {
	GTypeInterface parent_iface;
	void (*find_image) (XnoiseIAlbumCoverImage* self);
};

struct _XnoiseIAlbumCoverImageProviderIface {
	GTypeInterface parent_iface;
	XnoiseIAlbumCoverImage* (*from_tags) (XnoiseIAlbumCoverImageProvider* self, const gchar* artist, const gchar* album);
};

typedef enum  {
	XNOISE_ITEM_HANDLER_TYPE_UNKNOWN,
	XNOISE_ITEM_HANDLER_TYPE_OTHER,
	XNOISE_ITEM_HANDLER_TYPE_TRACKLIST_ADDER,
	XNOISE_ITEM_HANDLER_TYPE_PLAYLIST_PARSER,
	XNOISE_ITEM_HANDLER_TYPE_VIDEO_THUMBNAILER,
	XNOISE_ITEM_HANDLER_TYPE_TAG_EDITOR,
	XNOISE_ITEM_HANDLER_TYPE_MENU_PROVIDER,
	XNOISE_ITEM_HANDLER_TYPE_PLAY_NOW
} XnoiseItemHandlerType;

typedef enum  {
	XNOISE_ITEM_TYPE_UNKNOWN = 0,
	XNOISE_ITEM_TYPE_LOCAL_AUDIO_TRACK,
	XNOISE_ITEM_TYPE_LOCAL_VIDEO_TRACK,
	XNOISE_ITEM_TYPE_STREAM,
	XNOISE_ITEM_TYPE_CDROM_TRACK,
	XNOISE_ITEM_TYPE_PLAYLIST,
	XNOISE_ITEM_TYPE_LOCAL_FOLDER,
	XNOISE_ITEM_TYPE_COLLECTION_CONTAINER_ARTIST,
	XNOISE_ITEM_TYPE_COLLECTION_CONTAINER_ALBUM,
	XNOISE_ITEM_TYPE_COLLECTION_CONTAINER_VIDEO,
	XNOISE_ITEM_TYPE_COLLECTION_CONTAINER_STREAM,
	XNOISE_ITEM_TYPE_COLLECTION_CONTAINER_GENRE,
	XNOISE_ITEM_TYPE_COLLECTION_CONTAINER_YEAR,
	XNOISE_ITEM_TYPE_LOADER,
	XNOISE_ITEM_TYPE_MAXCOUNT
} XnoiseItemType;

typedef enum  {
	XNOISE_ACTION_CONTEXT_NONE,
	XNOISE_ACTION_CONTEXT_REQUESTED,
	XNOISE_ACTION_CONTEXT_TRACKLIST_ITEM_ACTIVATED,
	XNOISE_ACTION_CONTEXT_TRACKLIST_MENU_QUERY,
	XNOISE_ACTION_CONTEXT_TRACKLIST_DROP,
	XNOISE_ACTION_CONTEXT_MEDIABROWSER_ITEM_ACTIVATED,
	XNOISE_ACTION_CONTEXT_MEDIABROWSER_MENU_QUERY,
	XNOISE_ACTION_CONTEXT_MEDIABROWSER_LOAD,
	XNOISE_ACTION_CONTEXT_VIDEOSCREEN_ACTIVATED,
	XNOISE_ACTION_CONTEXT_VIDEOSCREEN_MENU_QUERY,
	XNOISE_ACTION_CONTEXT_TRACKLIST_COLUMN_HEADER_MENU_QUERY
} XnoiseActionContext;

typedef enum  {
	XNOISE_ITEM_SELECTION_TYPE_NOT_SET = 0,
	XNOISE_ITEM_SELECTION_TYPE_SINGLE = 1 << 0,
	XNOISE_ITEM_SELECTION_TYPE_MULTIPLE = 1 << 1
} XnoiseItemSelectionType;

struct _XnoiseItemHandler {
	GObject parent_instance;
	XnoiseItemHandlerPrivate * priv;
	XnoiseItemHandlerManager* uhm;
};

struct _XnoiseItemHandlerClass {
	GObjectClass parent_class;
	XnoiseItemHandlerType (*handler_type) (XnoiseItemHandler* self);
	const gchar* (*handler_name) (XnoiseItemHandler* self);
	XnoiseAction* (*get_action) (XnoiseItemHandler* self, XnoiseItemType type, XnoiseActionContext context, XnoiseItemSelectionType selection);
};

struct _XnoiseHandlerAddAllToTracklist {
	XnoiseItemHandler parent_instance;
	XnoiseHandlerAddAllToTracklistPrivate * priv;
};

struct _XnoiseHandlerAddAllToTracklistClass {
	XnoiseItemHandlerClass parent_class;
};

struct _XnoiseHandlerAddToTracklist {
	XnoiseItemHandler parent_instance;
	XnoiseHandlerAddToTracklistPrivate * priv;
};

struct _XnoiseHandlerAddToTracklistClass {
	XnoiseItemHandlerClass parent_class;
};

struct _XnoiseHandlerEditTags {
	XnoiseItemHandler parent_instance;
	XnoiseHandlerEditTagsPrivate * priv;
};

struct _XnoiseHandlerEditTagsClass {
	XnoiseItemHandlerClass parent_class;
};

struct _XnoiseTagTitleEditor {
	GObject parent_instance;
	XnoiseTagTitleEditorPrivate * priv;
};

struct _XnoiseTagTitleEditorClass {
	GObjectClass parent_class;
};

struct _XnoiseItem {
	XnoiseItemType type;
	gint32 db_id;
	gchar* uri;
	gchar* text;
};

struct _XnoiseHandlerPlayItem {
	XnoiseItemHandler parent_instance;
	XnoiseHandlerPlayItemPrivate * priv;
};

struct _XnoiseHandlerPlayItemClass {
	XnoiseItemHandlerClass parent_class;
};

struct _XnoiseHandlerRemoveTrack {
	XnoiseItemHandler parent_instance;
	XnoiseHandlerRemoveTrackPrivate * priv;
};

struct _XnoiseHandlerRemoveTrackClass {
	XnoiseItemHandlerClass parent_class;
};

struct _XnoiseItemConverter {
	GObject parent_instance;
	XnoiseItemConverterPrivate * priv;
};

struct _XnoiseItemConverterClass {
	GObjectClass parent_class;
};

typedef void (*XnoiseItemHandlerActionType) (XnoiseItem* item, GValue* data, void* user_data);
struct _XnoiseAction {
	XnoiseItemHandlerActionType action;
	gpointer action_target;
	const gchar* name;
	const gchar* info;
	const gchar* text;
	const gchar* stock_item;
	XnoiseActionContext context;
};

struct _XnoiseItemHandlerManager {
	GObject parent_instance;
	XnoiseItemHandlerManagerPrivate * priv;
};

struct _XnoiseItemHandlerManagerClass {
	GObjectClass parent_class;
};

typedef enum  {
	XNOISE_DATABASE_DB_ERROR_FAILED
} XnoiseDatabaseDbError;
#define XNOISE_DATABASE_DB_ERROR xnoise_database_db_error_quark ()
struct _XnoiseDatabaseDbBrowser {
	GTypeInstance parent_instance;
	volatile int ref_count;
	XnoiseDatabaseDbBrowserPrivate * priv;
};

struct _XnoiseDatabaseDbBrowserClass {
	GTypeClass parent_class;
	void (*finalize) (XnoiseDatabaseDbBrowser *self);
};

typedef void (*XnoiseDatabaseDbBrowserReaderCallback) (sqlite3* database, void* user_data);
struct _XnoiseStreamData {
	gchar* name;
	gchar* uri;
};

struct _XnoiseDatabaseDbWriter {
	GObject parent_instance;
	XnoiseDatabaseDbWriterPrivate * priv;
};

struct _XnoiseDatabaseDbWriterClass {
	GObjectClass parent_class;
};

typedef enum  {
	XNOISE_DATABASE_DB_WRITER_CHANGE_TYPE_ADD_ARTIST,
	XNOISE_DATABASE_DB_WRITER_CHANGE_TYPE_ADD_ALBUM,
	XNOISE_DATABASE_DB_WRITER_CHANGE_TYPE_ADD_TITLE,
	XNOISE_DATABASE_DB_WRITER_CHANGE_TYPE_ADD_VIDEO,
	XNOISE_DATABASE_DB_WRITER_CHANGE_TYPE_ADD_STREAM,
	XNOISE_DATABASE_DB_WRITER_CHANGE_TYPE_REMOVE_ARTIST,
	XNOISE_DATABASE_DB_WRITER_CHANGE_TYPE_REMOVE_ALBUM,
	XNOISE_DATABASE_DB_WRITER_CHANGE_TYPE_REMOVE_TITLE,
	XNOISE_DATABASE_DB_WRITER_CHANGE_TYPE_REMOVE_URI,
	XNOISE_DATABASE_DB_WRITER_CHANGE_TYPE_CLEAR_DB
} XnoiseDatabaseDbWriterChangeType;

typedef void (*XnoiseDatabaseDbWriterChangeNotificationCallback) (XnoiseDatabaseDbWriterChangeType changetype, XnoiseItem* item, void* user_data);
typedef void (*XnoiseDatabaseDbWriterWriterCallback) (sqlite3* database, void* user_data);
struct _XnoiseILyricsIface {
	GTypeInterface parent_iface;
	void (*find_lyrics) (XnoiseILyrics* self);
	gchar* (*get_identifier) (XnoiseILyrics* self);
	gchar* (*get_credits) (XnoiseILyrics* self);
	guint (*get_timeout) (XnoiseILyrics* self);
};

struct _XnoisePluginModuleIPluginIface {
	GTypeInterface parent_iface;
	gboolean (*init) (XnoisePluginModuleIPlugin* self);
	void (*uninit) (XnoisePluginModuleIPlugin* self);
	gboolean (*has_settings_widget) (XnoisePluginModuleIPlugin* self);
	GtkWidget* (*get_settings_widget) (XnoisePluginModuleIPlugin* self);
	XnoisePluginModuleContainer* (*get_owner) (XnoisePluginModuleIPlugin* self);
	void (*set_owner) (XnoisePluginModuleIPlugin* self, XnoisePluginModuleContainer* value);
	const gchar* (*get_name) (XnoisePluginModuleIPlugin* self);
	XnoiseMain* (*get_xn) (XnoisePluginModuleIPlugin* self);
	void (*set_xn) (XnoisePluginModuleIPlugin* self, XnoiseMain* value);
};

typedef void (*XnoiseLyricsFetchedCallback) (const gchar* artist, const gchar* title, const gchar* credits, const gchar* identifier, const gchar* text, const gchar* providername, void* user_data);
struct _XnoiseILyricsProviderIface {
	GTypeInterface parent_iface;
	XnoiseILyrics* (*from_tags) (XnoiseILyricsProvider* self, XnoiseLyricsLoader* loader, const gchar* artist, const gchar* title, XnoiseLyricsFetchedCallback cb, void* cb_target);
	gint (*get_priority) (XnoiseILyricsProvider* self);
	void (*set_priority) (XnoiseILyricsProvider* self, gint value);
	const gchar* (*get_provider_name) (XnoiseILyricsProvider* self);
};

struct _XnoiseLyricsLoader {
	GObject parent_instance;
	XnoiseLyricsLoaderPrivate * priv;
};

struct _XnoiseLyricsLoaderClass {
	GObjectClass parent_class;
};

struct _XnoiseLyricsView {
	GtkTextView parent_instance;
	XnoiseLyricsViewPrivate * priv;
};

struct _XnoiseLyricsViewClass {
	GtkTextViewClass parent_class;
};

struct _XnoiseIParamsIface {
	GTypeInterface parent_iface;
	void (*read_params_data) (XnoiseIParams* self);
	void (*write_params_data) (XnoiseIParams* self);
};

struct _XnoiseMediaBrowser {
	GtkTreeView parent_instance;
	XnoiseMediaBrowserPrivate * priv;
	XnoiseMediaBrowserModel* mediabrowsermodel;
};

struct _XnoiseMediaBrowserClass {
	GtkTreeViewClass parent_class;
};

struct _XnoiseMediaBrowserModel {
	GtkTreeStore parent_instance;
	XnoiseMediaBrowserModelPrivate * priv;
	gchar* searchtext;
};

struct _XnoiseMediaBrowserModelClass {
	GtkTreeStoreClass parent_class;
};

typedef enum  {
	XNOISE_MEDIA_BROWSER_MODEL_TRACK_SORTING_ARTIST_ALBUM_TITLE = 0,
	XNOISE_MEDIA_BROWSER_MODEL_TRACK_SORTING_GENRE_ARTIST_TITLE,
	XNOISE_MEDIA_BROWSER_MODEL_TRACK_SORTING_ARTIST_YEAR_TITLE
} XnoiseMediaBrowserModelTrackSorting;

typedef enum  {
	XNOISE_MEDIA_BROWSER_MODEL_COLUMN_ICON = 0,
	XNOISE_MEDIA_BROWSER_MODEL_COLUMN_VIS_TEXT,
	XNOISE_MEDIA_BROWSER_MODEL_COLUMN_DRAW_SEPTR,
	XNOISE_MEDIA_BROWSER_MODEL_COLUMN_ITEM,
	XNOISE_MEDIA_BROWSER_MODEL_COLUMN_N_COLUMNS
} XnoiseMediaBrowserModelColumn;

typedef enum  {
	XNOISE_MEDIA_BROWSER_MODEL_COLLECTION_TYPE_UNKNOWN = 0,
	XNOISE_MEDIA_BROWSER_MODEL_COLLECTION_TYPE_HIERARCHICAL = 1,
	XNOISE_MEDIA_BROWSER_MODEL_COLLECTION_TYPE_LISTED = 2
} XnoiseMediaBrowserModelCollectionType;

struct _XnoiseDndData {
	gint32 db_id;
	XnoiseItemType mediatype;
};

struct _XnoiseParams {
	GObject parent_instance;
	XnoiseParamsPrivate * priv;
};

struct _XnoiseParamsClass {
	GObjectClass parent_class;
};

struct _XnoiseGstPlayer {
	GObject parent_instance;
	XnoiseGstPlayerPrivate * priv;
	XnoiseVideoScreen* videoscreen;
};

struct _XnoiseGstPlayerClass {
	GObjectClass parent_class;
};

typedef enum  {
	XNOISE_PLAYLIST_READER_ERROR_UNKNOWN_TYPE,
	XNOISE_PLAYLIST_READER_ERROR_SOMETHING_ELSE
} XnoisePlaylistReaderError;
#define XNOISE_PLAYLIST_READER_ERROR xnoise_playlist_reader_error_quark ()
typedef enum  {
	XNOISE_PLAYLIST_LIST_TYPE_UNKNOWN = 0,
	XNOISE_PLAYLIST_LIST_TYPE_IGNORED,
	XNOISE_PLAYLIST_LIST_TYPE_M3U,
	XNOISE_PLAYLIST_LIST_TYPE_PLS,
	XNOISE_PLAYLIST_LIST_TYPE_ASX,
	XNOISE_PLAYLIST_LIST_TYPE_XSPF,
	XNOISE_PLAYLIST_LIST_TYPE_WPL
} XnoisePlaylistListType;

typedef enum  {
	XNOISE_PLAYLIST_RESULT_UNHANDLED = 0,
	XNOISE_PLAYLIST_RESULT_ERROR,
	XNOISE_PLAYLIST_RESULT_IGNORED,
	XNOISE_PLAYLIST_RESULT_SUCCESS,
	XNOISE_PLAYLIST_RESULT_EMPTY,
	XNOISE_PLAYLIST_RESULT_DOUBLE_WRITE
} XnoisePlaylistResult;

typedef enum  {
	XNOISE_PLAYLIST_TARGET_TYPE_URI,
	XNOISE_PLAYLIST_TARGET_TYPE_REL_PATH,
	XNOISE_PLAYLIST_TARGET_TYPE_ABS_PATH
} XnoisePlaylistTargetType;

struct _XnoisePlaylistEntry {
	GTypeInstance parent_instance;
	volatile int ref_count;
	XnoisePlaylistEntryPrivate * priv;
};

struct _XnoisePlaylistEntryClass {
	GTypeClass parent_class;
	void (*finalize) (XnoisePlaylistEntry *self);
};

typedef enum  {
	XNOISE_PLAYLIST_ENTRY_FIELD_URI = 0,
	XNOISE_PLAYLIST_ENTRY_FIELD_TITLE,
	XNOISE_PLAYLIST_ENTRY_FIELD_AUTHOR,
	XNOISE_PLAYLIST_ENTRY_FIELD_GENRE,
	XNOISE_PLAYLIST_ENTRY_FIELD_ALBUM,
	XNOISE_PLAYLIST_ENTRY_FIELD_COPYRIGHT,
	XNOISE_PLAYLIST_ENTRY_FIELD_DURATION,
	XNOISE_PLAYLIST_ENTRY_FIELD_PARAM_NAME,
	XNOISE_PLAYLIST_ENTRY_FIELD_PARAM_VALUE,
	XNOISE_PLAYLIST_ENTRY_FIELD_IS_REMOTE,
	XNOISE_PLAYLIST_ENTRY_FIELD_IS_PLAYLIST
} XnoisePlaylistEntryField;

struct _XnoisePlaylistEntryCollection {
	GTypeInstance parent_instance;
	volatile int ref_count;
	XnoisePlaylistEntryCollectionPrivate * priv;
};

struct _XnoisePlaylistEntryCollectionClass {
	GTypeClass parent_class;
	void (*finalize) (XnoisePlaylistEntryCollection *self);
};

struct _XnoisePlaylistEntryCollectionIterator {
	GTypeInstance parent_instance;
	volatile int ref_count;
	XnoisePlaylistEntryCollectionIteratorPrivate * priv;
};

struct _XnoisePlaylistEntryCollectionIteratorClass {
	GTypeClass parent_class;
	void (*finalize) (XnoisePlaylistEntryCollectionIterator *self);
};

struct _XnoisePlaylistReader {
	GObject parent_instance;
	XnoisePlaylistReaderPrivate * priv;
};

struct _XnoisePlaylistReaderClass {
	GObjectClass parent_class;
};

struct _XnoisePluginModuleContainer {
	GTypeModule parent_instance;
	XnoisePluginModuleContainerPrivate * priv;
	GObject* loaded_plugin;
};

struct _XnoisePluginModuleContainerClass {
	GTypeModuleClass parent_class;
};

struct _XnoisePluginModuleLoader {
	GObject parent_instance;
	XnoisePluginModuleLoaderPrivate * priv;
	GHashTable* plugin_htable;
	GHashTable* lyrics_plugins_htable;
	GHashTable* image_provider_htable;
};

struct _XnoisePluginModuleLoaderClass {
	GObjectClass parent_class;
};

struct _XnoisePluginModuleInformation {
	GObject parent_instance;
	XnoisePluginModuleInformationPrivate * priv;
};

struct _XnoisePluginModuleInformationClass {
	GObjectClass parent_class;
};

struct _XnoisePluginManagerTree {
	GtkTreeView parent_instance;
	XnoisePluginManagerTreePrivate * priv;
};

struct _XnoisePluginManagerTreeClass {
	GtkTreeViewClass parent_class;
};

typedef enum  {
	XNOISE_SETTINGS_DIALOG_ERROR_FILE_NOT_FOUND,
	XNOISE_SETTINGS_DIALOG_ERROR_GENERAL_ERROR
} XnoiseSettingsDialogError;
#define XNOISE_SETTINGS_DIALOG_ERROR xnoise_settings_dialog_error_quark ()
struct _XnoiseSettingsDialog {
	GtkBuilder parent_instance;
	XnoiseSettingsDialogPrivate * priv;
	GtkDialog* dialog;
};

struct _XnoiseSettingsDialogClass {
	GtkBuilderClass parent_class;
};

struct _XnoiseSimpleMarkupNode {
	GTypeInstance parent_instance;
	volatile int ref_count;
	XnoiseSimpleMarkupNodePrivate * priv;
	XnoiseSimpleMarkupNodeAttributes* attributes;
};

struct _XnoiseSimpleMarkupNodeClass {
	GTypeClass parent_class;
	void (*finalize) (XnoiseSimpleMarkupNode *self);
};

struct _XnoiseSimpleMarkupNodeAttributes {
	GTypeInstance parent_instance;
	volatile int ref_count;
	XnoiseSimpleMarkupNodeAttributesPrivate * priv;
	XnoiseSimpleMarkupNodeAttributesKeys* keys;
};

struct _XnoiseSimpleMarkupNodeAttributesClass {
	GTypeClass parent_class;
	void (*finalize) (XnoiseSimpleMarkupNodeAttributes *self);
};

struct _XnoiseSimpleMarkupNodeAttributesKeys {
	GTypeInstance parent_instance;
	volatile int ref_count;
	XnoiseSimpleMarkupNodeAttributesKeysPrivate * priv;
};

struct _XnoiseSimpleMarkupNodeAttributesKeysClass {
	GTypeClass parent_class;
	void (*finalize) (XnoiseSimpleMarkupNodeAttributesKeys *self);
};

struct _XnoiseSimpleMarkupNodeAttributesKeysIterator {
	GTypeInstance parent_instance;
	volatile int ref_count;
	XnoiseSimpleMarkupNodeAttributesKeysIteratorPrivate * priv;
};

struct _XnoiseSimpleMarkupNodeAttributesKeysIteratorClass {
	GTypeClass parent_class;
	void (*finalize) (XnoiseSimpleMarkupNodeAttributesKeysIterator *self);
};

struct _XnoiseSimpleMarkupNodeIterator {
	GTypeInstance parent_instance;
	volatile int ref_count;
	XnoiseSimpleMarkupNodeIteratorPrivate * priv;
};

struct _XnoiseSimpleMarkupNodeIteratorClass {
	GTypeClass parent_class;
	void (*finalize) (XnoiseSimpleMarkupNodeIterator *self);
};

struct _XnoiseSimpleMarkupReader {
	GObject parent_instance;
	XnoiseSimpleMarkupReaderPrivate * priv;
	XnoiseSimpleMarkupNode* root;
};

struct _XnoiseSimpleMarkupReaderClass {
	GObjectClass parent_class;
};

struct _XnoiseSimpleMarkupWriter {
	GObject parent_instance;
	XnoiseSimpleMarkupWriterPrivate * priv;
};

struct _XnoiseSimpleMarkupWriterClass {
	GObjectClass parent_class;
};

struct _XnoiseTagAccessTagReader {
	GTypeInstance parent_instance;
	volatile int ref_count;
	XnoiseTagAccessTagReaderPrivate * priv;
};

struct _XnoiseTagAccessTagReaderClass {
	GTypeClass parent_class;
	void (*finalize) (XnoiseTagAccessTagReader *self);
};

struct _XnoiseTagAccessTagWriter {
	GTypeInstance parent_instance;
	volatile int ref_count;
	XnoiseTagAccessTagWriterPrivate * priv;
};

struct _XnoiseTagAccessTagWriterClass {
	GTypeClass parent_class;
	void (*finalize) (XnoiseTagAccessTagWriter *self);
};

struct _XnoiseTrackListColumn {
	GtkTreeViewColumn parent_instance;
	XnoiseTrackListColumnPrivate * priv;
	gchar* tracklist_col_name;
};

struct _XnoiseTrackListColumnClass {
	GtkTreeViewColumnClass parent_class;
};

struct _XnoiseTextColumn {
	XnoiseTrackListColumn parent_instance;
	XnoiseTextColumnPrivate * priv;
};

struct _XnoiseTextColumnClass {
	XnoiseTrackListColumnClass parent_class;
};

typedef enum  {
	XNOISE_TRACK_LIST_MODEL_COLUMN_ICON = 0,
	XNOISE_TRACK_LIST_MODEL_COLUMN_TRACKNUMBER,
	XNOISE_TRACK_LIST_MODEL_COLUMN_TITLE,
	XNOISE_TRACK_LIST_MODEL_COLUMN_ALBUM,
	XNOISE_TRACK_LIST_MODEL_COLUMN_ARTIST,
	XNOISE_TRACK_LIST_MODEL_COLUMN_LENGTH,
	XNOISE_TRACK_LIST_MODEL_COLUMN_WEIGHT,
	XNOISE_TRACK_LIST_MODEL_COLUMN_GENRE,
	XNOISE_TRACK_LIST_MODEL_COLUMN_YEAR,
	XNOISE_TRACK_LIST_MODEL_COLUMN_ITEM
} XnoiseTrackListModelColumn;

struct _XnoiseTrackList {
	GtkTreeView parent_instance;
	XnoiseTrackListPrivate * priv;
	XnoiseTrackListModel* tracklistmodel;
};

struct _XnoiseTrackListClass {
	GtkTreeViewClass parent_class;
};

struct _XnoiseTrackListModel {
	GtkListStore parent_instance;
	XnoiseTrackListModelPrivate * priv;
};

struct _XnoiseTrackListModelClass {
	GtkListStoreClass parent_class;
};

struct _XnoiseTrackListModelIterator {
	GTypeInstance parent_instance;
	volatile int ref_count;
	XnoiseTrackListModelIteratorPrivate * priv;
};

struct _XnoiseTrackListModelIteratorClass {
	GTypeClass parent_class;
	void (*finalize) (XnoiseTrackListModelIterator *self);
};

struct _XnoiseTrayIcon {
	GtkStatusIcon parent_instance;
	XnoiseTrayIconPrivate * priv;
};

struct _XnoiseTrayIconClass {
	GtkStatusIconClass parent_class;
};

struct _XnoiseAppStarter {
	GTypeInstance parent_instance;
	volatile int ref_count;
	XnoiseAppStarterPrivate * priv;
};

struct _XnoiseAppStarterClass {
	GTypeClass parent_class;
	void (*finalize) (XnoiseAppStarter *self);
};

struct _XnoiseGlobalAccess {
	GObject parent_instance;
	XnoiseGlobalAccessPrivate * priv;
};

struct _XnoiseGlobalAccessClass {
	GObjectClass parent_class;
};

typedef enum  {
	XNOISE_PLAYER_STATE_STOPPED = 0,
	XNOISE_PLAYER_STATE_PLAYING,
	XNOISE_PLAYER_STATE_PAUSED
} XnoisePlayerState;

struct _XnoiseLocalSchemes {
	GTypeInstance parent_instance;
	volatile int ref_count;
	XnoiseLocalSchemesPrivate * priv;
};

struct _XnoiseLocalSchemesClass {
	GTypeClass parent_class;
	void (*finalize) (XnoiseLocalSchemes *self);
};

struct _XnoiseMediaExtensions {
	GTypeInstance parent_instance;
	volatile int ref_count;
	XnoiseMediaExtensionsPrivate * priv;
};

struct _XnoiseMediaExtensionsClass {
	GTypeClass parent_class;
	void (*finalize) (XnoiseMediaExtensions *self);
};

struct _XnoiseMediaImporter {
	GObject parent_instance;
	XnoiseMediaImporterPrivate * priv;
};

struct _XnoiseMediaImporterClass {
	GObjectClass parent_class;
};

typedef enum  {
	XNOISE_TRACK_LIST_NOTE_BOOK_TAB_TRACKLIST = 0,
	XNOISE_TRACK_LIST_NOTE_BOOK_TAB_VIDEO,
	XNOISE_TRACK_LIST_NOTE_BOOK_TAB_LYRICS
} XnoiseTrackListNoteBookTab;

typedef enum  {
	GST_STREAM_TYPE_UNKNOWN = 0,
	GST_STREAM_TYPE_AUDIO = 1,
	GST_STREAM_TYPE_VIDEO = 2
} GstStreamType;

struct _XnoiseGnomeMediaKeysIface {
	GTypeInterface parent_iface;
	void (*GrabMediaPlayerKeys) (XnoiseGnomeMediaKeys* self, const gchar* application, guint32 time, GError** error);
	void (*ReleaseMediaPlayerKeys) (XnoiseGnomeMediaKeys* self, const gchar* application, GError** error);
};

struct _XnoiseRemoteSchemes {
	GTypeInstance parent_instance;
	volatile int ref_count;
	XnoiseRemoteSchemesPrivate * priv;
};

struct _XnoiseRemoteSchemesClass {
	GTypeClass parent_class;
	void (*finalize) (XnoiseRemoteSchemes *self);
};

struct _XnoiseTrackData {
	GTypeInstance parent_instance;
	volatile int ref_count;
	XnoiseTrackDataPrivate * priv;
	gchar* artist;
	gchar* album;
	gchar* title;
	gchar* genre;
	gchar* name;
	guint year;
	guint tracknumber;
	gint32 length;
	gint bitrate;
	XnoiseItem* item;
	gint32 dat1;
	gint32 dat2;
};

struct _XnoiseTrackDataClass {
	GTypeClass parent_class;
	void (*finalize) (XnoiseTrackData *self);
};

struct _XnoiseUserInfo {
	GObject parent_instance;
	XnoiseUserInfoPrivate * priv;
};

struct _XnoiseUserInfoClass {
	GObjectClass parent_class;
};

typedef enum  {
	XNOISE_USER_INFO_REMOVAL_TYPE_CLOSE_BUTTON = 0,
	XNOISE_USER_INFO_REMOVAL_TYPE_TIMER,
	XNOISE_USER_INFO_REMOVAL_TYPE_TIMER_OR_CLOSE_BUTTON,
	XNOISE_USER_INFO_REMOVAL_TYPE_EXTERNAL
} XnoiseUserInfoRemovalType;

typedef enum  {
	XNOISE_USER_INFO_CONTENT_CLASS_INFO = 0,
	XNOISE_USER_INFO_CONTENT_CLASS_WAIT,
	XNOISE_USER_INFO_CONTENT_CLASS_WARNING,
	XNOISE_USER_INFO_CONTENT_CLASS_QUESTION,
	XNOISE_USER_INFO_CONTENT_CLASS_CRITICAL
} XnoiseUserInfoContentClass;

typedef void (*XnoiseUserInfoAddInfoBarDelegateType) (XnoiseInfoBar* ibar, void* user_data);
struct _XnoiseWorker {
	GObject parent_instance;
	XnoiseWorkerPrivate * priv;
};

struct _XnoiseWorkerClass {
	GObjectClass parent_class;
};

typedef enum  {
	XNOISE_WORKER_EXECUTION_TYPE_UNKNOWN = 0,
	XNOISE_WORKER_EXECUTION_TYPE_ONCE,
	XNOISE_WORKER_EXECUTION_TYPE_ONCE_HIGH_PRIORITY,
	XNOISE_WORKER_EXECUTION_TYPE_TIMED,
	XNOISE_WORKER_EXECUTION_TYPE_REPEATED
} XnoiseWorkerExecutionType;

typedef gboolean (*XnoiseWorkerWorkFunc) (XnoiseWorkerJob* jb, void* user_data);
struct _XnoiseWorkerJob {
	GObject parent_instance;
	XnoiseWorkerJobPrivate * priv;
	GValue* value_arg1;
	GValue* value_arg2;
	void* p_arg;
	XnoiseItem* item;
	XnoiseItem* items;
	gint items_length1;
	XnoiseTrackData** track_dat;
	gint track_dat_length1;
	XnoiseDndData* dnd_data;
	gint dnd_data_length1;
	GtkTreeRowReference** treerowrefs;
	gint treerowrefs_length1;
	gint32* id_array;
	gint id_array_length1;
	gint counter[4];
	gint32 big_counter[4];
	XnoiseWorkerWorkFunc func;
	gpointer func_target;
	GCancellable* cancellable;
};

struct _XnoiseWorkerJobClass {
	GObjectClass parent_class;
};

struct _XnoiseAddMediaDialog {
	GObject parent_instance;
	XnoiseAddMediaDialogPrivate * priv;
	GtkBuilder* builder;
};

struct _XnoiseAddMediaDialogClass {
	GObjectClass parent_class;
};

struct _XnoiseControlButton {
	GtkButton parent_instance;
	XnoiseControlButtonPrivate * priv;
};

struct _XnoiseControlButtonClass {
	GtkButtonClass parent_class;
};

typedef enum  {
	XNOISE_CONTROL_BUTTON_DIRECTION_NEXT = 0,
	XNOISE_CONTROL_BUTTON_DIRECTION_PREVIOUS,
	XNOISE_CONTROL_BUTTON_DIRECTION_STOP
} XnoiseControlButtonDirection;

struct _XnoiseFullscreenToolbar {
	GTypeInstance parent_instance;
	volatile int ref_count;
	XnoiseFullscreenToolbarPrivate * priv;
};

struct _XnoiseFullscreenToolbarClass {
	GTypeClass parent_class;
	void (*finalize) (XnoiseFullscreenToolbar *self);
};

struct _XnoiseFullscreenToolbarLeaveVideoFSButton {
	GtkButton parent_instance;
	XnoiseFullscreenToolbarLeaveVideoFSButtonPrivate * priv;
};

struct _XnoiseFullscreenToolbarLeaveVideoFSButtonClass {
	GtkButtonClass parent_class;
};

struct _XnoiseInfoBar {
	GtkInfoBar parent_instance;
	XnoiseInfoBarPrivate * priv;
};

struct _XnoiseInfoBarClass {
	GtkInfoBarClass parent_class;
};

struct _XnoiseMainWindow {
	GtkWindow parent_instance;
	XnoiseMainWindowPrivate * priv;
	gboolean quit_if_closed;
	GtkScrolledWindow* mediaBrScrollWin;
	GtkScrolledWindow* trackListScrollWin;
	GtkActionGroup* action_group;
	gboolean _seek;
	gboolean is_fullscreen;
	gboolean drag_on_content_area;
	XnoiseTrackListNoteBookTab temporary_tab;
	XnoiseFullscreenToolbar* fullscreentoolbar;
	GtkVBox* videovbox;
	XnoiseLyricsView* lyricsView;
	XnoiseVideoScreen* videoscreen;
	GtkHPaned* hpaned;
	GtkEntry* searchEntryMB;
	XnoisePlayPauseButton* playPauseButton;
	XnoiseControlButton* previousButton;
	XnoiseControlButton* nextButton;
	XnoiseControlButton* stopButton;
	GtkNotebook* browsernotebook;
	GtkNotebook* tracklistnotebook;
	XnoiseAlbumImage* albumimage;
	XnoiseTrackInfobar* songProgressBar;
	XnoiseMediaBrowser* mediaBr;
	XnoiseTrackList* trackList;
	GtkWindow* fullscreenwindow;
	GtkButton* config_button;
};

struct _XnoiseMainWindowClass {
	GtkWindowClass parent_class;
};

typedef enum  {
	XNOISE_MAIN_WINDOW_PLAYER_REPEAT_MODE_NOT_AT_ALL = 0,
	XNOISE_MAIN_WINDOW_PLAYER_REPEAT_MODE_SINGLE,
	XNOISE_MAIN_WINDOW_PLAYER_REPEAT_MODE_ALL,
	XNOISE_MAIN_WINDOW_PLAYER_REPEAT_MODE_RANDOM
} XnoiseMainWindowPlayerRepeatMode;

struct _XnoisePlayPauseButton {
	GtkButton parent_instance;
	XnoisePlayPauseButtonPrivate * priv;
};

struct _XnoisePlayPauseButtonClass {
	GtkButtonClass parent_class;
};

struct _XnoiseTrackInfobar {
	GtkVBox parent_instance;
	XnoiseTrackInfobarPrivate * priv;
};

struct _XnoiseTrackInfobarClass {
	GtkVBoxClass parent_class;
};

struct _XnoiseTrackProgressBar {
	GtkProgressBar parent_instance;
	XnoiseTrackProgressBarPrivate * priv;
};

struct _XnoiseTrackProgressBarClass {
	GtkProgressBarClass parent_class;
};

struct _XnoiseVideoScreen {
	GtkDrawingArea parent_instance;
	XnoiseVideoScreenPrivate * priv;
};

struct _XnoiseVideoScreenClass {
	GtkDrawingAreaClass parent_class;
};

struct _XnoiseVolumeSliderButton {
	GtkVolumeButton parent_instance;
	XnoiseVolumeSliderButtonPrivate * priv;
};

struct _XnoiseVolumeSliderButtonClass {
	GtkVolumeButtonClass parent_class;
};


GType xnoise_main_get_type (void) G_GNUC_CONST;
extern gboolean xnoise_main_show_plugin_state;
extern gboolean xnoise_main_no_plugins;
XnoiseMain* xnoise_main_new (void);
XnoiseMain* xnoise_main_construct (GType object_type);
void xnoise_main_add_track_to_gst_player (XnoiseMain* self, const gchar* uri);
void xnoise_main_save_activated_plugins (XnoiseMain* self);
void xnoise_main_save_tracklist (XnoiseMain* self);
void xnoise_main_quit (XnoiseMain* self);
XnoiseMain* xnoise_main_get_instance (void);
GType xnoise_album_image_get_type (void) G_GNUC_CONST;
XnoiseAlbumImage* xnoise_album_image_new (void);
XnoiseAlbumImage* xnoise_album_image_construct (GType object_type);
void xnoise_album_image_load_default_image (XnoiseAlbumImage* self);
GFile* xnoise_get_albumimage_for_artistalbum (const gchar* artist, const gchar* album, const gchar* size);
gboolean xnoise_thumbnail_available (const gchar* uri, GFile** _thumb);
gchar* xnoise_escape_album_for_local_folder_search (const gchar* _artist, const gchar* album_name);
gchar* xnoise_escape_for_local_folder_search (const gchar* value);
GType xnoise_album_image_loader_get_type (void) G_GNUC_CONST;
XnoiseAlbumImageLoader* xnoise_album_image_loader_new (void);
XnoiseAlbumImageLoader* xnoise_album_image_loader_construct (GType object_type);
gboolean xnoise_album_image_loader_fetch_image (XnoiseAlbumImageLoader* self);
GType xnoise_ialbum_cover_image_get_type (void) G_GNUC_CONST;
void xnoise_ialbum_cover_image_find_image (XnoiseIAlbumCoverImage* self);
GType xnoise_ialbum_cover_image_provider_get_type (void) G_GNUC_CONST;
XnoiseIAlbumCoverImage* xnoise_ialbum_cover_image_provider_from_tags (XnoiseIAlbumCoverImageProvider* self, const gchar* artist, const gchar* album);
GType xnoise_item_handler_get_type (void) G_GNUC_CONST;
GType xnoise_item_handler_type_get_type (void) G_GNUC_CONST;
GType xnoise_item_type_get_type (void) G_GNUC_CONST;
GType xnoise_action_context_get_type (void) G_GNUC_CONST;
GType xnoise_item_selection_type_get_type (void) G_GNUC_CONST;
void xnoise_action_free (XnoiseAction* self);
GType xnoise_item_handler_manager_get_type (void) G_GNUC_CONST;
GType xnoise_handler_add_all_to_tracklist_get_type (void) G_GNUC_CONST;
XnoiseHandlerAddAllToTracklist* xnoise_handler_add_all_to_tracklist_new (void);
XnoiseHandlerAddAllToTracklist* xnoise_handler_add_all_to_tracklist_construct (GType object_type);
GType xnoise_handler_add_to_tracklist_get_type (void) G_GNUC_CONST;
XnoiseHandlerAddToTracklist* xnoise_handler_add_to_tracklist_new (void);
XnoiseHandlerAddToTracklist* xnoise_handler_add_to_tracklist_construct (GType object_type);
GType xnoise_handler_edit_tags_get_type (void) G_GNUC_CONST;
XnoiseHandlerEditTags* xnoise_handler_edit_tags_new (void);
XnoiseHandlerEditTags* xnoise_handler_edit_tags_construct (GType object_type);
GType xnoise_tag_title_editor_get_type (void) G_GNUC_CONST;
GType xnoise_item_get_type (void) G_GNUC_CONST;
XnoiseItem* xnoise_item_dup (const XnoiseItem* self);
void xnoise_item_free (XnoiseItem* self);
void xnoise_item_copy (const XnoiseItem* self, XnoiseItem* dest);
void xnoise_item_destroy (XnoiseItem* self);
XnoiseTagTitleEditor* xnoise_tag_title_editor_new (XnoiseItem* _item);
XnoiseTagTitleEditor* xnoise_tag_title_editor_construct (GType object_type, XnoiseItem* _item);
GType xnoise_handler_play_item_get_type (void) G_GNUC_CONST;
XnoiseHandlerPlayItem* xnoise_handler_play_item_new (void);
XnoiseHandlerPlayItem* xnoise_handler_play_item_construct (GType object_type);
GType xnoise_handler_remove_track_get_type (void) G_GNUC_CONST;
XnoiseHandlerRemoveTrack* xnoise_handler_remove_track_new (void);
XnoiseHandlerRemoveTrack* xnoise_handler_remove_track_construct (GType object_type);
void xnoise_item_init (XnoiseItem *self, XnoiseItemType _type, const gchar* _uri, gint32 _db_id);
GType xnoise_item_converter_get_type (void) G_GNUC_CONST;
gpointer xnoise_track_data_ref (gpointer instance);
void xnoise_track_data_unref (gpointer instance);
GParamSpec* xnoise_param_spec_track_data (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void xnoise_value_set_track_data (GValue* value, gpointer v_object);
void xnoise_value_take_track_data (GValue* value, gpointer v_object);
gpointer xnoise_value_get_track_data (const GValue* value);
GType xnoise_track_data_get_type (void) G_GNUC_CONST;
XnoiseTrackData** xnoise_item_converter_to_trackdata (XnoiseItemConverter* self, XnoiseItem* item, gchar** searchtext, int* result_length1);
XnoiseItemConverter* xnoise_item_converter_new (void);
XnoiseItemConverter* xnoise_item_converter_construct (GType object_type);
XnoiseAction* xnoise_action_new (void);
XnoiseAction* xnoise_action_new (void);
gboolean xnoise_item_handler_set_manager (XnoiseItemHandler* self, XnoiseItemHandlerManager* _uhm);
XnoiseItemHandlerType xnoise_item_handler_handler_type (XnoiseItemHandler* self);
const gchar* xnoise_item_handler_handler_name (XnoiseItemHandler* self);
XnoiseAction* xnoise_item_handler_get_action (XnoiseItemHandler* self, XnoiseItemType type, XnoiseActionContext context, XnoiseItemSelectionType selection);
XnoiseItemHandler* xnoise_item_handler_construct (GType object_type);
GArray* xnoise_item_handler_manager_get_actions (XnoiseItemHandlerManager* self, XnoiseItemType type, XnoiseActionContext context, XnoiseItemSelectionType selection);
void xnoise_item_handler_manager_add_handler (XnoiseItemHandlerManager* self, XnoiseItemHandler* handler);
XnoiseItemHandler* xnoise_item_handler_manager_get_handler_by_type (XnoiseItemHandlerManager* self, XnoiseItemHandlerType type);
XnoiseItemHandler* xnoise_item_handler_manager_get_handler_by_name (XnoiseItemHandlerManager* self, const gchar* name);
void xnoise_item_handler_manager_test_func (XnoiseItemHandlerManager* self);
XnoiseItem* xnoise_item_handler_manager_create_item (const gchar* uri);
void xnoise_item_handler_manager_execute_actions_for_item (XnoiseItemHandlerManager* self, XnoiseItem* item, XnoiseActionContext context, GValue* data, XnoiseItemSelectionType selection);
XnoiseItemHandlerManager* xnoise_item_handler_manager_new (void);
XnoiseItemHandlerManager* xnoise_item_handler_manager_construct (GType object_type);
GQuark xnoise_database_db_error_quark (void);
gpointer xnoise_database_db_browser_ref (gpointer instance);
void xnoise_database_db_browser_unref (gpointer instance);
GParamSpec* xnoise_database_param_spec_db_browser (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void xnoise_database_value_set_db_browser (GValue* value, gpointer v_object);
void xnoise_database_value_take_db_browser (GValue* value, gpointer v_object);
gpointer xnoise_database_value_get_db_browser (const GValue* value);
GType xnoise_database_db_browser_get_type (void) G_GNUC_CONST;
XnoiseDatabaseDbBrowser* xnoise_database_db_browser_new (GError** error);
XnoiseDatabaseDbBrowser* xnoise_database_db_browser_construct (GType object_type, GError** error);
void xnoise_database_db_browser_cancel (XnoiseDatabaseDbBrowser* self);
void xnoise_database_db_browser_do_callback_transaction (XnoiseDatabaseDbBrowser* self, XnoiseDatabaseDbBrowserReaderCallback cb, void* cb_target);
gint xnoise_database_db_browser_count_artists_with_search (XnoiseDatabaseDbBrowser* self, gchar** searchtext);
gint32 xnoise_database_db_browser_count_videos (XnoiseDatabaseDbBrowser* self, gchar** searchtext);
gint xnoise_database_db_browser_count_artists (XnoiseDatabaseDbBrowser* self);
gboolean xnoise_database_db_browser_videos_available (XnoiseDatabaseDbBrowser* self);
gboolean xnoise_database_db_browser_streams_available (XnoiseDatabaseDbBrowser* self);
gboolean xnoise_database_db_browser_stream_in_db (XnoiseDatabaseDbBrowser* self, const gchar* uri);
gboolean xnoise_database_db_browser_track_in_db (XnoiseDatabaseDbBrowser* self, const gchar* uri);
gboolean xnoise_database_db_browser_get_uri_for_id (XnoiseDatabaseDbBrowser* self, gint id, gchar** val);
XnoiseTrackData** xnoise_database_db_browser_get_all_tracks (XnoiseDatabaseDbBrowser* self, gchar** searchtext, int* result_length1);
gboolean xnoise_database_db_browser_get_trackdata_for_id (XnoiseDatabaseDbBrowser* self, gint id, XnoiseTrackData** val);
gboolean xnoise_database_db_browser_get_stream_td_for_id (XnoiseDatabaseDbBrowser* self, gint id, XnoiseTrackData** val);
gchar* xnoise_database_db_browser_get_local_image_path_for_track (XnoiseDatabaseDbBrowser* self, gchar** uri);
gboolean xnoise_database_db_browser_get_trackdata_for_stream (XnoiseDatabaseDbBrowser* self, const gchar* uri, XnoiseTrackData** val);
gboolean xnoise_database_db_browser_get_trackdata_for_uri (XnoiseDatabaseDbBrowser* self, gchar** uri, XnoiseTrackData** val);
gchar** xnoise_database_db_browser_get_media_files (XnoiseDatabaseDbBrowser* self, int* result_length1);
gchar** xnoise_database_db_browser_get_media_folders (XnoiseDatabaseDbBrowser* self, int* result_length1);
GType xnoise_stream_data_get_type (void) G_GNUC_CONST;
XnoiseStreamData* xnoise_stream_data_dup (const XnoiseStreamData* self);
void xnoise_stream_data_free (XnoiseStreamData* self);
void xnoise_stream_data_copy (const XnoiseStreamData* self, XnoiseStreamData* dest);
void xnoise_stream_data_destroy (XnoiseStreamData* self);
XnoiseStreamData* xnoise_database_db_browser_get_streams (XnoiseDatabaseDbBrowser* self, int* result_length1);
gchar* xnoise_database_db_browser_get_single_stream_uri (XnoiseDatabaseDbBrowser* self, const gchar* name);
gint xnoise_database_db_browser_get_track_id_for_path (XnoiseDatabaseDbBrowser* self, const gchar* uri);
XnoiseItem* xnoise_database_db_browser_get_some_lastused_items (XnoiseDatabaseDbBrowser* self, gint limit, gint offset, int* result_length1);
guint xnoise_database_db_browser_count_lastused_items (XnoiseDatabaseDbBrowser* self);
XnoiseItem* xnoise_database_db_browser_get_lastused_items (XnoiseDatabaseDbBrowser* self, int* result_length1);
gchar** xnoise_database_db_browser_get_uris (XnoiseDatabaseDbBrowser* self, const gchar* search_string, int* result_length1);
XnoiseTrackData** xnoise_database_db_browser_get_stream_data (XnoiseDatabaseDbBrowser* self, gchar** searchtext, int* result_length1);
XnoiseTrackData** xnoise_database_db_browser_get_video_data (XnoiseDatabaseDbBrowser* self, gchar** searchtext, int* result_length1);
XnoiseTrackData** xnoise_database_db_browser_get_trackdata_for_video (XnoiseDatabaseDbBrowser* self, gchar** searchtext, int* result_length1);
XnoiseTrackData** xnoise_database_db_browser_get_trackdata_for_streams (XnoiseDatabaseDbBrowser* self, gchar** searchtext, int* result_length1);
gchar** xnoise_database_db_browser_get_videos (XnoiseDatabaseDbBrowser* self, gchar** searchtext, int* result_length1);
XnoiseItem* xnoise_database_db_browser_get_some_artists (XnoiseDatabaseDbBrowser* self, gint limit, gint offset, int* result_length1);
XnoiseItem* xnoise_database_db_browser_get_artists_with_search (XnoiseDatabaseDbBrowser* self, gchar** searchtext, int* result_length1);
XnoiseTrackData** xnoise_database_db_browser_get_trackdata_by_albumid (XnoiseDatabaseDbBrowser* self, gchar** searchtext, gint32 id, int* result_length1);
XnoiseTrackData** xnoise_database_db_browser_get_trackdata_by_artistid (XnoiseDatabaseDbBrowser* self, gchar** searchtext, gint32 id, int* result_length1);
XnoiseItem* xnoise_database_db_browser_get_artistitem_by_artistid (XnoiseDatabaseDbBrowser* self, gchar** searchtext, gint32 id);
XnoiseTrackData* xnoise_database_db_browser_get_trackdata_by_titleid (XnoiseDatabaseDbBrowser* self, gchar** searchtext, gint32 id);
XnoiseItem* xnoise_database_db_browser_get_albums_with_search (XnoiseDatabaseDbBrowser* self, gchar** searchtext, gint32 id, int* result_length1);
XnoiseTrackData** xnoise_database_db_browser_get_titles_with_mediatypes_and_ids (XnoiseDatabaseDbBrowser* self, const gchar* artist, const gchar* album, int* result_length1);
GType xnoise_database_db_writer_get_type (void) G_GNUC_CONST;
GType xnoise_database_db_writer_change_type_get_type (void) G_GNUC_CONST;
XnoiseDatabaseDbWriter* xnoise_database_db_writer_new (GError** error);
XnoiseDatabaseDbWriter* xnoise_database_db_writer_construct (GType object_type, GError** error);
GType xnoise_media_browser_model_get_type (void) G_GNUC_CONST;
void xnoise_database_db_writer_register_change_callback (XnoiseDatabaseDbWriter* self, XnoiseMediaBrowserModel* mbm, XnoiseDatabaseDbWriterChangeNotificationCallback cb, void* cb_target);
gchar* xnoise_database_db_writer_get_uri_for_item_id (XnoiseDatabaseDbWriter* self, gint32 id);
gboolean xnoise_database_db_writer_set_local_image_for_album (XnoiseDatabaseDbWriter* self, gchar** artist, gchar** album, const gchar* image_path);
gchar** xnoise_database_db_writer_get_media_folders (XnoiseDatabaseDbWriter* self, int* result_length1);
gboolean xnoise_database_db_writer_get_trackdata_for_stream (XnoiseDatabaseDbWriter* self, const gchar* uri, XnoiseTrackData** val);
gint xnoise_database_db_writer_get_track_id_for_uri (XnoiseDatabaseDbWriter* self, const gchar* uri);
gboolean xnoise_database_db_writer_update_title (XnoiseDatabaseDbWriter* self, XnoiseItem** item, XnoiseTrackData** td);
gboolean xnoise_database_db_writer_insert_title (XnoiseDatabaseDbWriter* self, XnoiseTrackData** td);
void xnoise_database_db_writer_delete_uri (XnoiseDatabaseDbWriter* self, const gchar* uri);
gint xnoise_database_db_writer_uri_entry_exists (XnoiseDatabaseDbWriter* self, const gchar* uri);
void xnoise_database_db_writer_add_single_stream_to_collection (XnoiseDatabaseDbWriter* self, const gchar* uri, const gchar* name);
void xnoise_database_db_writer_add_single_file_to_collection (XnoiseDatabaseDbWriter* self, const gchar* uri);
void xnoise_database_db_writer_add_single_folder_to_collection (XnoiseDatabaseDbWriter* self, const gchar* mfolder);
GType xnoise_worker_job_get_type (void) G_GNUC_CONST;
void xnoise_database_db_writer_write_final_tracks_to_db (XnoiseDatabaseDbWriter* self, XnoiseWorkerJob* job, GError** error);
void xnoise_database_db_writer_do_callback_transaction (XnoiseDatabaseDbWriter* self, XnoiseDatabaseDbWriterWriterCallback cb, void* cb_target);
void xnoise_database_db_writer_del_all_folders (XnoiseDatabaseDbWriter* self);
void xnoise_database_db_writer_del_all_files (XnoiseDatabaseDbWriter* self);
void xnoise_database_db_writer_del_all_streams (XnoiseDatabaseDbWriter* self);
gboolean xnoise_database_db_writer_delete_local_media_data (XnoiseDatabaseDbWriter* self);
void xnoise_database_db_writer_begin_transaction (XnoiseDatabaseDbWriter* self);
void xnoise_database_db_writer_commit_transaction (XnoiseDatabaseDbWriter* self);
gboolean xnoise_database_db_writer_get_in_transaction (XnoiseDatabaseDbWriter* self);
GType xnoise_ilyrics_get_type (void) G_GNUC_CONST;
void xnoise_ilyrics_find_lyrics (XnoiseILyrics* self);
gchar* xnoise_ilyrics_get_identifier (XnoiseILyrics* self);
gchar* xnoise_ilyrics_get_credits (XnoiseILyrics* self);
guint xnoise_ilyrics_get_timeout (XnoiseILyrics* self);
gboolean xnoise_ilyrics_timeout_elapsed (XnoiseILyrics* self);
void xnoise_ilyrics_destruct (XnoiseILyrics* self);
GType xnoise_plugin_module_container_get_type (void) G_GNUC_CONST;
GType xnoise_plugin_module_iplugin_get_type (void) G_GNUC_CONST;
GType xnoise_lyrics_loader_get_type (void) G_GNUC_CONST;
GType xnoise_ilyrics_provider_get_type (void) G_GNUC_CONST;
XnoiseILyrics* xnoise_ilyrics_provider_from_tags (XnoiseILyricsProvider* self, XnoiseLyricsLoader* loader, const gchar* artist, const gchar* title, XnoiseLyricsFetchedCallback cb, void* cb_target);
gboolean xnoise_ilyrics_provider_equals (XnoiseILyricsProvider* self, XnoiseILyricsProvider* other);
gint xnoise_ilyrics_provider_get_priority (XnoiseILyricsProvider* self);
void xnoise_ilyrics_provider_set_priority (XnoiseILyricsProvider* self, gint value);
const gchar* xnoise_ilyrics_provider_get_provider_name (XnoiseILyricsProvider* self);
XnoiseLyricsLoader* xnoise_lyrics_loader_new (void);
XnoiseLyricsLoader* xnoise_lyrics_loader_construct (GType object_type);
void xnoise_lyrics_loader_remove_lyrics_provider (XnoiseLyricsLoader* self, XnoiseILyricsProvider* lp);
gboolean xnoise_lyrics_loader_fetch (XnoiseLyricsLoader* self, const gchar* _artist, const gchar* _title);
GType xnoise_lyrics_view_get_type (void) G_GNUC_CONST;
XnoiseLyricsView* xnoise_lyrics_view_new (void);
XnoiseLyricsView* xnoise_lyrics_view_construct (GType object_type);
void xnoise_lyrics_view_lyrics_provider_unregister (XnoiseLyricsView* self, XnoiseILyricsProvider* lp);
XnoiseLyricsLoader* xnoise_lyrics_view_get_loader (XnoiseLyricsView* self);
GType xnoise_iparams_get_type (void) G_GNUC_CONST;
GType xnoise_media_browser_get_type (void) G_GNUC_CONST;
XnoiseMediaBrowser* xnoise_media_browser_new (void);
XnoiseMediaBrowser* xnoise_media_browser_construct (GType object_type);
void xnoise_media_browser_on_searchtext_changed (XnoiseMediaBrowser* self);
gboolean xnoise_media_browser_change_model_data (XnoiseMediaBrowser* self);
gboolean xnoise_media_browser_update_view (XnoiseMediaBrowser* self);
void xnoise_media_browser_on_row_expanded (XnoiseMediaBrowser* self, GtkTreeIter* iter, GtkTreePath* path);
void xnoise_media_browser_on_row_collapsed (XnoiseMediaBrowser* self, GtkTreeIter* iter, GtkTreePath* path);
void xnoise_media_browser_resize_line_width (XnoiseMediaBrowser* self, gint new_width);
gboolean xnoise_media_browser_get_use_linebreaks (XnoiseMediaBrowser* self);
void xnoise_media_browser_set_use_linebreaks (XnoiseMediaBrowser* self, gboolean value);
gboolean xnoise_media_browser_get_use_treelines (XnoiseMediaBrowser* self);
void xnoise_media_browser_set_use_treelines (XnoiseMediaBrowser* self, gboolean value);
GType xnoise_media_browser_model_track_sorting_get_type (void) G_GNUC_CONST;
GType xnoise_media_browser_model_column_get_type (void) G_GNUC_CONST;
GType xnoise_media_browser_model_collection_type_get_type (void) G_GNUC_CONST;
gint xnoise_media_browser_model_get_max_icon_width (XnoiseMediaBrowserModel* self);
void xnoise_media_browser_model_filter (XnoiseMediaBrowserModel* self);
void xnoise_media_browser_model_remove_all (XnoiseMediaBrowserModel* self);
void xnoise_media_browser_model_insert_video_sorted (XnoiseMediaBrowserModel* self, XnoiseTrackData** tda, int tda_length1);
void xnoise_media_browser_model_insert_stream_sorted (XnoiseMediaBrowserModel* self, XnoiseTrackData** tda, int tda_length1);
void xnoise_media_browser_model_move_title_iter_sorted (XnoiseMediaBrowserModel* self, GtkTreeIter* org_iter, XnoiseTrackData** td);
void xnoise_media_browser_model_move_artist_iter_sorted (XnoiseMediaBrowserModel* self, GtkTreeIter* org_iter, const gchar* name);
void xnoise_media_browser_model_move_album_iter_sorted (XnoiseMediaBrowserModel* self, GtkTreeIter* org_iter, const gchar* name);
void xnoise_media_browser_model_cancel_fill_model (XnoiseMediaBrowserModel* self);
gboolean xnoise_media_browser_model_populate_model (XnoiseMediaBrowserModel* self);
void xnoise_media_browser_model_unload_children (XnoiseMediaBrowserModel* self, GtkTreeIter* iter);
void xnoise_media_browser_model_load_children (XnoiseMediaBrowserModel* self, GtkTreeIter* iter);
GType xnoise_dnd_data_get_type (void) G_GNUC_CONST;
XnoiseDndData* xnoise_dnd_data_dup (const XnoiseDndData* self);
void xnoise_dnd_data_free (XnoiseDndData* self);
XnoiseDndData* xnoise_media_browser_model_get_dnd_data_for_path (XnoiseMediaBrowserModel* self, GtkTreePath** treepath, int* result_length1);
XnoiseMediaBrowserModel* xnoise_media_browser_model_new (void);
XnoiseMediaBrowserModel* xnoise_media_browser_model_construct (GType object_type);
gboolean xnoise_media_browser_model_get_populating_model (XnoiseMediaBrowserModel* self);
void xnoise_iparams_read_params_data (XnoiseIParams* self);
void xnoise_iparams_write_params_data (XnoiseIParams* self);
GType xnoise_params_get_type (void) G_GNUC_CONST;
void xnoise_params_init (void);
void xnoise_params_iparams_register (XnoiseIParams* iparam);
void xnoise_params_set_start_parameters_in_implementors (void);
void xnoise_params_write_all_parameters_to_file (void);
gint xnoise_params_get_int_value (const gchar* key);
gdouble xnoise_params_get_double_value (const gchar* key);
gchar** xnoise_params_get_string_list_value (const gchar* key, int* result_length1);
gchar* xnoise_params_get_string_value (const gchar* key);
void xnoise_params_set_int_value (const gchar* key, gint value);
void xnoise_params_set_double_value (const gchar* key, gdouble value);
void xnoise_params_set_string_list_value (const gchar* key, gchar** value, int value_length1);
void xnoise_params_set_string_value (const gchar* key, const gchar* value);
XnoiseParams* xnoise_params_new (void);
XnoiseParams* xnoise_params_construct (GType object_type);
GType xnoise_gst_player_get_type (void) G_GNUC_CONST;
GType xnoise_video_screen_get_type (void) G_GNUC_CONST;
XnoiseGstPlayer* xnoise_gst_player_new (void);
XnoiseGstPlayer* xnoise_gst_player_construct (GType object_type);
void xnoise_gst_player_set_subtitles_for_current_video (XnoiseGstPlayer* self, const gchar* s_uri);
void xnoise_gst_player_play (XnoiseGstPlayer* self);
void xnoise_gst_player_pause (XnoiseGstPlayer* self);
void xnoise_gst_player_stop (XnoiseGstPlayer* self);
void xnoise_gst_player_playSong (XnoiseGstPlayer* self, gboolean force_play);
void xnoise_gst_player_request_time_offset_seconds (XnoiseGstPlayer* self, gint seconds);
gchar** xnoise_gst_player_get_available_subtitles (XnoiseGstPlayer* self, int* result_length1);
gchar** xnoise_gst_player_get_available_audiotracks (XnoiseGstPlayer* self, int* result_length1);
gboolean xnoise_gst_player_get_current_has_video_track (XnoiseGstPlayer* self);
gboolean xnoise_gst_player_get_current_has_subtitles (XnoiseGstPlayer* self);
gdouble xnoise_gst_player_get_volume (XnoiseGstPlayer* self);
void xnoise_gst_player_set_volume (XnoiseGstPlayer* self, gdouble value);
gboolean xnoise_gst_player_get_playing (XnoiseGstPlayer* self);
void xnoise_gst_player_set_playing (XnoiseGstPlayer* self, gboolean value);
gboolean xnoise_gst_player_get_paused (XnoiseGstPlayer* self);
void xnoise_gst_player_set_paused (XnoiseGstPlayer* self, gboolean value);
gboolean xnoise_gst_player_get_seeking (XnoiseGstPlayer* self);
void xnoise_gst_player_set_seeking (XnoiseGstPlayer* self, gboolean value);
gboolean xnoise_gst_player_get_is_stream (XnoiseGstPlayer* self);
gboolean xnoise_gst_player_get_buffering (XnoiseGstPlayer* self);
gint64 xnoise_gst_player_get_length_time (XnoiseGstPlayer* self);
void xnoise_gst_player_set_length_time (XnoiseGstPlayer* self, gint64 value);
const gchar* xnoise_gst_player_get_uri (XnoiseGstPlayer* self);
void xnoise_gst_player_set_uri (XnoiseGstPlayer* self, const gchar* value);
const gchar* xnoise_gst_player_get_suburi (XnoiseGstPlayer* self);
void xnoise_gst_player_set_suburi (XnoiseGstPlayer* self, const gchar* value);
gint xnoise_gst_player_get_current_text (XnoiseGstPlayer* self);
void xnoise_gst_player_set_current_text (XnoiseGstPlayer* self, gint value);
gint xnoise_gst_player_get_current_audio (XnoiseGstPlayer* self);
void xnoise_gst_player_set_current_audio (XnoiseGstPlayer* self, gint value);
gint xnoise_gst_player_get_n_text (XnoiseGstPlayer* self);
gdouble xnoise_gst_player_get_gst_position (XnoiseGstPlayer* self);
void xnoise_gst_player_set_gst_position (XnoiseGstPlayer* self, gdouble value);
GQuark xnoise_playlist_reader_error_quark (void);
GType xnoise_playlist_list_type_get_type (void) G_GNUC_CONST;
GType xnoise_playlist_result_get_type (void) G_GNUC_CONST;
GType xnoise_playlist_target_type_get_type (void) G_GNUC_CONST;
gboolean xnoise_playlist_is_playlist_extension (const gchar* ext);
extern gboolean xnoise_playlist_debug;
gboolean xnoise_playlist_is_known_playlist_extension (gchar** ext);
gchar* xnoise_playlist_get_extension (GFile* f);
gpointer xnoise_playlist_entry_ref (gpointer instance);
void xnoise_playlist_entry_unref (gpointer instance);
GParamSpec* xnoise_playlist_param_spec_entry (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void xnoise_playlist_value_set_entry (GValue* value, gpointer v_object);
void xnoise_playlist_value_take_entry (GValue* value, gpointer v_object);
gpointer xnoise_playlist_value_get_entry (const GValue* value);
GType xnoise_playlist_entry_get_type (void) G_GNUC_CONST;
GType xnoise_playlist_entry_field_get_type (void) G_GNUC_CONST;
XnoisePlaylistEntry* xnoise_playlist_entry_new (void);
XnoisePlaylistEntry* xnoise_playlist_entry_construct (GType object_type);
void xnoise_playlist_entry_add_field (XnoisePlaylistEntry* self, XnoisePlaylistEntryField field, const gchar* val);
XnoisePlaylistEntryField* xnoise_playlist_entry_get_contained_fields (XnoisePlaylistEntry* self, int* result_length1);
gchar* xnoise_playlist_entry_get_field (XnoisePlaylistEntry* self, XnoisePlaylistEntryField field);
gchar* xnoise_playlist_entry_get_uri (XnoisePlaylistEntry* self);
gchar* xnoise_playlist_entry_get_rel_path (XnoisePlaylistEntry* self);
gchar* xnoise_playlist_entry_get_abs_path (XnoisePlaylistEntry* self);
gchar* xnoise_playlist_entry_get_title (XnoisePlaylistEntry* self);
gchar* xnoise_playlist_entry_get_author (XnoisePlaylistEntry* self);
gchar* xnoise_playlist_entry_get_genre (XnoisePlaylistEntry* self);
gchar* xnoise_playlist_entry_get_album (XnoisePlaylistEntry* self);
gchar* xnoise_playlist_entry_get_copyright (XnoisePlaylistEntry* self);
gchar* xnoise_playlist_entry_get_duration_string (XnoisePlaylistEntry* self);
gchar* xnoise_playlist_entry_get_param_name (XnoisePlaylistEntry* self);
gchar* xnoise_playlist_entry_get_param_value (XnoisePlaylistEntry* self);
glong xnoise_playlist_entry_get_duration (XnoisePlaylistEntry* self);
gboolean xnoise_playlist_entry_is_remote (XnoisePlaylistEntry* self);
gboolean xnoise_playlist_entry_is_playlist (XnoisePlaylistEntry* self);
XnoisePlaylistTargetType xnoise_playlist_entry_get_target_type (XnoisePlaylistEntry* self);
void xnoise_playlist_entry_set_target_type (XnoisePlaylistEntry* self, XnoisePlaylistTargetType value);
const gchar* xnoise_playlist_entry_get_base_path (XnoisePlaylistEntry* self);
void xnoise_playlist_entry_set_base_path (XnoisePlaylistEntry* self, const gchar* value);
gpointer xnoise_playlist_entry_collection_ref (gpointer instance);
void xnoise_playlist_entry_collection_unref (gpointer instance);
GParamSpec* xnoise_playlist_param_spec_entry_collection (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void xnoise_playlist_value_set_entry_collection (GValue* value, gpointer v_object);
void xnoise_playlist_value_take_entry_collection (GValue* value, gpointer v_object);
gpointer xnoise_playlist_value_get_entry_collection (const GValue* value);
GType xnoise_playlist_entry_collection_get_type (void) G_GNUC_CONST;
XnoisePlaylistEntryCollection* xnoise_playlist_entry_collection_new (void);
XnoisePlaylistEntryCollection* xnoise_playlist_entry_collection_construct (GType object_type);
gint xnoise_playlist_entry_collection_get_size (XnoisePlaylistEntryCollection* self);
void xnoise_playlist_entry_collection_add_general_info (XnoisePlaylistEntryCollection* self, const gchar* key, const gchar* val);
gchar** xnoise_playlist_entry_collection_get_general_info_keys (XnoisePlaylistEntryCollection* self, int* result_length1);
gchar* xnoise_playlist_entry_collection_get_general_info (XnoisePlaylistEntryCollection* self, const gchar* key);
gboolean xnoise_playlist_entry_collection_data_available (XnoisePlaylistEntryCollection* self);
gchar** xnoise_playlist_entry_collection_get_found_uris (XnoisePlaylistEntryCollection* self, int* result_length1);
gchar* xnoise_playlist_entry_collection_get_title_for_uri (XnoisePlaylistEntryCollection* self, gchar** uri_needle);
gchar* xnoise_playlist_entry_collection_get_author_for_uri (XnoisePlaylistEntryCollection* self, gchar** uri_needle);
gchar* xnoise_playlist_entry_collection_get_genre_for_uri (XnoisePlaylistEntryCollection* self, gchar** uri_needle);
gchar* xnoise_playlist_entry_collection_get_album_for_uri (XnoisePlaylistEntryCollection* self, gchar** uri_needle);
gchar* xnoise_playlist_entry_collection_get_copyright_for_uri (XnoisePlaylistEntryCollection* self, gchar** uri_needle);
gchar* xnoise_playlist_entry_collection_get_duration_string_for_uri (XnoisePlaylistEntryCollection* self, gchar** uri_needle);
glong xnoise_playlist_entry_collection_get_duration_for_uri (XnoisePlaylistEntryCollection* self, gchar** uri_needle);
gchar* xnoise_playlist_entry_collection_get_param_name_for_uri (XnoisePlaylistEntryCollection* self, gchar** uri_needle);
gchar* xnoise_playlist_entry_collection_get_param_value_for_uri (XnoisePlaylistEntryCollection* self, gchar** uri_needle);
gboolean xnoise_playlist_entry_collection_get_is_remote_for_uri (XnoisePlaylistEntryCollection* self, gchar** uri_needle);
gboolean xnoise_playlist_entry_collection_get_is_playlist_for_uri (XnoisePlaylistEntryCollection* self, gchar** uri_needle);
gint xnoise_playlist_entry_collection_get_number_of_entries (XnoisePlaylistEntryCollection* self);
gboolean xnoise_playlist_entry_collection_contains (XnoisePlaylistEntryCollection* self, XnoisePlaylistEntry* d);
gboolean xnoise_playlist_entry_collection_contains_field (XnoisePlaylistEntryCollection* self, XnoisePlaylistEntryField field, const gchar* value);
XnoisePlaylistEntryField* xnoise_playlist_entry_collection_get_contained_fields_for_idx (XnoisePlaylistEntryCollection* self, gint idx, int* result_length1);
XnoisePlaylistEntryField* xnoise_playlist_entry_collection_get_contained_fields_for_uri (XnoisePlaylistEntryCollection* self, gchar** uri, int* result_length1);
gpointer xnoise_playlist_entry_collection_iterator_ref (gpointer instance);
void xnoise_playlist_entry_collection_iterator_unref (gpointer instance);
GParamSpec* xnoise_playlist_entry_collection_param_spec_iterator (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void xnoise_playlist_entry_collection_value_set_iterator (GValue* value, gpointer v_object);
void xnoise_playlist_entry_collection_value_take_iterator (GValue* value, gpointer v_object);
gpointer xnoise_playlist_entry_collection_value_get_iterator (const GValue* value);
GType xnoise_playlist_entry_collection_iterator_get_type (void) G_GNUC_CONST;
XnoisePlaylistEntryCollectionIterator* xnoise_playlist_entry_collection_iterator (XnoisePlaylistEntryCollection* self);
gint xnoise_playlist_entry_collection_index_of (XnoisePlaylistEntryCollection* self, XnoisePlaylistEntry* d);
XnoisePlaylistEntry* xnoise_playlist_entry_collection_get (XnoisePlaylistEntryCollection* self, gint index);
void xnoise_playlist_entry_collection_set (XnoisePlaylistEntryCollection* self, gint index, XnoisePlaylistEntry* item);
gboolean xnoise_playlist_entry_collection_append (XnoisePlaylistEntryCollection* self, XnoisePlaylistEntry* item);
void xnoise_playlist_entry_collection_insert (XnoisePlaylistEntryCollection* self, gint index, XnoisePlaylistEntry* item);
gboolean xnoise_playlist_entry_collection_remove (XnoisePlaylistEntryCollection* self, XnoisePlaylistEntry* item);
XnoisePlaylistEntry* xnoise_playlist_entry_collection_remove_at (XnoisePlaylistEntryCollection* self, gint index);
void xnoise_playlist_entry_collection_clear (XnoisePlaylistEntryCollection* self);
void xnoise_playlist_entry_collection_merge (XnoisePlaylistEntryCollection* self, XnoisePlaylistEntryCollection* data_collection);
XnoisePlaylistEntryCollectionIterator* xnoise_playlist_entry_collection_iterator_new (XnoisePlaylistEntryCollection* dc);
XnoisePlaylistEntryCollectionIterator* xnoise_playlist_entry_collection_iterator_construct (GType object_type, XnoisePlaylistEntryCollection* dc);
gboolean xnoise_playlist_entry_collection_iterator_next (XnoisePlaylistEntryCollectionIterator* self);
gboolean xnoise_playlist_entry_collection_iterator_first (XnoisePlaylistEntryCollectionIterator* self);
XnoisePlaylistEntry* xnoise_playlist_entry_collection_iterator_get (XnoisePlaylistEntryCollectionIterator* self);
void xnoise_playlist_entry_collection_iterator_remove (XnoisePlaylistEntryCollectionIterator* self);
gboolean xnoise_playlist_entry_collection_iterator_previous (XnoisePlaylistEntryCollectionIterator* self);
gboolean xnoise_playlist_entry_collection_iterator_has_previous (XnoisePlaylistEntryCollectionIterator* self);
void xnoise_playlist_entry_collection_iterator_set (XnoisePlaylistEntryCollectionIterator* self, XnoisePlaylistEntry* item);
void xnoise_playlist_entry_collection_iterator_insert (XnoisePlaylistEntryCollectionIterator* self, XnoisePlaylistEntry* item);
void xnoise_playlist_entry_collection_iterator_append (XnoisePlaylistEntryCollectionIterator* self, XnoisePlaylistEntry* item);
gint xnoise_playlist_entry_collection_iterator_index (XnoisePlaylistEntryCollectionIterator* self);
GType xnoise_playlist_reader_get_type (void) G_GNUC_CONST;
XnoisePlaylistReader* xnoise_playlist_reader_new (void);
XnoisePlaylistReader* xnoise_playlist_reader_construct (GType object_type);
XnoisePlaylistResult xnoise_playlist_reader_read (XnoisePlaylistReader* self, const gchar* list_uri, GCancellable* cancellable, GError** error);
void xnoise_playlist_reader_read_asyn (XnoisePlaylistReader* self, const gchar* list_uri, GCancellable* cancellable, GAsyncReadyCallback _callback_, gpointer _user_data_);
XnoisePlaylistResult xnoise_playlist_reader_read_asyn_finish (XnoisePlaylistReader* self, GAsyncResult* _res_, GError** error);
gboolean xnoise_playlist_reader_data_available (XnoisePlaylistReader* self);
gint xnoise_playlist_reader_get_number_of_entries (XnoisePlaylistReader* self);
gchar** xnoise_playlist_reader_get_found_uris (XnoisePlaylistReader* self, int* result_length1);
gchar* xnoise_playlist_reader_get_title_for_uri (XnoisePlaylistReader* self, gchar** uri_needle);
gchar* xnoise_playlist_reader_get_author_for_uri (XnoisePlaylistReader* self, gchar** uri_needle);
gchar* xnoise_playlist_reader_get_genre_for_uri (XnoisePlaylistReader* self, gchar** uri_needle);
gchar* xnoise_playlist_reader_get_album_for_uri (XnoisePlaylistReader* self, gchar** uri_needle);
gchar* xnoise_playlist_reader_get_copyright_for_uri (XnoisePlaylistReader* self, gchar** uri_needle);
gchar* xnoise_playlist_reader_get_duration_string_for_uri (XnoisePlaylistReader* self, gchar** uri_needle);
glong xnoise_playlist_reader_get_duration_for_uri (XnoisePlaylistReader* self, gchar** uri_needle);
gboolean xnoise_playlist_reader_get_is_remote_for_uri (XnoisePlaylistReader* self, gchar** uri_needle);
gboolean xnoise_playlist_reader_get_is_playlist_for_uri (XnoisePlaylistReader* self, gchar** uri_needle);
XnoisePlaylistListType xnoise_playlist_reader_get_ptype (XnoisePlaylistReader* self);
const gchar* xnoise_playlist_reader_get_playlist_uri (XnoisePlaylistReader* self);
XnoisePlaylistEntryCollection* xnoise_playlist_reader_get_data_collection (XnoisePlaylistReader* self);
XnoisePlaylistListType xnoise_playlist_get_playlist_type_for_uri (gchar** uri_);
XnoisePlaylistListType xnoise_playlist_get_type_by_extension (gchar** uri_);
XnoisePlaylistListType xnoise_playlist_get_type_by_data (gchar** uri_);
glong xnoise_playlist_get_duration_from_string (gchar** duration_string);
GFile* xnoise_playlist_get_file_for_location (const gchar* adr, gchar** base_path, XnoisePlaylistTargetType* tt);
GType xnoise_plugin_module_information_get_type (void) G_GNUC_CONST;
XnoisePluginModuleContainer* xnoise_plugin_module_container_new (XnoisePluginModuleInformation* info);
XnoisePluginModuleContainer* xnoise_plugin_module_container_construct (GType object_type, XnoisePluginModuleInformation* info);
void xnoise_plugin_module_container_activate (XnoisePluginModuleContainer* self);
void xnoise_plugin_module_container_deactivate (XnoisePluginModuleContainer* self);
GtkWidget* xnoise_plugin_module_container_settingwidget (XnoisePluginModuleContainer* self);
XnoisePluginModuleInformation* xnoise_plugin_module_container_get_info (XnoisePluginModuleContainer* self);
gboolean xnoise_plugin_module_container_get_loaded (XnoisePluginModuleContainer* self);
gboolean xnoise_plugin_module_container_get_activated (XnoisePluginModuleContainer* self);
gboolean xnoise_plugin_module_container_get_configurable (XnoisePluginModuleContainer* self);
gboolean xnoise_plugin_module_container_get_is_lyrics_plugin (XnoisePluginModuleContainer* self);
gboolean xnoise_plugin_module_container_get_is_album_image_plugin (XnoisePluginModuleContainer* self);
GType xnoise_plugin_module_loader_get_type (void) G_GNUC_CONST;
XnoisePluginModuleLoader* xnoise_plugin_module_loader_new (void);
XnoisePluginModuleLoader* xnoise_plugin_module_loader_construct (GType object_type);
GList* xnoise_plugin_module_loader_get_info_files (XnoisePluginModuleLoader* self);
gboolean xnoise_plugin_module_loader_load_all (XnoisePluginModuleLoader* self);
gboolean xnoise_plugin_module_loader_activate_single_plugin (XnoisePluginModuleLoader* self, const gchar* module);
void xnoise_plugin_module_loader_deactivate_single_plugin (XnoisePluginModuleLoader* self, const gchar* module);
XnoisePluginModuleInformation* xnoise_plugin_module_information_new (const gchar* xplug_file);
XnoisePluginModuleInformation* xnoise_plugin_module_information_construct (GType object_type, const gchar* xplug_file);
gboolean xnoise_plugin_module_information_load_info (XnoisePluginModuleInformation* self);
const gchar* xnoise_plugin_module_information_get_xplug_file (XnoisePluginModuleInformation* self);
const gchar* xnoise_plugin_module_information_get_name (XnoisePluginModuleInformation* self);
const gchar* xnoise_plugin_module_information_get_icon (XnoisePluginModuleInformation* self);
const gchar* xnoise_plugin_module_information_get_module (XnoisePluginModuleInformation* self);
const gchar* xnoise_plugin_module_information_get_description (XnoisePluginModuleInformation* self);
const gchar* xnoise_plugin_module_information_get_website (XnoisePluginModuleInformation* self);
const gchar* xnoise_plugin_module_information_get_license (XnoisePluginModuleInformation* self);
const gchar* xnoise_plugin_module_information_get_copyright (XnoisePluginModuleInformation* self);
const gchar* xnoise_plugin_module_information_get_author (XnoisePluginModuleInformation* self);
gboolean xnoise_plugin_module_iplugin_init (XnoisePluginModuleIPlugin* self);
void xnoise_plugin_module_iplugin_uninit (XnoisePluginModuleIPlugin* self);
gboolean xnoise_plugin_module_iplugin_has_settings_widget (XnoisePluginModuleIPlugin* self);
GtkWidget* xnoise_plugin_module_iplugin_get_settings_widget (XnoisePluginModuleIPlugin* self);
XnoisePluginModuleContainer* xnoise_plugin_module_iplugin_get_owner (XnoisePluginModuleIPlugin* self);
void xnoise_plugin_module_iplugin_set_owner (XnoisePluginModuleIPlugin* self, XnoisePluginModuleContainer* value);
const gchar* xnoise_plugin_module_iplugin_get_name (XnoisePluginModuleIPlugin* self);
XnoiseMain* xnoise_plugin_module_iplugin_get_xn (XnoisePluginModuleIPlugin* self);
void xnoise_plugin_module_iplugin_set_xn (XnoisePluginModuleIPlugin* self, XnoiseMain* value);
gpointer xnoise_remote_schemes_ref (gpointer instance);
void xnoise_remote_schemes_unref (gpointer instance);
GParamSpec* xnoise_param_spec_remote_schemes (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void xnoise_value_set_remote_schemes (GValue* value, gpointer v_object);
void xnoise_value_take_remote_schemes (GValue* value, gpointer v_object);
gpointer xnoise_value_get_remote_schemes (const GValue* value);
GType xnoise_remote_schemes_get_type (void) G_GNUC_CONST;
XnoiseRemoteSchemes* xnoise_services_get_remote_schemes (void);
gpointer xnoise_local_schemes_ref (gpointer instance);
void xnoise_local_schemes_unref (gpointer instance);
GParamSpec* xnoise_param_spec_local_schemes (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void xnoise_value_set_local_schemes (GValue* value, gpointer v_object);
void xnoise_value_take_local_schemes (GValue* value, gpointer v_object);
gpointer xnoise_value_get_local_schemes (const GValue* value);
GType xnoise_local_schemes_get_type (void) G_GNUC_CONST;
XnoiseLocalSchemes* xnoise_services_get_local_schemes (void);
gpointer xnoise_media_extensions_ref (gpointer instance);
void xnoise_media_extensions_unref (gpointer instance);
GParamSpec* xnoise_param_spec_media_extensions (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void xnoise_value_set_media_extensions (GValue* value, gpointer v_object);
void xnoise_value_take_media_extensions (GValue* value, gpointer v_object);
gpointer xnoise_value_get_media_extensions (const GValue* value);
GType xnoise_media_extensions_get_type (void) G_GNUC_CONST;
XnoiseMediaExtensions* xnoise_services_get_media_extensions (void);
gchar* xnoise_services_settings_folder (void);
gchar* xnoise_services_data_folder (void);
gboolean xnoise_services_verify_xnoise_directories (void);
gchar* xnoise_services_prepare_for_comparison (const gchar* value);
gchar* xnoise_services_prepare_for_search (const gchar* val);
gchar* xnoise_services_remove_linebreaks (const gchar* val);
gchar* xnoise_services_remove_suffix_from_filename (const gchar* val);
gchar* xnoise_services_get_suffix_from_filename (const gchar* val);
gchar* xnoise_services_prepare_name_from_filename (const gchar* val);
gchar* xnoise_services_replace_underline_with_blank_encoded (const gchar* value);
GType xnoise_plugin_manager_tree_get_type (void) G_GNUC_CONST;
XnoisePluginManagerTree* xnoise_plugin_manager_tree_new (void);
XnoisePluginManagerTree* xnoise_plugin_manager_tree_construct (GType object_type);
void xnoise_plugin_manager_tree_text_cell_cb (GtkCellLayout* cell_layout, GtkCellRenderer* cell, GtkTreeModel* tree_model, GtkTreeIter* iter);
void xnoise_plugin_manager_tree_create_view (XnoisePluginManagerTree* self);
void xnoise_plugin_manager_tree_set_width (XnoisePluginManagerTree* self, gint w);
GQuark xnoise_settings_dialog_error_quark (void);
GType xnoise_settings_dialog_get_type (void) G_GNUC_CONST;
XnoiseSettingsDialog* xnoise_settings_dialog_new (void);
XnoiseSettingsDialog* xnoise_settings_dialog_construct (GType object_type);
gpointer xnoise_simple_markup_node_ref (gpointer instance);
void xnoise_simple_markup_node_unref (gpointer instance);
GParamSpec* xnoise_simple_markup_param_spec_node (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void xnoise_simple_markup_value_set_node (GValue* value, gpointer v_object);
void xnoise_simple_markup_value_take_node (GValue* value, gpointer v_object);
gpointer xnoise_simple_markup_value_get_node (const GValue* value);
GType xnoise_simple_markup_node_get_type (void) G_GNUC_CONST;
gpointer xnoise_simple_markup_node_attributes_ref (gpointer instance);
void xnoise_simple_markup_node_attributes_unref (gpointer instance);
GParamSpec* xnoise_simple_markup_node_param_spec_attributes (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void xnoise_simple_markup_node_value_set_attributes (GValue* value, gpointer v_object);
void xnoise_simple_markup_node_value_take_attributes (GValue* value, gpointer v_object);
gpointer xnoise_simple_markup_node_value_get_attributes (const GValue* value);
GType xnoise_simple_markup_node_attributes_get_type (void) G_GNUC_CONST;
XnoiseSimpleMarkupNode* xnoise_simple_markup_node_new (const gchar* name);
XnoiseSimpleMarkupNode* xnoise_simple_markup_node_construct (GType object_type, const gchar* name);
gboolean xnoise_simple_markup_node_has_text (XnoiseSimpleMarkupNode* self);
gboolean xnoise_simple_markup_node_has_children (XnoiseSimpleMarkupNode* self);
gboolean xnoise_simple_markup_node_has_attributes (XnoiseSimpleMarkupNode* self);
void xnoise_simple_markup_node_prepend_child (XnoiseSimpleMarkupNode* self, XnoiseSimpleMarkupNode* node);
void xnoise_simple_markup_node_append_child (XnoiseSimpleMarkupNode* self, XnoiseSimpleMarkupNode* node);
void xnoise_simple_markup_node_insert_child (XnoiseSimpleMarkupNode* self, gint pos, XnoiseSimpleMarkupNode* node);
XnoiseSimpleMarkupNode* xnoise_simple_markup_node_get_child_by_name (XnoiseSimpleMarkupNode* self, const gchar* childname);
XnoiseSimpleMarkupNode** xnoise_simple_markup_node_get_children_by_name (XnoiseSimpleMarkupNode* self, const gchar* childname, int* result_length1);
gint xnoise_simple_markup_node_get_idx_of_child (XnoiseSimpleMarkupNode* self, XnoiseSimpleMarkupNode* node);
XnoiseSimpleMarkupNode* xnoise_simple_markup_node_get (XnoiseSimpleMarkupNode* self, gint idx);
void xnoise_simple_markup_node_set (XnoiseSimpleMarkupNode* self, gint idx, XnoiseSimpleMarkupNode* node);
gboolean xnoise_simple_markup_node_remove_child (XnoiseSimpleMarkupNode* self, XnoiseSimpleMarkupNode* node);
gboolean xnoise_simple_markup_node_remove_child_at_idx (XnoiseSimpleMarkupNode* self, gint idx);
void xnoise_simple_markup_node_clear (XnoiseSimpleMarkupNode* self);
gpointer xnoise_simple_markup_node_iterator_ref (gpointer instance);
void xnoise_simple_markup_node_iterator_unref (gpointer instance);
GParamSpec* xnoise_simple_markup_node_param_spec_iterator (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void xnoise_simple_markup_node_value_set_iterator (GValue* value, gpointer v_object);
void xnoise_simple_markup_node_value_take_iterator (GValue* value, gpointer v_object);
gpointer xnoise_simple_markup_node_value_get_iterator (const GValue* value);
GType xnoise_simple_markup_node_iterator_get_type (void) G_GNUC_CONST;
XnoiseSimpleMarkupNodeIterator* xnoise_simple_markup_node_iterator (XnoiseSimpleMarkupNode* self);
const gchar* xnoise_simple_markup_node_get_text (XnoiseSimpleMarkupNode* self);
void xnoise_simple_markup_node_set_text (XnoiseSimpleMarkupNode* self, const gchar* value);
const gchar* xnoise_simple_markup_node_get_name (XnoiseSimpleMarkupNode* self);
XnoiseSimpleMarkupNode* xnoise_simple_markup_node_get_parent (XnoiseSimpleMarkupNode* self);
XnoiseSimpleMarkupNode* xnoise_simple_markup_node_get_previous (XnoiseSimpleMarkupNode* self);
XnoiseSimpleMarkupNode* xnoise_simple_markup_node_get_next (XnoiseSimpleMarkupNode* self);
gint xnoise_simple_markup_node_get_children_count (XnoiseSimpleMarkupNode* self);
gpointer xnoise_simple_markup_node_attributes_keys_ref (gpointer instance);
void xnoise_simple_markup_node_attributes_keys_unref (gpointer instance);
GParamSpec* xnoise_simple_markup_node_attributes_param_spec_keys (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void xnoise_simple_markup_node_attributes_value_set_keys (GValue* value, gpointer v_object);
void xnoise_simple_markup_node_attributes_value_take_keys (GValue* value, gpointer v_object);
gpointer xnoise_simple_markup_node_attributes_value_get_keys (const GValue* value);
GType xnoise_simple_markup_node_attributes_keys_get_type (void) G_GNUC_CONST;
XnoiseSimpleMarkupNodeAttributes* xnoise_simple_markup_node_attributes_new (void);
XnoiseSimpleMarkupNodeAttributes* xnoise_simple_markup_node_attributes_construct (GType object_type);
void xnoise_simple_markup_node_attributes_add (XnoiseSimpleMarkupNodeAttributes* self, const gchar* key, const gchar* val);
void xnoise_simple_markup_node_attributes_replace (XnoiseSimpleMarkupNodeAttributes* self, const gchar* key, const gchar* val);
void xnoise_simple_markup_node_attributes_remove (XnoiseSimpleMarkupNodeAttributes* self, const gchar* key);
void xnoise_simple_markup_node_attributes_clear (XnoiseSimpleMarkupNodeAttributes* self);
gchar* xnoise_simple_markup_node_attributes_get (XnoiseSimpleMarkupNodeAttributes* self, const gchar* key);
void xnoise_simple_markup_node_attributes_set (XnoiseSimpleMarkupNodeAttributes* self, const gchar* key, const gchar* val);
gint xnoise_simple_markup_node_attributes_get_item_count (XnoiseSimpleMarkupNodeAttributes* self);
GList* xnoise_simple_markup_node_attributes_get_key_list (XnoiseSimpleMarkupNodeAttributes* self);
GList* xnoise_simple_markup_node_attributes_get_value_list (XnoiseSimpleMarkupNodeAttributes* self);
XnoiseSimpleMarkupNodeAttributesKeys* xnoise_simple_markup_node_attributes_keys_new (XnoiseSimpleMarkupNodeAttributes* _attrib);
XnoiseSimpleMarkupNodeAttributesKeys* xnoise_simple_markup_node_attributes_keys_construct (GType object_type, XnoiseSimpleMarkupNodeAttributes* _attrib);
gboolean xnoise_simple_markup_node_attributes_keys_contains (XnoiseSimpleMarkupNodeAttributesKeys* self, const gchar* needle_key);
gpointer xnoise_simple_markup_node_attributes_keys_iterator_ref (gpointer instance);
void xnoise_simple_markup_node_attributes_keys_iterator_unref (gpointer instance);
GParamSpec* xnoise_simple_markup_node_attributes_keys_param_spec_iterator (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void xnoise_simple_markup_node_attributes_keys_value_set_iterator (GValue* value, gpointer v_object);
void xnoise_simple_markup_node_attributes_keys_value_take_iterator (GValue* value, gpointer v_object);
gpointer xnoise_simple_markup_node_attributes_keys_value_get_iterator (const GValue* value);
GType xnoise_simple_markup_node_attributes_keys_iterator_get_type (void) G_GNUC_CONST;
XnoiseSimpleMarkupNodeAttributesKeysIterator* xnoise_simple_markup_node_attributes_keys_iterator (XnoiseSimpleMarkupNodeAttributesKeys* self);
XnoiseSimpleMarkupNodeAttributesKeysIterator* xnoise_simple_markup_node_attributes_keys_iterator_new (XnoiseSimpleMarkupNodeAttributes* _iter_attib);
XnoiseSimpleMarkupNodeAttributesKeysIterator* xnoise_simple_markup_node_attributes_keys_iterator_construct (GType object_type, XnoiseSimpleMarkupNodeAttributes* _iter_attib);
gboolean xnoise_simple_markup_node_attributes_keys_iterator_next (XnoiseSimpleMarkupNodeAttributesKeysIterator* self);
gchar* xnoise_simple_markup_node_attributes_keys_iterator_get (XnoiseSimpleMarkupNodeAttributesKeysIterator* self);
XnoiseSimpleMarkupNodeIterator* xnoise_simple_markup_node_iterator_new (XnoiseSimpleMarkupNode* parent_node);
XnoiseSimpleMarkupNodeIterator* xnoise_simple_markup_node_iterator_construct (GType object_type, XnoiseSimpleMarkupNode* parent_node);
gboolean xnoise_simple_markup_node_iterator_next (XnoiseSimpleMarkupNodeIterator* self);
XnoiseSimpleMarkupNode* xnoise_simple_markup_node_iterator_get (XnoiseSimpleMarkupNodeIterator* self);
void xnoise_simple_markup_node_iterator_set (XnoiseSimpleMarkupNodeIterator* self, XnoiseSimpleMarkupNode* node);
GType xnoise_simple_markup_reader_get_type (void) G_GNUC_CONST;
XnoiseSimpleMarkupReader* xnoise_simple_markup_reader_new (GFile* file);
XnoiseSimpleMarkupReader* xnoise_simple_markup_reader_construct (GType object_type, GFile* file);
XnoiseSimpleMarkupReader* xnoise_simple_markup_reader_new_from_string (const gchar* xml_string);
XnoiseSimpleMarkupReader* xnoise_simple_markup_reader_construct_from_string (GType object_type, const gchar* xml_string);
void xnoise_simple_markup_reader_read (XnoiseSimpleMarkupReader* self);
void xnoise_simple_markup_reader_read_asyn (XnoiseSimpleMarkupReader* self, GCancellable* cancellable, GAsyncReadyCallback _callback_, gpointer _user_data_);
void xnoise_simple_markup_reader_read_asyn_finish (XnoiseSimpleMarkupReader* self, GAsyncResult* _res_);
#define XNOISE_SIMPLE_MARKUP_AMPERSAND_ESCAPED "&amp;"
#define XNOISE_SIMPLE_MARKUP_GREATER_THAN_ESCAPED "&gt;"
#define XNOISE_SIMPLE_MARKUP_LOWER_THAN_ESCAPED "&lt;"
#define XNOISE_SIMPLE_MARKUP_QUOTE_ESCAPED "&quot;"
#define XNOISE_SIMPLE_MARKUP_APOSTROPH_ESCAPED "&apos;"
GType xnoise_simple_markup_writer_get_type (void) G_GNUC_CONST;
XnoiseSimpleMarkupWriter* xnoise_simple_markup_writer_new (XnoiseSimpleMarkupNode* root, const gchar* header_string);
XnoiseSimpleMarkupWriter* xnoise_simple_markup_writer_construct (GType object_type, XnoiseSimpleMarkupNode* root, const gchar* header_string);
void xnoise_simple_markup_writer_write (XnoiseSimpleMarkupWriter* self, const gchar* filename);
gpointer xnoise_tag_access_tag_reader_ref (gpointer instance);
void xnoise_tag_access_tag_reader_unref (gpointer instance);
GParamSpec* xnoise_tag_access_param_spec_tag_reader (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void xnoise_tag_access_value_set_tag_reader (GValue* value, gpointer v_object);
void xnoise_tag_access_value_take_tag_reader (GValue* value, gpointer v_object);
gpointer xnoise_tag_access_value_get_tag_reader (const GValue* value);
GType xnoise_tag_access_tag_reader_get_type (void) G_GNUC_CONST;
XnoiseTrackData* xnoise_tag_access_tag_reader_read_tag (XnoiseTagAccessTagReader* self, const gchar* filename);
XnoiseTagAccessTagReader* xnoise_tag_access_tag_reader_new (void);
XnoiseTagAccessTagReader* xnoise_tag_access_tag_reader_construct (GType object_type);
gpointer xnoise_tag_access_tag_writer_ref (gpointer instance);
void xnoise_tag_access_tag_writer_unref (gpointer instance);
GParamSpec* xnoise_tag_access_param_spec_tag_writer (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void xnoise_tag_access_value_set_tag_writer (GValue* value, gpointer v_object);
void xnoise_tag_access_value_take_tag_writer (GValue* value, gpointer v_object);
gpointer xnoise_tag_access_value_get_tag_writer (const GValue* value);
GType xnoise_tag_access_tag_writer_get_type (void) G_GNUC_CONST;
gboolean xnoise_tag_access_tag_writer_write_tag (XnoiseTagAccessTagWriter* self, GFile* file, XnoiseTrackData* td);
gboolean xnoise_tag_access_tag_writer_write_artist (XnoiseTagAccessTagWriter* self, GFile* file, const gchar* artist);
gboolean xnoise_tag_access_tag_writer_write_album (XnoiseTagAccessTagWriter* self, GFile* file, const gchar* album);
XnoiseTagAccessTagWriter* xnoise_tag_access_tag_writer_new (void);
XnoiseTagAccessTagWriter* xnoise_tag_access_tag_writer_construct (GType object_type);
GType xnoise_track_list_column_get_type (void) G_GNUC_CONST;
GType xnoise_text_column_get_type (void) G_GNUC_CONST;
GType xnoise_track_list_model_column_get_type (void) G_GNUC_CONST;
XnoiseTextColumn* xnoise_text_column_new (const gchar* title, GtkCellRendererText* renderer, XnoiseTrackListModelColumn col_id);
XnoiseTextColumn* xnoise_text_column_construct (GType object_type, const gchar* title, GtkCellRendererText* renderer, XnoiseTrackListModelColumn col_id);
void xnoise_text_column_adjust_width (XnoiseTextColumn* self, gint width);
XnoiseTrackListModelColumn xnoise_text_column_get_id (XnoiseTextColumn* self);
GType xnoise_track_list_get_type (void) G_GNUC_CONST;
GType xnoise_track_list_model_get_type (void) G_GNUC_CONST;
XnoiseTrackList* xnoise_track_list_new (void);
XnoiseTrackList* xnoise_track_list_construct (GType object_type);
void xnoise_track_list_set_focus_on_iter (XnoiseTrackList* self, GtkTreeIter* iter);
void xnoise_track_list_remove_selected_rows (XnoiseTrackList* self);
void xnoise_track_list_handle_resize (XnoiseTrackList* self);
gboolean xnoise_track_list_get_column_length_visible (XnoiseTrackList* self);
void xnoise_track_list_set_column_length_visible (XnoiseTrackList* self, gboolean value);
gboolean xnoise_track_list_get_column_tracknumber_visible (XnoiseTrackList* self);
void xnoise_track_list_set_column_tracknumber_visible (XnoiseTrackList* self, gboolean value);
gboolean xnoise_track_list_get_column_artist_visible (XnoiseTrackList* self);
void xnoise_track_list_set_column_artist_visible (XnoiseTrackList* self, gboolean value);
gboolean xnoise_track_list_get_column_album_visible (XnoiseTrackList* self);
void xnoise_track_list_set_column_album_visible (XnoiseTrackList* self, gboolean value);
gboolean xnoise_track_list_get_column_genre_visible (XnoiseTrackList* self);
void xnoise_track_list_set_column_genre_visible (XnoiseTrackList* self, gboolean value);
gboolean xnoise_track_list_get_column_year_visible (XnoiseTrackList* self);
void xnoise_track_list_set_column_year_visible (XnoiseTrackList* self, gboolean value);
XnoiseTrackListColumn* xnoise_track_list_column_new (const gchar* _tracklist_col_name);
XnoiseTrackListColumn* xnoise_track_list_column_construct (GType object_type, const gchar* _tracklist_col_name);
XnoiseTrackListModel* xnoise_track_list_model_new (void);
XnoiseTrackListModel* xnoise_track_list_model_construct (GType object_type);
gpointer xnoise_track_list_model_iterator_ref (gpointer instance);
void xnoise_track_list_model_iterator_unref (gpointer instance);
GParamSpec* xnoise_track_list_model_param_spec_iterator (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void xnoise_track_list_model_value_set_iterator (GValue* value, gpointer v_object);
void xnoise_track_list_model_value_take_iterator (GValue* value, gpointer v_object);
gpointer xnoise_track_list_model_value_get_iterator (const GValue* value);
GType xnoise_track_list_model_iterator_get_type (void) G_GNUC_CONST;
XnoiseTrackListModelIterator* xnoise_track_list_model_iterator (XnoiseTrackListModel* self);
void xnoise_track_list_model_on_before_position_reference_changed (XnoiseTrackListModel* self);
gboolean xnoise_track_list_model_get_first_row (XnoiseTrackListModel* self, GtkTreePath** treepath);
gboolean xnoise_track_list_model_get_random_row (XnoiseTrackListModel* self, GtkTreePath** treepath);
gboolean xnoise_track_list_model_path_is_last_row (XnoiseTrackListModel* self, GtkTreePath** path, gboolean* trackList_is_empty);
void xnoise_track_list_model_on_position_reference_changed (XnoiseTrackListModel* self);
gboolean xnoise_track_list_model_get_current_path (XnoiseTrackListModel* self, GtkTreePath** treepath);
gboolean xnoise_track_list_model_get_active_path (XnoiseTrackListModel* self, GtkTreePath** treepath, gboolean* used_next_pos);
void xnoise_track_list_model_insert_title (XnoiseTrackListModel* self, GdkPixbuf* pixbuf, XnoiseTrackData** td, gboolean bold, GtkTreeIter* result);
gboolean xnoise_track_list_model_not_empty (XnoiseTrackListModel* self);
void xnoise_track_list_model_set_reference_to_last (XnoiseTrackListModel* self);
XnoiseItem* xnoise_track_list_model_get_all_tracks (XnoiseTrackListModel* self, int* result_length1);
gchar* xnoise_track_list_model_get_uri_for_current_position (XnoiseTrackListModel* self);
gboolean xnoise_track_list_model_reset_state (XnoiseTrackListModel* self);
void xnoise_track_list_model_add_uris (XnoiseTrackListModel* self, gchar** uris, int uris_length1);
XnoiseTrackListModelIterator* xnoise_track_list_model_iterator_new (XnoiseTrackListModel* tlm);
XnoiseTrackListModelIterator* xnoise_track_list_model_iterator_construct (GType object_type, XnoiseTrackListModel* tlm);
gboolean xnoise_track_list_model_iterator_next (XnoiseTrackListModelIterator* self);
void xnoise_track_list_model_iterator_get (XnoiseTrackListModelIterator* self, GtkTreeIter* result);
GType xnoise_tray_icon_get_type (void) G_GNUC_CONST;
XnoiseTrayIcon* xnoise_tray_icon_new (void);
XnoiseTrayIcon* xnoise_tray_icon_construct (GType object_type);
gpointer xnoise_app_starter_ref (gpointer instance);
void xnoise_app_starter_unref (gpointer instance);
GParamSpec* xnoise_param_spec_app_starter (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void xnoise_value_set_app_starter (GValue* value, gpointer v_object);
void xnoise_value_take_app_starter (GValue* value, gpointer v_object);
gpointer xnoise_value_get_app_starter (const GValue* value);
GType xnoise_app_starter_get_type (void) G_GNUC_CONST;
extern XnoiseMain* xnoise_app_starter_xn;
UniqueResponse xnoise_app_starter_on_message_received (UniqueApp* sender, gint command, UniqueMessageData* message_data, guint time);
XnoiseAppStarter* xnoise_app_starter_new (void);
XnoiseAppStarter* xnoise_app_starter_construct (GType object_type);
GType xnoise_global_access_get_type (void) G_GNUC_CONST;
void xnoise_global_access_reset_position_reference (XnoiseGlobalAccess* self);
void xnoise_global_access_do_restart_of_current_track (XnoiseGlobalAccess* self);
void xnoise_global_access_handle_eos (XnoiseGlobalAccess* self);
void xnoise_global_access_check_image_for_current_track (XnoiseGlobalAccess* self);
void xnoise_global_access_prev (XnoiseGlobalAccess* self);
void xnoise_global_access_play (XnoiseGlobalAccess* self, gboolean pause_if_playing);
void xnoise_global_access_pause (XnoiseGlobalAccess* self);
void xnoise_global_access_next (XnoiseGlobalAccess* self);
void xnoise_global_access_stop (XnoiseGlobalAccess* self);
XnoiseGlobalAccess* xnoise_global_access_new (void);
XnoiseGlobalAccess* xnoise_global_access_construct (GType object_type);
GType xnoise_player_state_get_type (void) G_GNUC_CONST;
XnoisePlayerState xnoise_global_access_get_player_state (XnoiseGlobalAccess* self);
void xnoise_global_access_set_player_state (XnoiseGlobalAccess* self, XnoisePlayerState value);
const gchar* xnoise_global_access_get_current_uri (XnoiseGlobalAccess* self);
void xnoise_global_access_set_current_uri (XnoiseGlobalAccess* self, const gchar* value);
const GtkTreeRowReference* xnoise_global_access_get_position_reference (XnoiseGlobalAccess* self);
void xnoise_global_access_set_position_reference (XnoiseGlobalAccess* self, const GtkTreeRowReference* value);
const GtkTreeRowReference* xnoise_global_access_get_position_reference_next (XnoiseGlobalAccess* self);
void xnoise_global_access_set_position_reference_next (XnoiseGlobalAccess* self, const GtkTreeRowReference* value);
gboolean xnoise_global_access_get_media_import_in_progress (XnoiseGlobalAccess* self);
void xnoise_global_access_set_media_import_in_progress (XnoiseGlobalAccess* self, gboolean value);
const gchar* xnoise_global_access_get_current_artist (XnoiseGlobalAccess* self);
void xnoise_global_access_set_current_artist (XnoiseGlobalAccess* self, const gchar* value);
const gchar* xnoise_global_access_get_current_album (XnoiseGlobalAccess* self);
void xnoise_global_access_set_current_album (XnoiseGlobalAccess* self, const gchar* value);
const gchar* xnoise_global_access_get_current_title (XnoiseGlobalAccess* self);
void xnoise_global_access_set_current_title (XnoiseGlobalAccess* self, const gchar* value);
const gchar* xnoise_global_access_get_current_location (XnoiseGlobalAccess* self);
void xnoise_global_access_set_current_location (XnoiseGlobalAccess* self, const gchar* value);
const gchar* xnoise_global_access_get_current_genre (XnoiseGlobalAccess* self);
void xnoise_global_access_set_current_genre (XnoiseGlobalAccess* self, const gchar* value);
const gchar* xnoise_global_access_get_current_organization (XnoiseGlobalAccess* self);
void xnoise_global_access_set_current_organization (XnoiseGlobalAccess* self, const gchar* value);
const gchar* xnoise_global_access_get_image_path_small (XnoiseGlobalAccess* self);
void xnoise_global_access_set_image_path_small (XnoiseGlobalAccess* self, const gchar* value);
const gchar* xnoise_global_access_get_image_path_large (XnoiseGlobalAccess* self);
void xnoise_global_access_set_image_path_large (XnoiseGlobalAccess* self, const gchar* value);
gboolean xnoise_local_schemes_contains (XnoiseLocalSchemes* self, const gchar* location);
XnoiseLocalSchemes* xnoise_local_schemes_new (void);
XnoiseLocalSchemes* xnoise_local_schemes_construct (GType object_type);
gchar** xnoise_local_schemes_get_list (XnoiseLocalSchemes* self, int* result_length1);
gboolean xnoise_media_extensions_contains (XnoiseMediaExtensions* self, const gchar* extension);
XnoiseMediaExtensions* xnoise_media_extensions_new (void);
XnoiseMediaExtensions* xnoise_media_extensions_construct (GType object_type);
gchar** xnoise_media_extensions_get_list (XnoiseMediaExtensions* self, int* result_length1);
GType xnoise_media_importer_get_type (void) G_GNUC_CONST;
gchar* xnoise_media_importer_get_uri_for_item_id (XnoiseMediaImporter* self, gint32 id);
XnoiseMediaImporter* xnoise_media_importer_new (void);
XnoiseMediaImporter* xnoise_media_importer_construct (GType object_type);
extern XnoiseParams* xnoise_par;
extern XnoiseGlobalAccess* xnoise_global;
GType xnoise_user_info_get_type (void) G_GNUC_CONST;
extern XnoiseUserInfo* xnoise_userinfo;
GType xnoise_worker_get_type (void) G_GNUC_CONST;
extern XnoiseWorker* xnoise_db_worker;
extern XnoiseWorker* xnoise_io_worker;
extern XnoiseMediaImporter* xnoise_media_importer;
extern XnoiseItemHandlerManager* xnoise_itemhandler_manager;
extern XnoiseItemConverter* xnoise_item_converter;
extern GMainContext* xnoise_mc;
extern XnoiseDatabaseDbBrowser* xnoise_db_browser;
extern XnoiseDatabaseDbWriter* xnoise_db_writer;
extern XnoiseGstPlayer* xnoise_gst_player;
extern XnoisePluginModuleLoader* xnoise_plugin_loader;
extern XnoiseTrayIcon* xnoise_tray_icon;
GType xnoise_main_window_get_type (void) G_GNUC_CONST;
extern XnoiseMainWindow* xnoise_main_window;
extern XnoiseTrackList* xnoise_tl;
extern XnoiseTrackListModel* xnoise_tlm;
void xnoise_initialize (gboolean* is_first_start);
GType xnoise_track_list_note_book_tab_get_type (void) G_GNUC_CONST;
GType gst_stream_type_get_type (void) G_GNUC_CONST;
GType xnoise_gnome_media_keys_proxy_get_type (void) G_GNUC_CONST;
guint xnoise_gnome_media_keys_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType xnoise_gnome_media_keys_get_type (void) G_GNUC_CONST;
void xnoise_gnome_media_keys_GrabMediaPlayerKeys (XnoiseGnomeMediaKeys* self, const gchar* application, guint32 time, GError** error);
void xnoise_gnome_media_keys_ReleaseMediaPlayerKeys (XnoiseGnomeMediaKeys* self, const gchar* application, GError** error);
gboolean xnoise_remote_schemes_contains (XnoiseRemoteSchemes* self, const gchar* location);
XnoiseRemoteSchemes* xnoise_remote_schemes_new (void);
XnoiseRemoteSchemes* xnoise_remote_schemes_construct (GType object_type);
gchar** xnoise_remote_schemes_get_list (XnoiseRemoteSchemes* self, int* result_length1);
XnoiseTrackData* xnoise_track_data_new (void);
XnoiseTrackData* xnoise_track_data_construct (GType object_type);
XnoiseTrackData* xnoise_copy_trackdata (XnoiseTrackData* td);
GType xnoise_user_info_removal_type_get_type (void) G_GNUC_CONST;
GType xnoise_user_info_content_class_get_type (void) G_GNUC_CONST;
GType xnoise_info_bar_get_type (void) G_GNUC_CONST;
XnoiseUserInfo* xnoise_user_info_new (XnoiseUserInfoAddInfoBarDelegateType func, void* func_target);
XnoiseUserInfo* xnoise_user_info_construct (GType object_type, XnoiseUserInfoAddInfoBarDelegateType func, void* func_target);
void xnoise_user_info_enable_close_button_by_id (XnoiseUserInfo* self, guint id, gboolean enable);
void xnoise_user_info_update_symbol_widget_by_id (XnoiseUserInfo* self, guint id, XnoiseUserInfoContentClass cc);
void xnoise_user_info_update_text_by_id (XnoiseUserInfo* self, guint id, const gchar* txt, gboolean bold);
void xnoise_user_info_update_extra_widget_by_id (XnoiseUserInfo* self, guint id, GtkWidget* widget);
GtkWidget* xnoise_user_info_get_extra_widget_by_id (XnoiseUserInfo* self, guint id);
void xnoise_user_info_popdown (XnoiseUserInfo* self, guint id);
guint xnoise_user_info_popup (XnoiseUserInfo* self, XnoiseUserInfoRemovalType removal_type, XnoiseUserInfoContentClass content_class, const gchar* info_text, gboolean bold, gint appearance_time_seconds, GtkWidget* extra_widget);
GType xnoise_worker_execution_type_get_type (void) G_GNUC_CONST;
XnoiseWorker* xnoise_worker_new (GMainContext* mc);
XnoiseWorker* xnoise_worker_construct (GType object_type, GMainContext* mc);
void xnoise_worker_push_job (XnoiseWorker* self, XnoiseWorkerJob* j);
XnoiseWorkerJob* xnoise_worker_job_new (XnoiseWorkerExecutionType execution_type, XnoiseWorkerWorkFunc func, void* func_target, guint _timer_seconds);
XnoiseWorkerJob* xnoise_worker_job_construct (GType object_type, XnoiseWorkerExecutionType execution_type, XnoiseWorkerWorkFunc func, void* func_target, guint _timer_seconds);
void xnoise_worker_job_set_arg (XnoiseWorkerJob* self, const gchar* name, GValue* val);
GValue* xnoise_worker_job_get_arg (XnoiseWorkerJob* self, const gchar* name);
guint xnoise_worker_job_get_timer_seconds (XnoiseWorkerJob* self);
XnoiseWorkerExecutionType xnoise_worker_job_get_execution_type (XnoiseWorkerJob* self);
GType xnoise_add_media_dialog_get_type (void) G_GNUC_CONST;
XnoiseAddMediaDialog* xnoise_add_media_dialog_new (void);
XnoiseAddMediaDialog* xnoise_add_media_dialog_construct (GType object_type);
GType xnoise_control_button_get_type (void) G_GNUC_CONST;
GType xnoise_control_button_direction_get_type (void) G_GNUC_CONST;
XnoiseControlButton* xnoise_control_button_new (XnoiseControlButtonDirection _direction);
XnoiseControlButton* xnoise_control_button_construct (GType object_type, XnoiseControlButtonDirection _direction);
gpointer xnoise_fullscreen_toolbar_ref (gpointer instance);
void xnoise_fullscreen_toolbar_unref (gpointer instance);
GParamSpec* xnoise_param_spec_fullscreen_toolbar (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void xnoise_value_set_fullscreen_toolbar (GValue* value, gpointer v_object);
void xnoise_value_take_fullscreen_toolbar (GValue* value, gpointer v_object);
gpointer xnoise_value_get_fullscreen_toolbar (const GValue* value);
GType xnoise_fullscreen_toolbar_get_type (void) G_GNUC_CONST;
XnoiseFullscreenToolbar* xnoise_fullscreen_toolbar_new (GtkWindow* fullscreenwindow);
XnoiseFullscreenToolbar* xnoise_fullscreen_toolbar_construct (GType object_type, GtkWindow* fullscreenwindow);
void xnoise_fullscreen_toolbar_resize (XnoiseFullscreenToolbar* self);
void xnoise_fullscreen_toolbar_launch_hide_timer (XnoiseFullscreenToolbar* self);
gboolean xnoise_fullscreen_toolbar_on_pointer_motion (XnoiseFullscreenToolbar* self, GdkEventMotion* ev);
void xnoise_fullscreen_toolbar_show (XnoiseFullscreenToolbar* self);
void xnoise_fullscreen_toolbar_hide (XnoiseFullscreenToolbar* self);
GType xnoise_fullscreen_toolbar_leave_video_fs_button_get_type (void) G_GNUC_CONST;
XnoiseFullscreenToolbarLeaveVideoFSButton* xnoise_fullscreen_toolbar_leave_video_fs_button_new (void);
XnoiseFullscreenToolbarLeaveVideoFSButton* xnoise_fullscreen_toolbar_leave_video_fs_button_construct (GType object_type);
void xnoise_fullscreen_toolbar_leave_video_fs_button_on_clicked (XnoiseFullscreenToolbarLeaveVideoFSButton* self);
XnoiseInfoBar* xnoise_info_bar_new (XnoiseUserInfo* _uinf, XnoiseUserInfoContentClass _content_class, XnoiseUserInfoRemovalType _removal_type, guint _current_id, gint _appearance_time_seconds, const gchar* _info_text, gboolean bold, GtkWidget* _extra_widget);
XnoiseInfoBar* xnoise_info_bar_construct (GType object_type, XnoiseUserInfo* _uinf, XnoiseUserInfoContentClass _content_class, XnoiseUserInfoRemovalType _removal_type, guint _current_id, gint _appearance_time_seconds, const gchar* _info_text, gboolean bold, GtkWidget* _extra_widget);
void xnoise_info_bar_enable_close_button (XnoiseInfoBar* self, gboolean enable);
void xnoise_info_bar_update_symbol_widget (XnoiseInfoBar* self, XnoiseUserInfoContentClass cc);
void xnoise_info_bar_update_text (XnoiseInfoBar* self, const gchar* txt, gboolean bold);
void xnoise_info_bar_update_extra_widget (XnoiseInfoBar* self, GtkWidget* widget);
GtkWidget* xnoise_info_bar_get_extra_widget (XnoiseInfoBar* self);
gboolean gdk_window_ensure_native (GdkWindow* window);
void gtk_widget_style_get_property (GtkWidget* widget, const gchar* property_name, GValue* val);
GType xnoise_play_pause_button_get_type (void) G_GNUC_CONST;
GType xnoise_track_infobar_get_type (void) G_GNUC_CONST;
GType xnoise_main_window_player_repeat_mode_get_type (void) G_GNUC_CONST;
GtkUIManager* xnoise_main_window_get_ui_manager (XnoiseMainWindow* self);
XnoiseMainWindow* xnoise_main_window_new (void);
XnoiseMainWindow* xnoise_main_window_construct (GType object_type);
void xnoise_main_window_ask_for_initial_media_import (XnoiseMainWindow* self);
void xnoise_main_window_position_config_menu (XnoiseMainWindow* self, GtkMenu* menu, gint* x, gint* y, gboolean* push);
void xnoise_main_window_toggle_fullscreen (XnoiseMainWindow* self);
void xnoise_main_window_toggle_window_visbility (XnoiseMainWindow* self);
void xnoise_main_window_show_window (XnoiseMainWindow* self);
void xnoise_main_window_stop (XnoiseMainWindow* self);
void xnoise_main_window_change_track (XnoiseMainWindow* self, XnoiseControlButtonDirection direction, gboolean handle_repeat_state);
void xnoise_main_window_set_displayed_title (XnoiseMainWindow* self, gchar** newuri, const gchar* tagname, const gchar* tagvalue);
void xnoise_main_window_handle_control_button_click (XnoiseMainWindow* self, XnoiseControlButton* sender, XnoiseControlButtonDirection dir);
void xnoise_main_window_display_info_bar (XnoiseMainWindow* self, GtkInfoBar* bar);
void xnoise_main_window_show_status_info (XnoiseMainWindow* self, XnoiseInfoBar* bar);
gboolean xnoise_main_window_get_not_show_art_on_hover_image (XnoiseMainWindow* self);
void xnoise_main_window_set_not_show_art_on_hover_image (XnoiseMainWindow* self, gboolean value);
gboolean xnoise_main_window_get_active_lyrics (XnoiseMainWindow* self);
void xnoise_main_window_set_active_lyrics (XnoiseMainWindow* self, gboolean value);
XnoiseMainWindowPlayerRepeatMode xnoise_main_window_get_repeatState (XnoiseMainWindow* self);
void xnoise_main_window_set_repeatState (XnoiseMainWindow* self, XnoiseMainWindowPlayerRepeatMode value);
gboolean xnoise_main_window_get_fullscreenwindowvisible (XnoiseMainWindow* self);
void xnoise_main_window_set_fullscreenwindowvisible (XnoiseMainWindow* self, gboolean value);
gboolean xnoise_main_window_get_usestop (XnoiseMainWindow* self);
void xnoise_main_window_set_usestop (XnoiseMainWindow* self, gboolean value);
gboolean xnoise_main_window_get_compact_layout (XnoiseMainWindow* self);
void xnoise_main_window_set_compact_layout (XnoiseMainWindow* self, gboolean value);
XnoisePlayPauseButton* xnoise_play_pause_button_new (void);
XnoisePlayPauseButton* xnoise_play_pause_button_construct (GType object_type);
void xnoise_play_pause_button_on_menu_clicked (XnoisePlayPauseButton* self, GtkMenuItem* sender);
void xnoise_play_pause_button_on_clicked (XnoisePlayPauseButton* self, GtkWidget* sender);
void xnoise_play_pause_button_update_picture (XnoisePlayPauseButton* self);
void xnoise_play_pause_button_set_play_picture (XnoisePlayPauseButton* self);
void xnoise_play_pause_button_set_pause_picture (XnoisePlayPauseButton* self);
XnoiseTrackInfobar* xnoise_track_infobar_new (XnoiseGstPlayer* _player);
XnoiseTrackInfobar* xnoise_track_infobar_construct (GType object_type, XnoiseGstPlayer* _player);
void xnoise_track_infobar_set_value (XnoiseTrackInfobar* self, guint pos, guint len);
const gchar* xnoise_track_infobar_get_title_text (XnoiseTrackInfobar* self);
void xnoise_track_infobar_set_title_text (XnoiseTrackInfobar* self, const gchar* value);
GType xnoise_track_progress_bar_get_type (void) G_GNUC_CONST;
XnoiseTrackProgressBar* xnoise_track_progress_bar_new (XnoiseGstPlayer* _player);
XnoiseTrackProgressBar* xnoise_track_progress_bar_construct (GType object_type, XnoiseGstPlayer* _player);
void xnoise_track_progress_bar_set_value (XnoiseTrackProgressBar* self, guint pos, guint len);
XnoiseVideoScreen* xnoise_video_screen_new (XnoiseGstPlayer* _player);
XnoiseVideoScreen* xnoise_video_screen_construct (GType object_type, XnoiseGstPlayer* _player);
void xnoise_video_screen_trigger_expose (XnoiseVideoScreen* self);
const gchar* xnoise_video_screen_get_font_family (XnoiseVideoScreen* self);
void xnoise_video_screen_set_font_family (XnoiseVideoScreen* self, const gchar* value);
gdouble xnoise_video_screen_get_font_size (XnoiseVideoScreen* self);
void xnoise_video_screen_set_font_size (XnoiseVideoScreen* self, gdouble value);
const gchar* xnoise_video_screen_get_text (XnoiseVideoScreen* self);
void xnoise_video_screen_set_text (XnoiseVideoScreen* self, const gchar* value);
GType xnoise_volume_slider_button_get_type (void) G_GNUC_CONST;
XnoiseVolumeSliderButton* xnoise_volume_slider_button_new (void);
XnoiseVolumeSliderButton* xnoise_volume_slider_button_construct (GType object_type);

extern const gchar* XNOISE_PLAYLIST_remote_schemes[3];

G_END_DECLS

#endif
